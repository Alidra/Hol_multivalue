Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import ADMISSIBLE_MATCH_term_abbrevs.
Require Import DISJ_ACI_spec.
Require Import DISJ_ASSOC_spec.
Require Import admissible_spec.
Require Import thm0_spec.
Require Import thm10578_spec.
Require Import thm10597_spec.
Require Import thm13473_spec.
Require Import thm16457_spec.
Require Import thm16458_spec.
Require Import thm16471_spec.
Require Import thm16473_spec.
Require Import thm16474_spec.
Require Import thm16506_spec.
Require Import thm16507_spec.
Require Import thm17045_spec.
Require Import thm17265_spec.
Require Import thm17362_spec.
Require Import thm1809_spec.
Require Import thm1810_spec.
Require Import thm18392_spec.
Require Import thm18898_spec.
Require Import thm18899_spec.
Require Import thm18904_spec.
Require Import thm18905_spec.
Require Import thm18910_spec.
Require Import thm18911_spec.
Require Import thm19490_spec.
Require Import thm19699_spec.
Require Import thm19732_spec.
Require Import thm20661_spec.
Require Import thm20662_spec.
Require Import thm20664_spec.
Require Import thm20665_spec.
Require Import thm20668_spec.
Require Import thm20682_spec.
Require Import thm20764_spec.
Require Import thm20780_spec.
Require Import thm20789_spec.
Require Import thm20895_spec.
Require Import thm21021_spec.
Require Import thm21028_spec.
Require Import thm21107_spec.
Require Import thm21114_spec.
Require Import thm21182_spec.
Require Import thm21385_spec.
Require Import thm21386_spec.
Require Import thm21394_spec.
Require Import thm21490_spec.
Require Import thm21501_spec.
Require Import thm21598_spec.
Require Import thm51_spec.
Lemma lem8136187 (t1 : Prop) : term0 t1.
Proof. exact (@lem693 t1). Qed.
Lemma lem8136188 (t1 : Prop) : (term0 t1) = (term1 t1).
Proof. exact (eq_refl (term0 t1)). Qed.
Lemma lem8136189 (t1 : Prop) : term1 t1.
Proof. exact (EQ_MP (@lem8136188 t1) (@lem8136187 t1)). Qed.
Lemma lem8136190 (t1 : Prop) (t2 : Prop) : term2 t1 t2.
Proof. exact (@lem8136189 t1 t2). Qed.
Lemma lem8136191 (t1 : Prop) (t2 : Prop) : (term2 t1 t2) = (term3 t1 t2).
Proof. exact (eq_refl (term2 t1 t2)). Qed.
Lemma lem8136192 (t1 : Prop) (t2 : Prop) : term3 t1 t2.
Proof. exact (EQ_MP (@lem8136191 t1 t2) (@lem8136190 t1 t2)). Qed.
Lemma lem8136193 (t1 : Prop) (t2 : Prop) (t3 : Prop) : term4 t1 t2 t3.
Proof. exact (@lem8136192 t1 t2 t3). Qed.
Lemma lem8136194 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term4 t1 t2 t3) = ((term5 t1 t2 t3) = (term6 t1 t2 t3)).
Proof. exact (eq_refl (term4 t1 t2 t3)). Qed.
Lemma lem8136195 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term5 t1 t2 t3) = (term6 t1 t2 t3).
Proof. exact (EQ_MP (@lem8136194 t1 t2 t3) (@lem8136193 t1 t2 t3)). Qed.
Lemma lem8136196 (t1 : Prop) (t2 : Prop) (t3 : Prop) : (term6 t1 t2 t3) = (term5 t1 t2 t3).
Proof. exact (SYM (@lem8136195 t1 t2 t3)). Qed.
Lemma lem8136197 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term7 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (@lem8093231 _143449 _143452 _143456 _143457 _143462 p). Qed.
Lemma lem8136198 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : (term7 _143449 _143452 _143456 _143457 _143462 p) = (term8 _143449 _143452 _143456 _143457 _143462 p).
Proof. exact (eq_refl (term7 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8136199 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) : term8 _143449 _143452 _143456 _143457 _143462 p.
Proof. exact (EQ_MP (@lem8136198 _143449 _143452 _143456 _143457 _143462 p) (@lem8136197 _143449 _143452 _143456 _143457 _143462 p)). Qed.
Lemma lem8136200 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term9 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (@lem8136199 _143449 _143452 _143456 _143457 _143462 p lt2). Qed.
Lemma lem8136201 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : (term9 _143449 _143452 _143456 _143457 _143462 p lt2) = (term10 _143449 _143452 _143456 _143457 _143462 p lt2).
Proof. exact (eq_refl (term9 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8136202 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) : term10 _143449 _143452 _143456 _143457 _143462 p lt2.
Proof. exact (EQ_MP (@lem8136201 _143449 _143452 _143456 _143457 _143462 p lt2) (@lem8136200 _143449 _143452 _143456 _143457 _143462 p lt2)). Qed.
Lemma lem8136203 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term11 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (@lem8136202 _143449 _143452 _143456 _143457 _143462 p lt2 s). Qed.
Lemma lem8136204 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : (term11 _143449 _143452 _143456 _143457 _143462 p lt2 s) = (term12 _143449 _143452 _143456 _143457 _143462 p lt2 s).
Proof. exact (eq_refl (term11 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8136205 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) : term12 _143449 _143452 _143456 _143457 _143462 p lt2 s.
Proof. exact (EQ_MP (@lem8136204 _143449 _143452 _143456 _143457 _143462 p lt2 s) (@lem8136203 _143449 _143452 _143456 _143457 _143462 p lt2 s)). Qed.
Lemma lem8136206 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t.
Proof. exact (@lem8136205 _143449 _143452 _143456 _143457 _143462 p lt2 s t). Qed.
Lemma lem8136207 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t) = ((@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t)).
Proof. exact (eq_refl (term13 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8136234 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t).
Proof. exact (EQ_MP (@lem8136207 _143449 _143452 _143456 _143457 _143462 p lt2 s t) (@lem8136206 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8136235 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (t : type564 _144105 _144106 _144141 P) : (@admissible _144104 _144106 _144105 _144141 P lt2 p s t) = (term15 _144104 _144105 _144106 _144141 P p lt2 s t).
Proof. exact (@lem8136234 _144104 _144106 _144105 _144141 P p lt2 s t). Qed.
Lemma lem8136236 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (@admissible _144104 _144106 _144105 _144141 P lt2 p s e) = (term15 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (@lem8136235 _144104 _144105 _144106 _144141 P p lt2 s e). Qed.
Lemma lem8136265 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8136266 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term16 _144104 _144105 _144106 _144141 P lt2 p s e) = (term17 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8136265) (@lem8136236 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8136268 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t).
Proof. exact (EQ_MP (@lem8136207 _143449 _143452 _143456 _143457 _143462 p lt2 s t) (@lem8136206 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8136269 {_144104 _144105 _144106 _144138 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (t : type563 _144105 _144106 _144138 P) : (@admissible _144104 _144106 _144105 (_144138 -> Prop) P lt2 p s t) = (term18 _144104 _144105 _144106 _144138 P p lt2 s t).
Proof. exact (@lem8136268 _144104 _144106 _144105 (_144138 -> Prop) P p lt2 s t). Qed.
Lemma lem8136270 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term19 _144104 _144105 _144106 _144138 _144141 P lt2 p s c e) = (term20 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (@lem8136269 _144104 _144105 _144106 _144138 P p lt2 s (term21 _144105 _144106 _144138 _144141 P c e)). Qed.
Lemma lem8136300 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136301 {_144105 _144106 _144138 P : Type'} (f : type563 _144105 _144106 _144138 P) (y : _144105 -> _144106) : (term23 _144105 _144106 _144138 P f y) = (f y).
Proof. exact (@lem8136300 (_144105 -> _144106) (type1470 _144138 P) f y). Qed.
Lemma lem8136302 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term24 _144105 _144106 _144138 _144141 P c e f) = (term25 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (@lem8136301 _144105 _144106 _144138 P (term21 _144105 _144106 _144138 _144141 P c e) f). Qed.
Lemma lem8136303 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (eq_refl (term25 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136304 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term27 _144105 _144106 _144138 _144141 P c e) = (term21 _144105 _144106 _144138 _144141 P c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136303 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136305 {_144105 _144106 : Type'} (f : _144105 -> _144106) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8136306 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term24 _144105 _144106 _144138 _144141 P c e f) = (term25 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (MK_COMB (@lem8136304 _144105 _144106 _144138 _144141 P c e) (@lem8136305 _144105 _144106 f)). Qed.
Lemma lem8136307 {_144138 P : Type'} : (@eq (P -> _144138 -> Prop)) = (@eq (P -> _144138 -> Prop)).
Proof. exact (eq_refl (@eq (P -> _144138 -> Prop))). Qed.
Lemma lem8136308 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term28 _144105 _144106 _144138 _144141 P c e f) = (term29 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (MK_COMB (@lem8136307 _144138 P) (@lem8136306 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136309 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (eq_refl (term25 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136310 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : ((term24 _144105 _144106 _144138 _144141 P c e f) = (term25 _144105 _144106 _144138 _144141 P c e f)) = ((term25 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f)).
Proof. exact (MK_COMB (@lem8136308 _144105 _144106 _144138 _144141 P c e f) (@lem8136309 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136311 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (EQ_MP (@lem8136310 _144105 _144106 _144138 _144141 P c e f) (@lem8136302 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136312 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136313 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term30 _144105 _144106 _144138 _144141 P c e f a) = (term31 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136311 _144105 _144106 _144138 _144141 P c e f) (@lem8136312 P a)). Qed.
Lemma lem8136315 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136316 {_144138 P : Type'} (f : type1470 _144138 P) (y : P) : (term32 _144138 P f y) = (f y).
Proof. exact (@lem8136315 P (_144138 -> Prop) f y). Qed.
Lemma lem8136317 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term33 _144105 _144106 _144138 _144141 P c e f a) = (term31 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8136316 _144138 P (term26 _144105 _144106 _144138 _144141 P c e f) a). Qed.
Lemma lem8136318 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term31 _144105 _144106 _144138 _144141 P c e f x) = (term34 _144105 _144106 _144138 _144141 P c e f x).
Proof. exact (eq_refl (term31 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136319 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term35 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (fun_ext (fun x : P => @lem8136318 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136320 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136321 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term33 _144105 _144106 _144138 _144141 P c e f a) = (term31 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136319 _144105 _144106 _144138 _144141 P c e f) (@lem8136320 P a)). Qed.
Lemma lem8136322 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8136323 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term36 _144105 _144106 _144138 _144141 P c e f a) = (term37 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136322 _144138) (@lem8136321 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136324 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term31 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term31 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136325 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : ((term33 _144105 _144106 _144138 _144141 P c e f a) = (term31 _144105 _144106 _144138 _144141 P c e f a)) = ((term31 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e f a)).
Proof. exact (MK_COMB (@lem8136323 _144105 _144106 _144138 _144141 P c e f a) (@lem8136324 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136326 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term31 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (EQ_MP (@lem8136325 _144105 _144106 _144138 _144141 P c e f a) (@lem8136317 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136327 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term30 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8136313 _144105 _144106 _144138 _144141 P c e f a) (@lem8136326 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136328 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8136329 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term38 _144105 _144106 _144138 _144141 P c e f a) = (term39 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136328 _144138) (@lem8136327 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136331 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136332 {_144105 _144106 _144138 P : Type'} (f : type563 _144105 _144106 _144138 P) (y : _144105 -> _144106) : (term23 _144105 _144106 _144138 P f y) = (f y).
Proof. exact (@lem8136331 (_144105 -> _144106) (type1470 _144138 P) f y). Qed.
Lemma lem8136333 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term24 _144105 _144106 _144138 _144141 P c e g) = (term25 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (@lem8136332 _144105 _144106 _144138 P (term21 _144105 _144106 _144138 _144141 P c e) g). Qed.
Lemma lem8136334 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e f) = (term26 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (eq_refl (term25 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136335 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term27 _144105 _144106 _144138 _144141 P c e) = (term21 _144105 _144106 _144138 _144141 P c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136334 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136336 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8136337 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term24 _144105 _144106 _144138 _144141 P c e g) = (term25 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (MK_COMB (@lem8136335 _144105 _144106 _144138 _144141 P c e) (@lem8136336 _144105 _144106 g)). Qed.
Lemma lem8136338 {_144138 P : Type'} : (@eq (P -> _144138 -> Prop)) = (@eq (P -> _144138 -> Prop)).
Proof. exact (eq_refl (@eq (P -> _144138 -> Prop))). Qed.
Lemma lem8136339 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term28 _144105 _144106 _144138 _144141 P c e g) = (term29 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (MK_COMB (@lem8136338 _144138 P) (@lem8136337 _144105 _144106 _144138 _144141 P c e g)). Qed.
Lemma lem8136340 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e g) = (term26 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (eq_refl (term25 _144105 _144106 _144138 _144141 P c e g)). Qed.
Lemma lem8136341 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term24 _144105 _144106 _144138 _144141 P c e g) = (term25 _144105 _144106 _144138 _144141 P c e g)) = ((term25 _144105 _144106 _144138 _144141 P c e g) = (term26 _144105 _144106 _144138 _144141 P c e g)).
Proof. exact (MK_COMB (@lem8136339 _144105 _144106 _144138 _144141 P c e g) (@lem8136340 _144105 _144106 _144138 _144141 P c e g)). Qed.
Lemma lem8136342 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term25 _144105 _144106 _144138 _144141 P c e g) = (term26 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (EQ_MP (@lem8136341 _144105 _144106 _144138 _144141 P c e g) (@lem8136333 _144105 _144106 _144138 _144141 P c e g)). Qed.
Lemma lem8136343 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136344 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term30 _144105 _144106 _144138 _144141 P c e g a) = (term31 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136342 _144105 _144106 _144138 _144141 P c e g) (@lem8136343 P a)). Qed.
Lemma lem8136346 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136347 {_144138 P : Type'} (f : type1470 _144138 P) (y : P) : (term32 _144138 P f y) = (f y).
Proof. exact (@lem8136346 P (_144138 -> Prop) f y). Qed.
Lemma lem8136348 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term33 _144105 _144106 _144138 _144141 P c e g a) = (term31 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8136347 _144138 P (term26 _144105 _144106 _144138 _144141 P c e g) a). Qed.
Lemma lem8136349 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term31 _144105 _144106 _144138 _144141 P c e g x) = (term34 _144105 _144106 _144138 _144141 P c e g x).
Proof. exact (eq_refl (term31 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136350 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term35 _144105 _144106 _144138 _144141 P c e g) = (term26 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (fun_ext (fun x : P => @lem8136349 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136351 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136352 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term33 _144105 _144106 _144138 _144141 P c e g a) = (term31 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136350 _144105 _144106 _144138 _144141 P c e g) (@lem8136351 P a)). Qed.
Lemma lem8136353 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8136354 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term36 _144105 _144106 _144138 _144141 P c e g a) = (term37 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136353 _144138) (@lem8136352 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136355 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term31 _144105 _144106 _144138 _144141 P c e g a) = (term34 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term31 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136356 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term33 _144105 _144106 _144138 _144141 P c e g a) = (term31 _144105 _144106 _144138 _144141 P c e g a)) = ((term31 _144105 _144106 _144138 _144141 P c e g a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8136354 _144105 _144106 _144138 _144141 P c e g a) (@lem8136355 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136357 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term31 _144105 _144106 _144138 _144141 P c e g a) = (term34 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136356 _144105 _144106 _144138 _144141 P c e g a) (@lem8136348 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136358 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term30 _144105 _144106 _144138 _144141 P c e g a) = (term34 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8136344 _144105 _144106 _144138 _144141 P c e g a) (@lem8136357 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136359 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term30 _144105 _144106 _144138 _144141 P c e f a) = (term30 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8136329 _144105 _144106 _144138 _144141 P c e f a) (@lem8136358 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136362 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (eq_refl (term40 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8136363 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term41 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136362 _144104 _144105 _144106 P p lt2 s a f g) (@lem8136359 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136366 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term43 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8136363 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136367 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8136368 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term45 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8136367 P) (@lem8136366 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8136373 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term47 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8136368 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8136374 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136375 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term49 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8136374 _144105 _144106) (@lem8136373 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8136380 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term51 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136375 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8136381 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136382 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term20 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8136381 _144105 _144106) (@lem8136380 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136387 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term19 _144104 _144105 _144106 _144138 _144141 P lt2 p s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8136270 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8136382 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136388 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term54 _144104 _144105 _144106 _144138 _144141 P lt2 p s c e) = (term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8136266 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8136387 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136391 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8136392 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term56 _144104 _144105 _144106 _144138 _144141 P lt2 p s c e) = (term57 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8136391) (@lem8136388 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136394 {_143449 _143452 _143456 _143457 _143462 : Type'} (p : type800 _143452 _143456 _143462) (lt2 : type1470 _143449 _143456) (s : _143462 -> _143449) (t : type801 _143452 _143456 _143457 _143462) : (@admissible _143449 _143452 _143456 _143457 _143462 lt2 p s t) = (term14 _143449 _143452 _143456 _143457 _143462 p lt2 s t).
Proof. exact (EQ_MP (@lem8136207 _143449 _143452 _143456 _143457 _143462 p lt2 s t) (@lem8136206 _143449 _143452 _143456 _143457 _143462 p lt2 s t)). Qed.
Lemma lem8136395 {_144104 _144105 _144106 _144138 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (t : type564 _144105 _144106 _144138 P) : (@admissible _144104 _144106 _144105 _144138 P lt2 p s t) = (term15 _144104 _144105 _144106 _144138 P p lt2 s t).
Proof. exact (@lem8136394 _144104 _144106 _144105 _144138 P p lt2 s t). Qed.
Lemma lem8136396 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) : (term58 _144104 _144105 _144106 _144138 _144141 P lt2 p s e c) = (term59 _144104 _144105 _144106 _144138 _144141 P p lt2 s e c).
Proof. exact (@lem8136395 _144104 _144105 _144106 _144138 P p lt2 s (term60 _144105 _144106 _144138 _144141 P e c)). Qed.
Lemma lem8136426 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136427 {_144105 _144106 _144138 P : Type'} (f : type564 _144105 _144106 _144138 P) (y : _144105 -> _144106) : (term61 _144105 _144106 _144138 P f y) = (f y).
Proof. exact (@lem8136426 (_144105 -> _144106) (P -> _144138) f y). Qed.
Lemma lem8136428 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term62 _144105 _144106 _144138 _144141 P e c f) = (term63 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (@lem8136427 _144105 _144106 _144138 P (term60 _144105 _144106 _144138 _144141 P e c) f). Qed.
Lemma lem8136429 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c f) = (term64 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (eq_refl (term63 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136430 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) : (term65 _144105 _144106 _144138 _144141 P e c) = (term60 _144105 _144106 _144138 _144141 P e c).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136429 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136431 {_144105 _144106 : Type'} (f : _144105 -> _144106) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8136432 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term62 _144105 _144106 _144138 _144141 P e c f) = (term63 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (MK_COMB (@lem8136430 _144105 _144106 _144138 _144141 P e c) (@lem8136431 _144105 _144106 f)). Qed.
Lemma lem8136433 {_144138 P : Type'} : (@eq (P -> _144138)) = (@eq (P -> _144138)).
Proof. exact (eq_refl (@eq (P -> _144138))). Qed.
Lemma lem8136434 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term66 _144105 _144106 _144138 _144141 P e c f) = (term67 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (MK_COMB (@lem8136433 _144138 P) (@lem8136432 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136435 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c f) = (term64 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (eq_refl (term63 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136436 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : ((term62 _144105 _144106 _144138 _144141 P e c f) = (term63 _144105 _144106 _144138 _144141 P e c f)) = ((term63 _144105 _144106 _144138 _144141 P e c f) = (term64 _144105 _144106 _144138 _144141 P e c f)).
Proof. exact (MK_COMB (@lem8136434 _144105 _144106 _144138 _144141 P e c f) (@lem8136435 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136437 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c f) = (term64 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (EQ_MP (@lem8136436 _144105 _144106 _144138 _144141 P e c f) (@lem8136428 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136439 {_4656 _4660 : Type'} : (@_MATCH _4656 _4660) = (term68 _4656 _4660).
Proof. exact (@_MATCH_def _4656 _4660). Qed.
Lemma lem8136440 {_144138 _144141 : Type'} : (@_MATCH _144141 _144138) = (term69 _144138 _144141).
Proof. exact (@lem8136439 _144141 _144138). Qed.
Lemma lem8136441 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (e f x) = (e f x).
Proof. exact (eq_refl (e f x)). Qed.
Lemma lem8136442 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term70 _144105 _144106 _144138 _144141 P e f x) = (term71 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (MK_COMB (@lem8136440 _144138 _144141) (@lem8136441 _144105 _144106 _144141 P e f x)). Qed.
Lemma lem8136444 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136445 {_144138 _144141 : Type'} (f : type1450 _144138 _144141) (y : _144141) : (term72 _144138 _144141 f y) = (f y).
Proof. exact (@lem8136444 _144141 (type743 _144138 _144141) f y). Qed.
Lemma lem8136446 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term73 _144105 _144106 _144138 _144141 P e f x) = (term71 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (@lem8136445 _144138 _144141 (term69 _144138 _144141) (e f x)). Qed.
Lemma lem8136447 {_144138 _144141 : Type'} (e : _144141) : (term74 _144138 _144141 e) = (term75 _144138 _144141 e).
Proof. exact (eq_refl (term74 _144138 _144141 e)). Qed.
Lemma lem8136448 {_144138 _144141 : Type'} : (term76 _144138 _144141) = (term69 _144138 _144141).
Proof. exact (fun_ext (fun e : _144141 => @lem8136447 _144138 _144141 e)). Qed.
Lemma lem8136449 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (e f x) = (e f x).
Proof. exact (eq_refl (e f x)). Qed.
Lemma lem8136450 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term73 _144105 _144106 _144138 _144141 P e f x) = (term71 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (MK_COMB (@lem8136448 _144138 _144141) (@lem8136449 _144105 _144106 _144141 P e f x)). Qed.
Lemma lem8136451 {_144138 _144141 : Type'} : (@eq ((_144141 -> _144138 -> Prop) -> _144138)) = (@eq ((_144141 -> _144138 -> Prop) -> _144138)).
Proof. exact (eq_refl (@eq ((_144141 -> _144138 -> Prop) -> _144138))). Qed.
Lemma lem8136452 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term77 _144105 _144106 _144138 _144141 P e f x) = (term78 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (MK_COMB (@lem8136451 _144138 _144141) (@lem8136450 _144105 _144106 _144138 _144141 P e f x)). Qed.
Lemma lem8136453 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term71 _144105 _144106 _144138 _144141 P e f x) = (term79 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (eq_refl (term71 _144105 _144106 _144138 _144141 P e f x)). Qed.
Lemma lem8136454 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : ((term73 _144105 _144106 _144138 _144141 P e f x) = (term71 _144105 _144106 _144138 _144141 P e f x)) = ((term71 _144105 _144106 _144138 _144141 P e f x) = (term79 _144105 _144106 _144138 _144141 P e f x)).
Proof. exact (MK_COMB (@lem8136452 _144105 _144106 _144138 _144141 P e f x) (@lem8136453 _144105 _144106 _144138 _144141 P e f x)). Qed.
Lemma lem8136455 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term71 _144105 _144106 _144138 _144141 P e f x) = (term79 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (EQ_MP (@lem8136454 _144105 _144106 _144138 _144141 P e f x) (@lem8136446 _144105 _144106 _144138 _144141 P e f x)). Qed.
Lemma lem8136456 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term70 _144105 _144106 _144138 _144141 P e f x) = (term79 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (TRANS (@lem8136442 _144105 _144106 _144138 _144141 P e f x) (@lem8136455 _144105 _144106 _144138 _144141 P e f x)). Qed.
Lemma lem8136457 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (c f x) = (c f x).
Proof. exact (eq_refl (c f x)). Qed.
Lemma lem8136458 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (term80 _144105 _144106 _144138 _144141 P e c f x) = (term81 _144105 _144106 _144138 _144141 P e c f x).
Proof. exact (MK_COMB (@lem8136456 _144105 _144106 _144138 _144141 P e f x) (@lem8136457 _144105 _144106 _144138 _144141 P c f x)). Qed.
Lemma lem8136460 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136461 {_144138 _144141 : Type'} (f : type743 _144138 _144141) (y : type1470 _144138 _144141) : (term82 _144138 _144141 f y) = (f y).
Proof. exact (@lem8136460 (type1470 _144138 _144141) _144138 f y). Qed.
Lemma lem8136462 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (term83 _144105 _144106 _144138 _144141 P e c f x) = (term81 _144105 _144106 _144138 _144141 P e c f x).
Proof. exact (@lem8136461 _144138 _144141 (term79 _144105 _144106 _144138 _144141 P e f x) (c f x)). Qed.
Lemma lem8136463 {_144105 _144106 _144138 _144141 P : Type'} (r : type1470 _144138 _144141) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term84 _144105 _144106 _144138 _144141 P e f x r) = (term85 _144105 _144106 _144138 _144141 P r e f x).
Proof. exact (eq_refl (term84 _144105 _144106 _144138 _144141 P e f x r)). Qed.
Lemma lem8136464 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term86 _144105 _144106 _144138 _144141 P e f x) = (term79 _144105 _144106 _144138 _144141 P e f x).
Proof. exact (fun_ext (fun r : type1470 _144138 _144141 => @lem8136463 _144105 _144106 _144138 _144141 P r e f x)). Qed.
Lemma lem8136465 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (c f x) = (c f x).
Proof. exact (eq_refl (c f x)). Qed.
Lemma lem8136466 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (term83 _144105 _144106 _144138 _144141 P e c f x) = (term81 _144105 _144106 _144138 _144141 P e c f x).
Proof. exact (MK_COMB (@lem8136464 _144105 _144106 _144138 _144141 P e f x) (@lem8136465 _144105 _144106 _144138 _144141 P c f x)). Qed.
Lemma lem8136467 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8136468 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (x : P) : (term87 _144105 _144106 _144138 _144141 P e c f x) = (term88 _144105 _144106 _144138 _144141 P e c f x).
Proof. exact (MK_COMB (@lem8136467 _144138) (@lem8136466 _144105 _144106 _144138 _144141 P e c f x)). Qed.
Lemma lem8136469 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term81 _144105 _144106 _144138 _144141 P e c f x) = (term89 _144105 _144106 _144138 _144141 P c e f x).
Proof. exact (eq_refl (term81 _144105 _144106 _144138 _144141 P e c f x)). Qed.
Lemma lem8136470 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : ((term83 _144105 _144106 _144138 _144141 P e c f x) = (term81 _144105 _144106 _144138 _144141 P e c f x)) = ((term81 _144105 _144106 _144138 _144141 P e c f x) = (term89 _144105 _144106 _144138 _144141 P c e f x)).
Proof. exact (MK_COMB (@lem8136468 _144105 _144106 _144138 _144141 P e c f x) (@lem8136469 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136471 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term81 _144105 _144106 _144138 _144141 P e c f x) = (term89 _144105 _144106 _144138 _144141 P c e f x).
Proof. exact (EQ_MP (@lem8136470 _144105 _144106 _144138 _144141 P c e f x) (@lem8136462 _144105 _144106 _144138 _144141 P e c f x)). Qed.
Lemma lem8136472 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term80 _144105 _144106 _144138 _144141 P e c f x) = (term89 _144105 _144106 _144138 _144141 P c e f x).
Proof. exact (TRANS (@lem8136458 _144105 _144106 _144138 _144141 P e c f x) (@lem8136471 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136473 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term64 _144105 _144106 _144138 _144141 P e c f) = (term90 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (fun_ext (fun x : P => @lem8136472 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136474 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c f) = (term90 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (TRANS (@lem8136437 _144105 _144106 _144138 _144141 P e c f) (@lem8136473 _144105 _144106 _144138 _144141 P c e f)). Qed.
Lemma lem8136475 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136476 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term91 _144105 _144106 _144138 _144141 P e c f a) = (term92 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136474 _144105 _144106 _144138 _144141 P c e f) (@lem8136475 P a)). Qed.
Lemma lem8136478 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136479 {_144138 P : Type'} (f : P -> _144138) (y : P) : (term93 _144138 P f y) = (f y).
Proof. exact (@lem8136478 P _144138 f y). Qed.
Lemma lem8136480 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term94 _144105 _144106 _144138 _144141 P c e f a) = (term92 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8136479 _144138 P (term90 _144105 _144106 _144138 _144141 P c e f) a). Qed.
Lemma lem8136481 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (x : P) : (term92 _144105 _144106 _144138 _144141 P c e f x) = (term89 _144105 _144106 _144138 _144141 P c e f x).
Proof. exact (eq_refl (term92 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136482 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (term95 _144105 _144106 _144138 _144141 P c e f) = (term90 _144105 _144106 _144138 _144141 P c e f).
Proof. exact (fun_ext (fun x : P => @lem8136481 _144105 _144106 _144138 _144141 P c e f x)). Qed.
Lemma lem8136483 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136484 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term94 _144105 _144106 _144138 _144141 P c e f a) = (term92 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136482 _144105 _144106 _144138 _144141 P c e f) (@lem8136483 P a)). Qed.
Lemma lem8136485 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8136486 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term96 _144105 _144106 _144138 _144141 P c e f a) = (term97 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136485 _144138) (@lem8136484 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136487 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term92 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term92 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136488 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : ((term94 _144105 _144106 _144138 _144141 P c e f a) = (term92 _144105 _144106 _144138 _144141 P c e f a)) = ((term92 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e f a)).
Proof. exact (MK_COMB (@lem8136486 _144105 _144106 _144138 _144141 P c e f a) (@lem8136487 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136489 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term92 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (EQ_MP (@lem8136488 _144105 _144106 _144138 _144141 P c e f a) (@lem8136480 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136490 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term91 _144105 _144106 _144138 _144141 P e c f a) = (term89 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8136476 _144105 _144106 _144138 _144141 P c e f a) (@lem8136489 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136491 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8136492 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term98 _144105 _144106 _144138 _144141 P e c f a) = (term99 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8136491 _144138) (@lem8136490 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136494 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136495 {_144105 _144106 _144138 P : Type'} (f : type564 _144105 _144106 _144138 P) (y : _144105 -> _144106) : (term61 _144105 _144106 _144138 P f y) = (f y).
Proof. exact (@lem8136494 (_144105 -> _144106) (P -> _144138) f y). Qed.
Lemma lem8136496 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (term62 _144105 _144106 _144138 _144141 P e c g) = (term63 _144105 _144106 _144138 _144141 P e c g).
Proof. exact (@lem8136495 _144105 _144106 _144138 P (term60 _144105 _144106 _144138 _144141 P e c) g). Qed.
Lemma lem8136497 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c f) = (term64 _144105 _144106 _144138 _144141 P e c f).
Proof. exact (eq_refl (term63 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136498 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) : (term65 _144105 _144106 _144138 _144141 P e c) = (term60 _144105 _144106 _144138 _144141 P e c).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136497 _144105 _144106 _144138 _144141 P e c f)). Qed.
Lemma lem8136499 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8136500 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (term62 _144105 _144106 _144138 _144141 P e c g) = (term63 _144105 _144106 _144138 _144141 P e c g).
Proof. exact (MK_COMB (@lem8136498 _144105 _144106 _144138 _144141 P e c) (@lem8136499 _144105 _144106 g)). Qed.
Lemma lem8136501 {_144138 P : Type'} : (@eq (P -> _144138)) = (@eq (P -> _144138)).
Proof. exact (eq_refl (@eq (P -> _144138))). Qed.
Lemma lem8136502 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (term66 _144105 _144106 _144138 _144141 P e c g) = (term67 _144105 _144106 _144138 _144141 P e c g).
Proof. exact (MK_COMB (@lem8136501 _144138 P) (@lem8136500 _144105 _144106 _144138 _144141 P e c g)). Qed.
Lemma lem8136503 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c g) = (term64 _144105 _144106 _144138 _144141 P e c g).
Proof. exact (eq_refl (term63 _144105 _144106 _144138 _144141 P e c g)). Qed.
Lemma lem8136504 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : ((term62 _144105 _144106 _144138 _144141 P e c g) = (term63 _144105 _144106 _144138 _144141 P e c g)) = ((term63 _144105 _144106 _144138 _144141 P e c g) = (term64 _144105 _144106 _144138 _144141 P e c g)).
Proof. exact (MK_COMB (@lem8136502 _144105 _144106 _144138 _144141 P e c g) (@lem8136503 _144105 _144106 _144138 _144141 P e c g)). Qed.
Lemma lem8136505 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c g) = (term64 _144105 _144106 _144138 _144141 P e c g).
Proof. exact (EQ_MP (@lem8136504 _144105 _144106 _144138 _144141 P e c g) (@lem8136496 _144105 _144106 _144138 _144141 P e c g)). Qed.
Lemma lem8136507 {_4656 _4660 : Type'} : (@_MATCH _4656 _4660) = (term68 _4656 _4660).
Proof. exact (@_MATCH_def _4656 _4660). Qed.
Lemma lem8136508 {_144138 _144141 : Type'} : (@_MATCH _144141 _144138) = (term69 _144138 _144141).
Proof. exact (@lem8136507 _144141 _144138). Qed.
Lemma lem8136509 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (e g x) = (e g x).
Proof. exact (eq_refl (e g x)). Qed.
Lemma lem8136510 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term70 _144105 _144106 _144138 _144141 P e g x) = (term71 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (MK_COMB (@lem8136508 _144138 _144141) (@lem8136509 _144105 _144106 _144141 P e g x)). Qed.
Lemma lem8136512 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136513 {_144138 _144141 : Type'} (f : type1450 _144138 _144141) (y : _144141) : (term72 _144138 _144141 f y) = (f y).
Proof. exact (@lem8136512 _144141 (type743 _144138 _144141) f y). Qed.
Lemma lem8136514 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term73 _144105 _144106 _144138 _144141 P e g x) = (term71 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (@lem8136513 _144138 _144141 (term69 _144138 _144141) (e g x)). Qed.
Lemma lem8136515 {_144138 _144141 : Type'} (e : _144141) : (term74 _144138 _144141 e) = (term75 _144138 _144141 e).
Proof. exact (eq_refl (term74 _144138 _144141 e)). Qed.
Lemma lem8136516 {_144138 _144141 : Type'} : (term76 _144138 _144141) = (term69 _144138 _144141).
Proof. exact (fun_ext (fun e : _144141 => @lem8136515 _144138 _144141 e)). Qed.
Lemma lem8136517 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (e g x) = (e g x).
Proof. exact (eq_refl (e g x)). Qed.
Lemma lem8136518 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term73 _144105 _144106 _144138 _144141 P e g x) = (term71 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (MK_COMB (@lem8136516 _144138 _144141) (@lem8136517 _144105 _144106 _144141 P e g x)). Qed.
Lemma lem8136519 {_144138 _144141 : Type'} : (@eq ((_144141 -> _144138 -> Prop) -> _144138)) = (@eq ((_144141 -> _144138 -> Prop) -> _144138)).
Proof. exact (eq_refl (@eq ((_144141 -> _144138 -> Prop) -> _144138))). Qed.
Lemma lem8136520 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term77 _144105 _144106 _144138 _144141 P e g x) = (term78 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (MK_COMB (@lem8136519 _144138 _144141) (@lem8136518 _144105 _144106 _144138 _144141 P e g x)). Qed.
Lemma lem8136521 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term71 _144105 _144106 _144138 _144141 P e g x) = (term79 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (eq_refl (term71 _144105 _144106 _144138 _144141 P e g x)). Qed.
Lemma lem8136522 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : ((term73 _144105 _144106 _144138 _144141 P e g x) = (term71 _144105 _144106 _144138 _144141 P e g x)) = ((term71 _144105 _144106 _144138 _144141 P e g x) = (term79 _144105 _144106 _144138 _144141 P e g x)).
Proof. exact (MK_COMB (@lem8136520 _144105 _144106 _144138 _144141 P e g x) (@lem8136521 _144105 _144106 _144138 _144141 P e g x)). Qed.
Lemma lem8136523 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term71 _144105 _144106 _144138 _144141 P e g x) = (term79 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (EQ_MP (@lem8136522 _144105 _144106 _144138 _144141 P e g x) (@lem8136514 _144105 _144106 _144138 _144141 P e g x)). Qed.
Lemma lem8136524 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term70 _144105 _144106 _144138 _144141 P e g x) = (term79 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (TRANS (@lem8136510 _144105 _144106 _144138 _144141 P e g x) (@lem8136523 _144105 _144106 _144138 _144141 P e g x)). Qed.
Lemma lem8136525 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (c g x) = (c g x).
Proof. exact (eq_refl (c g x)). Qed.
Lemma lem8136526 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (term80 _144105 _144106 _144138 _144141 P e c g x) = (term81 _144105 _144106 _144138 _144141 P e c g x).
Proof. exact (MK_COMB (@lem8136524 _144105 _144106 _144138 _144141 P e g x) (@lem8136525 _144105 _144106 _144138 _144141 P c g x)). Qed.
Lemma lem8136528 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136529 {_144138 _144141 : Type'} (f : type743 _144138 _144141) (y : type1470 _144138 _144141) : (term82 _144138 _144141 f y) = (f y).
Proof. exact (@lem8136528 (type1470 _144138 _144141) _144138 f y). Qed.
Lemma lem8136530 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (term83 _144105 _144106 _144138 _144141 P e c g x) = (term81 _144105 _144106 _144138 _144141 P e c g x).
Proof. exact (@lem8136529 _144138 _144141 (term79 _144105 _144106 _144138 _144141 P e g x) (c g x)). Qed.
Lemma lem8136531 {_144105 _144106 _144138 _144141 P : Type'} (r : type1470 _144138 _144141) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term84 _144105 _144106 _144138 _144141 P e g x r) = (term85 _144105 _144106 _144138 _144141 P r e g x).
Proof. exact (eq_refl (term84 _144105 _144106 _144138 _144141 P e g x r)). Qed.
Lemma lem8136532 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term86 _144105 _144106 _144138 _144141 P e g x) = (term79 _144105 _144106 _144138 _144141 P e g x).
Proof. exact (fun_ext (fun r : type1470 _144138 _144141 => @lem8136531 _144105 _144106 _144138 _144141 P r e g x)). Qed.
Lemma lem8136533 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (c g x) = (c g x).
Proof. exact (eq_refl (c g x)). Qed.
Lemma lem8136534 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (term83 _144105 _144106 _144138 _144141 P e c g x) = (term81 _144105 _144106 _144138 _144141 P e c g x).
Proof. exact (MK_COMB (@lem8136532 _144105 _144106 _144138 _144141 P e g x) (@lem8136533 _144105 _144106 _144138 _144141 P c g x)). Qed.
Lemma lem8136535 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8136536 {_144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (x : P) : (term87 _144105 _144106 _144138 _144141 P e c g x) = (term88 _144105 _144106 _144138 _144141 P e c g x).
Proof. exact (MK_COMB (@lem8136535 _144138) (@lem8136534 _144105 _144106 _144138 _144141 P e c g x)). Qed.
Lemma lem8136537 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term81 _144105 _144106 _144138 _144141 P e c g x) = (term89 _144105 _144106 _144138 _144141 P c e g x).
Proof. exact (eq_refl (term81 _144105 _144106 _144138 _144141 P e c g x)). Qed.
Lemma lem8136538 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : ((term83 _144105 _144106 _144138 _144141 P e c g x) = (term81 _144105 _144106 _144138 _144141 P e c g x)) = ((term81 _144105 _144106 _144138 _144141 P e c g x) = (term89 _144105 _144106 _144138 _144141 P c e g x)).
Proof. exact (MK_COMB (@lem8136536 _144105 _144106 _144138 _144141 P e c g x) (@lem8136537 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136539 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term81 _144105 _144106 _144138 _144141 P e c g x) = (term89 _144105 _144106 _144138 _144141 P c e g x).
Proof. exact (EQ_MP (@lem8136538 _144105 _144106 _144138 _144141 P c e g x) (@lem8136530 _144105 _144106 _144138 _144141 P e c g x)). Qed.
Lemma lem8136540 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term80 _144105 _144106 _144138 _144141 P e c g x) = (term89 _144105 _144106 _144138 _144141 P c e g x).
Proof. exact (TRANS (@lem8136526 _144105 _144106 _144138 _144141 P e c g x) (@lem8136539 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136541 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term64 _144105 _144106 _144138 _144141 P e c g) = (term90 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (fun_ext (fun x : P => @lem8136540 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136542 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term63 _144105 _144106 _144138 _144141 P e c g) = (term90 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (TRANS (@lem8136505 _144105 _144106 _144138 _144141 P e c g) (@lem8136541 _144105 _144106 _144138 _144141 P c e g)). Qed.
Lemma lem8136543 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136544 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term91 _144105 _144106 _144138 _144141 P e c g a) = (term92 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136542 _144105 _144106 _144138 _144141 P c e g) (@lem8136543 P a)). Qed.
Lemma lem8136546 {A B : Type'} (f : A -> B) (y : A) : (term22 A B f y) = (f y).
Proof. exact (EQ_MP (@lem1810 A B f y) (@lem1809 A B f y)). Qed.
Lemma lem8136547 {_144138 P : Type'} (f : P -> _144138) (y : P) : (term93 _144138 P f y) = (f y).
Proof. exact (@lem8136546 P _144138 f y). Qed.
Lemma lem8136548 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term94 _144105 _144106 _144138 _144141 P c e g a) = (term92 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8136547 _144138 P (term90 _144105 _144106 _144138 _144141 P c e g) a). Qed.
Lemma lem8136549 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (x : P) : (term92 _144105 _144106 _144138 _144141 P c e g x) = (term89 _144105 _144106 _144138 _144141 P c e g x).
Proof. exact (eq_refl (term92 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136550 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term95 _144105 _144106 _144138 _144141 P c e g) = (term90 _144105 _144106 _144138 _144141 P c e g).
Proof. exact (fun_ext (fun x : P => @lem8136549 _144105 _144106 _144138 _144141 P c e g x)). Qed.
Lemma lem8136551 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8136552 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term94 _144105 _144106 _144138 _144141 P c e g a) = (term92 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136550 _144105 _144106 _144138 _144141 P c e g) (@lem8136551 P a)). Qed.
Lemma lem8136553 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8136554 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term96 _144105 _144106 _144138 _144141 P c e g a) = (term97 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136553 _144138) (@lem8136552 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136555 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term92 _144105 _144106 _144138 _144141 P c e g a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term92 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136556 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term94 _144105 _144106 _144138 _144141 P c e g a) = (term92 _144105 _144106 _144138 _144141 P c e g a)) = ((term92 _144105 _144106 _144138 _144141 P c e g a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8136554 _144105 _144106 _144138 _144141 P c e g a) (@lem8136555 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136557 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term92 _144105 _144106 _144138 _144141 P c e g a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136556 _144105 _144106 _144138 _144141 P c e g a) (@lem8136548 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136558 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term91 _144105 _144106 _144138 _144141 P e c g a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8136544 _144105 _144106 _144138 _144141 P c e g a) (@lem8136557 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136559 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term91 _144105 _144106 _144138 _144141 P e c f a) = (term91 _144105 _144106 _144138 _144141 P e c g a)) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8136492 _144105 _144106 _144138 _144141 P c e f a) (@lem8136558 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136562 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (eq_refl (term40 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8136563 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term100 _144104 _144105 _144106 _144138 _144141 P p lt2 s f e c g a) = (term101 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136562 _144104 _144105 _144106 P p lt2 s a f g) (@lem8136559 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136566 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term102 _144104 _144105 _144106 _144138 _144141 P p lt2 s f e c g) = (term103 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8136563 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136567 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8136568 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term104 _144104 _144105 _144106 _144138 _144141 P p lt2 s f e c g) = (term105 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8136567 P) (@lem8136566 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8136573 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term106 _144104 _144105 _144106 _144138 _144141 P p lt2 s f e c) = (term107 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8136568 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8136574 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136575 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term108 _144104 _144105 _144106 _144138 _144141 P p lt2 s f e c) = (term109 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8136574 _144105 _144106) (@lem8136573 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8136580 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term110 _144104 _144105 _144106 _144138 _144141 P p lt2 s e c) = (term111 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136575 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8136581 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136582 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term59 _144104 _144105 _144106 _144138 _144141 P p lt2 s e c) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8136581 _144105 _144106) (@lem8136580 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136587 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term58 _144104 _144105 _144106 _144138 _144141 P lt2 p s e c) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8136396 _144104 _144105 _144106 _144138 _144141 P p lt2 s e c) (@lem8136582 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136588 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term113 _144104 _144105 _144106 _144138 _144141 P lt2 p s e c) = (term114 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8136392 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8136587 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136591 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term115 _144104 _144105 _144106 _144138 _144141 P lt2 p s e) = (term116 _144104 _144105 _144106 _144138 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8136588 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136592 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8136593 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term117 _144104 _144105 _144106 _144138 _144141 P lt2 p s e) = (term118 _144104 _144105 _144106 _144138 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8136592 _144105 _144106 _144138 _144141 P) (@lem8136591 _144104 _144105 _144106 _144138 _144141 P p lt2 s e)). Qed.
Lemma lem8136598 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) : (term119 _144104 _144105 _144106 _144138 _144141 P lt2 p s) = (term120 _144104 _144105 _144106 _144138 _144141 P p lt2 s).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8136593 _144104 _144105 _144106 _144138 _144141 P p lt2 s e)). Qed.
Lemma lem8136599 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8136600 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) : (term121 _144104 _144105 _144106 _144138 _144141 P lt2 p s) = (term122 _144104 _144105 _144106 _144138 _144141 P p lt2 s).
Proof. exact (MK_COMB (@lem8136599 _144105 _144106 _144141 P) (@lem8136598 _144104 _144105 _144106 _144138 _144141 P p lt2 s)). Qed.
Lemma lem8136605 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) : (term123 _144104 _144105 _144106 _144138 _144141 P lt2 p) = (term124 _144104 _144105 _144106 _144138 _144141 P p lt2).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8136600 _144104 _144105 _144106 _144138 _144141 P p lt2 s)). Qed.
Lemma lem8136606 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8136607 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) : (term125 _144104 _144105 _144106 _144138 _144141 P lt2 p) = (term126 _144104 _144105 _144106 _144138 _144141 P p lt2).
Proof. exact (MK_COMB (@lem8136606 _144104 P) (@lem8136605 _144104 _144105 _144106 _144138 _144141 P p lt2)). Qed.
Lemma lem8136612 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) : (term127 _144104 _144105 _144106 _144138 _144141 P lt2) = (term128 _144104 _144105 _144106 _144138 _144141 P lt2).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8136607 _144104 _144105 _144106 _144138 _144141 P p lt2)). Qed.
Lemma lem8136613 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8136614 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) : (term129 _144104 _144105 _144106 _144138 _144141 P lt2) = (term130 _144104 _144105 _144106 _144138 _144141 P lt2).
Proof. exact (MK_COMB (@lem8136613 _144105 _144106 P) (@lem8136612 _144104 _144105 _144106 _144138 _144141 P lt2)). Qed.
Lemma lem8136619 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term131 _144104 _144105 _144106 _144138 _144141 P) = (term132 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8136614 _144104 _144105 _144106 _144138 _144141 P lt2)). Qed.
Lemma lem8136620 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8136621 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term133 _144104 _144105 _144106 _144138 _144141 P) = (term134 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8136620 _144104 _144105) (@lem8136619 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8136626 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term134 _144104 _144105 _144106 _144138 _144141 P) = (term133 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (SYM (@lem8136621 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8136627 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8136628 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8136629 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (h1). Qed.
Lemma lem8136630 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term135 _144104 _144105 _144106 P p lt2 s a f g) : term135 _144104 _144105 _144106 P p lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8136631 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term136 _144104 _144105 _144106 P p lt2 s a f g) : term136 _144104 _144105 _144106 P p lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8136632 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8136633 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term137 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8136634 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : p g a.
Proof. exact (h1). Qed.
Lemma lem8136635 {_144138 : Type'} (_474 : _144138) (_475 : Prop) (_476 : _144138 -> Prop) (_477 : _144138) : (term138 _144138 _476 _475 _474 _477) = (term139 _144138 _474 _475 _476 _477).
Proof. exact (@lem13473 _144138 _474 _475 _476 _477). Qed.
Lemma lem8136636 {_144105 _144106 _144138 _144141 P : Type'} (_474 : _144138) (_475 : Prop) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_477 : _144138) : (term140 _144105 _144106 _144138 _144141 P c e g a _475 _474 _477) = (term141 _144105 _144106 _144138 _144141 P _474 _475 c e g a _477).
Proof. exact (@lem8136635 _144138 _474 _475 (term142 _144105 _144106 _144138 _144141 P c e g a) _477). Qed.
Lemma lem8136637 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term143 _144105 _144106 _144138 _144141 P g c e f a) = (term144 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8136636 _144105 _144106 _144138 _144141 P (term145 _144105 _144106 _144138 _144141 P c e f a) (term146 _144105 _144106 _144138 _144141 P c e f a) c e g a (term147 _144138)). Qed.
Lemma lem8136638 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term148 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term148 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136639 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e f a) = (term149 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136640 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term150 _144105 _144106 _144138 _144141 P f c e g a) = (term151 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136639 _144105 _144106 _144138 _144141 P c e f a) (@lem8136638 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136641 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term152 _144105 _144106 _144138 _144141 P g c e f a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term152 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136642 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e f a) = (term153 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136643 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term154 _144105 _144106 _144138 _144141 P g c e f a) = (term155 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136642 _144105 _144106 _144138 _144141 P c e f a) (@lem8136641 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136644 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8136645 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term156 _144105 _144106 _144138 _144141 P g c e f a) = (term157 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136644) (@lem8136643 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136646 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term144 _144105 _144106 _144138 _144141 P f c e g a) = (term158 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136645 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136640 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136647 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term143 _144105 _144106 _144138 _144141 P g c e f a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term143 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136648 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8136649 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term159 _144105 _144106 _144138 _144141 P g c e f a) = (term160 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136648) (@lem8136647 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136650 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term143 _144105 _144106 _144138 _144141 P g c e f a) = (term144 _144105 _144106 _144138 _144141 P f c e g a)) = (((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term158 _144105 _144106 _144138 _144141 P f c e g a)).
Proof. exact (MK_COMB (@lem8136649 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136646 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136651 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term158 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (EQ_MP (@lem8136650 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136637 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136652 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term158 _144105 _144106 _144138 _144141 P f c e g a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8136651 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136653 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term146 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (h1). Qed.
Lemma lem8136670 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e f a) : term161 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (h1). Qed.
Lemma lem8136687 {_144138 : Type'} (_474 : _144138) (_475 : Prop) (_476 : _144138 -> Prop) (_477 : _144138) : (term138 _144138 _476 _475 _474 _477) = (term139 _144138 _474 _475 _476 _477).
Proof. exact (@lem13473 _144138 _474 _475 _476 _477). Qed.
Lemma lem8136688 {_144105 _144106 _144138 _144141 P : Type'} (_474 : _144138) (_475 : Prop) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_477 : _144138) : (term162 _144105 _144106 _144138 _144141 P c e f a _475 _474 _477) = (term163 _144105 _144106 _144138 _144141 P _474 _475 c e f a _477).
Proof. exact (@lem8136687 _144138 _474 _475 (term164 _144105 _144106 _144138 _144141 P c e f a) _477). Qed.
Lemma lem8136689 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term165 _144105 _144106 _144138 _144141 P f c e g a) = (term166 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (@lem8136688 _144105 _144106 _144138 _144141 P (term145 _144105 _144106 _144138 _144141 P c e g a) (term146 _144105 _144106 _144138 _144141 P c e g a) c e f a (term147 _144138)). Qed.
Lemma lem8136690 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term167 _144105 _144106 _144138 _144141 P c e f a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138)).
Proof. exact (eq_refl (term167 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136691 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136692 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term168 _144105 _144106 _144138 _144141 P g c e f a) = (term169 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (MK_COMB (@lem8136691 _144105 _144106 _144138 _144141 P c e g a) (@lem8136690 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136693 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term170 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term170 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136694 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e g a) = (term153 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136695 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term171 _144105 _144106 _144138 _144141 P f c e g a) = (term172 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136694 _144105 _144106 _144138 _144141 P c e g a) (@lem8136693 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136696 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8136697 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term173 _144105 _144106 _144138 _144141 P f c e g a) = (term174 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136696) (@lem8136695 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136698 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term166 _144105 _144106 _144138 _144141 P g c e f a) = (term175 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (MK_COMB (@lem8136697 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136692 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136699 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term165 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term165 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136700 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8136701 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term176 _144105 _144106 _144138 _144141 P f c e g a) = (term177 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136700) (@lem8136699 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136702 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : ((term165 _144105 _144106 _144138 _144141 P f c e g a) = (term166 _144105 _144106 _144138 _144141 P g c e f a)) = (((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term175 _144105 _144106 _144138 _144141 P g c e f a)).
Proof. exact (MK_COMB (@lem8136701 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136698 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136703 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term175 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (EQ_MP (@lem8136702 _144105 _144106 _144138 _144141 P g c e f a) (@lem8136689 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136704 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term175 _144105 _144106 _144138 _144141 P g c e f a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8136703 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8136705 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term146 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8136722 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e g a) : term161 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8136739 {_144138 : Type'} (_474 : _144138) (_475 : Prop) (_476 : _144138 -> Prop) (_477 : _144138) : (term138 _144138 _476 _475 _474 _477) = (term139 _144138 _474 _475 _476 _477).
Proof. exact (@lem13473 _144138 _474 _475 _476 _477). Qed.
Lemma lem8136740 {_144138 : Type'} (_474 : _144138) (_475 : Prop) (_477 : _144138) : (term178 _144138 _475 _474 _477) = (term179 _144138 _474 _475 _477).
Proof. exact (@lem8136739 _144138 _474 _475 (term180 _144138) _477). Qed.
Lemma lem8136741 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term181 _144105 _144106 _144138 _144141 P c e g a) = (term182 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8136740 _144138 (term145 _144105 _144106 _144138 _144141 P c e g a) (term146 _144105 _144106 _144138 _144141 P c e g a) (term147 _144138)). Qed.
Lemma lem8136742 {_144138 : Type'} : (term183 _144138) = ((term147 _144138) = (term147 _144138)).
Proof. exact (eq_refl (term183 _144138)). Qed.
Lemma lem8136743 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136744 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term184 _144105 _144106 _144138 _144141 P c e g a) = (term185 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136743 _144105 _144106 _144138 _144141 P c e g a) (@lem8136742 _144138)). Qed.
Lemma lem8136745 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term186 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term186 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136746 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e g a) = (term153 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136747 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term187 _144105 _144106 _144138 _144141 P c e g a) = (term188 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136746 _144105 _144106 _144138 _144141 P c e g a) (@lem8136745 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136748 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8136749 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term189 _144105 _144106 _144138 _144141 P c e g a) = (term190 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136748) (@lem8136747 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136750 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term182 _144105 _144106 _144138 _144141 P c e g a) = (term191 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136749 _144105 _144106 _144138 _144141 P c e g a) (@lem8136744 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136751 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term181 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl (term181 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136752 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8136753 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term192 _144105 _144106 _144138 _144141 P c e g a) = (term193 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136752) (@lem8136751 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136754 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term181 _144105 _144106 _144138 _144141 P c e g a) = (term182 _144105 _144106 _144138 _144141 P c e g a)) = (((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term191 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8136753 _144105 _144106 _144138 _144141 P c e g a) (@lem8136750 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136755 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)) = (term191 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136754 _144105 _144106 _144138 _144141 P c e g a) (@lem8136741 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136756 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term191 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8136755 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136757 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term146 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8136774 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e g a) : term161 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8136792 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8136793 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)) = (term195 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8136792 ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8136794 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term195 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8136793 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136795 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term196 _144105 _144106 _144138 _144141 P f c e g a) : term196 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8136798 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8136799 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8136798 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8136800 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8136801 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8136802 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8136800 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2 (@lem8136801 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1)). Qed.
Lemma lem8136803 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term199 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8136802 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 h0). Qed.
Lemma lem8136804 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8136805 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8136803 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 (@lem8136804 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2)). Qed.
Lemma lem8136806 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8136805 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0 h1). Qed.
Lemma lem8136807 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term200 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8136806 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8136810 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8136807 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8136799 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136811 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term198 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8136810 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8136913 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8136914 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term195 _144105 _144106 _144138 _144141 P f c e g a) = (term201 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8136913 (term196 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136916 (t : Prop) : (term202 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8136917 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term201 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8136916 ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8136918 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term195 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (TRANS (@lem8136914 _144105 _144106 _144138 _144141 P f c e g a) (@lem8136917 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136919 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e g a) = (term153 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136920 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term203 _144105 _144106 _144138 _144141 P f c e g a) = (term172 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136919 _144105 _144106 _144138 _144141 P c e g a) (@lem8136918 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136923 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e f a) = (term153 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8136924 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term204 _144105 _144106 _144138 _144141 P f c e g a) = (term205 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136923 _144105 _144106 _144138 _144141 P c e f a) (@lem8136920 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136927 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8136928 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term207 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term208 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136927 _144104 _144105 _144106 P lt2 s a f g) (@lem8136924 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136931 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8136932 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term210 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term211 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136931 _144105 _144106 P p g a) (@lem8136928 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8136935 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8136936 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term212 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term213 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136935 _144105 _144106 P p f a) (@lem8136932 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136939 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8136940 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term215 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term216 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136939 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8136936 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136943 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8136944 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term218 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136943 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8136940 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136947 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term219 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term220 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8136944 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8136948 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8136949 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term221 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term222 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8136948 _144105 _144106 P) (@lem8136947 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8136954 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term223 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term224 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8136949 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8136955 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8136956 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term225 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term226 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8136955 _144104 _144105) (@lem8136954 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8136961 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term227 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term228 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8136956 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8136962 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8136963 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term229 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term230 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8136962 _144104 P) (@lem8136961 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136968 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term231 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term232 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8136963 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8136969 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136970 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term233 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term234 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8136969 _144105 _144106) (@lem8136968 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136975 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term235 _144104 _144105 _144106 _144138 _144141 P e g a) = (term236 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8136970 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8136976 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8136977 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term237 _144104 _144105 _144106 _144138 _144141 P e g a) = (term238 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8136976 _144105 _144106 _144138 _144141 P) (@lem8136975 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8136982 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term239 _144104 _144105 _144106 _144138 _144141 P g a) = (term240 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8136977 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8136983 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8136984 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term241 _144104 _144105 _144106 _144138 _144141 P g a) = (term242 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8136983 _144105 _144106 _144141 P) (@lem8136982 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8136989 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term243 _144104 _144105 _144106 _144138 _144141 P a) = (term244 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8136984 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8136990 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8136991 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term245 _144104 _144105 _144106 _144138 _144141 P a) = (term246 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8136990 _144105 _144106) (@lem8136989 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8136996 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term247 _144104 _144105 _144106 _144138 _144141 P) = (term248 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8136991 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8136997 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137006 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term249 _144104 _144105 _144106 _144138 _144141 P) = (term250 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8136997 P) (@lem8136996 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8137015 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term205 _144105 _144106 _144138 _144141 P f c e g a) = (term205 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (eq_refl (term205 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137020 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137021 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137020 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137022 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8137023 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137022 _144105) (@lem8137021 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137024 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8137025 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137024) (@lem8137023 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137026 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term208 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term208 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137025 _144104 _144105 _144106 P lt2 s a f g) (@lem8137015 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137029 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8137030 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term211 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term211 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137029 _144105 _144106 P p g a) (@lem8137026 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8137033 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8137034 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term213 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term213 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137033 _144105 _144106 P p f a) (@lem8137030 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137035 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137040 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137041 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137040 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137042 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8137043 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137042 _144105) (@lem8137041 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137046 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8137047 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137046 _144105 _144106 P p g a) (@lem8137043 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137050 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8137051 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137050 _144105 _144106 P p f a) (@lem8137047 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137052 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8137053 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137052) (@lem8137051 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137054 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137053 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137035 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137055 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8137054 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137056 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137057 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137056 P) (@lem8137055 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137058 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137057 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137059 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137060 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137059 _144105 _144106) (@lem8137058 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137061 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137060 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137062 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137063 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137062 _144105 _144106) (@lem8137061 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137064 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8137065 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137064) (@lem8137063 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137066 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term216 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term216 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137065 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137034 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137067 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8137072 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137073 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137072 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137074 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8137075 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137074 _144105) (@lem8137073 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137078 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8137079 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137078 _144105 _144106 P p g a) (@lem8137075 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137082 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8137083 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137082 _144105 _144106 P p f a) (@lem8137079 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137084 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8137085 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137084) (@lem8137083 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137086 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137085 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137067 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8137087 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8137086 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137088 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137089 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137088 P) (@lem8137087 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137090 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term257 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137089 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137091 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137092 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term258 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137091 _144105 _144106) (@lem8137090 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137093 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term259 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137092 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137094 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137095 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term15 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137094 _144105 _144106) (@lem8137093 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137096 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8137097 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137096) (@lem8137095 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137098 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term218 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term218 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137097 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137066 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137099 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term220 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term220 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8137098 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137100 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8137101 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term222 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term222 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137100 _144105 _144106 P) (@lem8137099 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8137102 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term224 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term224 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8137101 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8137103 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8137104 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term226 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term226 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8137103 _144104 _144105) (@lem8137102 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8137105 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term228 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term228 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8137104 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8137106 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8137107 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term230 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term230 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8137106 _144104 P) (@lem8137105 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137108 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term232 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term232 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137107 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137109 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137110 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term234 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term234 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8137109 _144105 _144106) (@lem8137108 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8137111 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term236 _144104 _144105 _144106 _144138 _144141 P e g a) = (term236 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8137110 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8137112 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8137113 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term238 _144104 _144105 _144106 _144138 _144141 P e g a) = (term238 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8137112 _144105 _144106 _144138 _144141 P) (@lem8137111 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8137114 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term240 _144104 _144105 _144106 _144138 _144141 P g a) = (term240 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8137113 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8137115 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8137116 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term242 _144104 _144105 _144106 _144138 _144141 P g a) = (term242 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8137115 _144105 _144106 _144141 P) (@lem8137114 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8137117 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term244 _144104 _144105 _144106 _144138 _144141 P a) = (term244 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137116 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8137118 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137119 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term246 _144104 _144105 _144106 _144138 _144141 P a) = (term246 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8137118 _144105 _144106) (@lem8137117 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8137120 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term248 _144104 _144105 _144106 _144138 _144141 P) = (term248 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8137119 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8137121 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137122 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term250 _144104 _144105 _144106 _144138 _144141 P) = (term250 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8137121 P) (@lem8137120 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8137259 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term249 _144104 _144105 _144106 _144138 _144141 P) = (term250 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (TRANS (@lem8137006 _144104 _144105 _144106 _144138 _144141 P) (@lem8137122 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8137260 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term250 _144104 _144105 _144106 _144138 _144141 P) = (term249 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (SYM (@lem8137259 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8137261 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (h1). Qed.
Lemma lem8137262 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8137265 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term137 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8137269 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8137270 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)) = (term195 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8137269 ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137271 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term195 _144105 _144106 _144138 _144141 P f c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8137270 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137272 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term196 _144105 _144106 _144138 _144141 P f c e g a) : term196 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8137281 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8137282 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8137283 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8137282 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137284 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137285 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8137286 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137285) (@lem8137284 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137287 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8137286 _144104 _144105 _144106 P lt2 s a f g z) (@lem8137281 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137288 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137287 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137289 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137290 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137289 _144105) (@lem8137288 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137291 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8137283 _144104 _144105 _144106 P lt2 s a f g) (@lem8137290 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137293 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137294 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137293 _144105 _144106 P p g a) (@lem8137291 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137295 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137296 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137295 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137294 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137298 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137299 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137298 _144105 _144106 P p f a) (@lem8137296 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137300 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137301 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137300 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137299 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137302 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8137303 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137304 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137303) (@lem8137301 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137305 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137304 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137302 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8137306 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8137307 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8137306 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137305 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137308 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8137307 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137309 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137310 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137309 P) (@lem8137308 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137311 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term285 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137310 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137312 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137313 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term286 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137312 _144105 _144106) (@lem8137311 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137314 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term287 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137313 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137315 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137316 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term288 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137315 _144105 _144106) (@lem8137314 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137423 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8137424 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8137423 _144105 P Q). Qed.
Lemma lem8137425 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8137424 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137426 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137427 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137426 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137428 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137429 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137428 _144105) (@lem8137427 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137430 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137431 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137430 _144105 _144106 P p g a) (@lem8137429 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137432 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137433 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137432) (@lem8137431 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137434 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137435 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137436 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137435 _144105 _144106 P p g a) (@lem8137434 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137437 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137436 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137438 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137439 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137438 _144105) (@lem8137437 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137440 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8137433 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137439 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137441 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8137440 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137425 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137442 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137443 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137442 _144105 _144106 P p f a) (@lem8137441 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137445 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8137446 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8137445 _144105 P Q). Qed.
Lemma lem8137447 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8137446 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137448 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137449 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137448 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137450 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137451 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137450 _144105) (@lem8137449 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137452 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137453 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137452 _144105 _144106 P p f a) (@lem8137451 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137454 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137455 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137454) (@lem8137453 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137456 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137457 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137458 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137457 _144105 _144106 P p f a) (@lem8137456 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137459 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137458 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137460 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137461 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137460 _144105) (@lem8137459 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137462 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8137455 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137461 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137463 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8137462 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137447 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137464 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137443 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137463 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137465 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137466 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137465) (@lem8137464 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137467 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8137468 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137466 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137467 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8137470 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8137471 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8137470 _144105 P Q). Qed.
Lemma lem8137472 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem8137471 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8137473 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137474 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137473 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137475 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137476 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137475 _144105) (@lem8137474 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137477 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137478 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137477) (@lem8137476 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137479 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8137480 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137478 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137479 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8137481 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137482 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term327 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term328 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137481) (@lem8137480 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137483 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137484 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137485 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137484) (@lem8137483 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137486 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8137487 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term331 _144104 _144105 _144106 _144141 P p lt2 s z f e g a) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (MK_COMB (@lem8137485 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8137486 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8137488 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term333 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8137487 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8137489 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137490 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137489 _144105) (@lem8137488 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137491 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a)) = ((term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a)).
Proof. exact (MK_COMB (@lem8137482 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137490 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137492 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (EQ_MP (@lem8137491 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137472 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137493 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8137468 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137492 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137494 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8137493 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137495 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137496 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137495 P) (@lem8137494 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137498 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137499 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8137498 P _144105 P'). Qed.
Lemma lem8137500 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (@lem8137499 _144105 P (term344 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137501 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137502 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137503 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z).
Proof. exact (MK_COMB (@lem8137501 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137502 _144105 z)). Qed.
Lemma lem8137504 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z)). Qed.
Lemma lem8137505 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8137503 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) (@lem8137504 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8137506 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term348 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8137505 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8137507 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137508 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term349 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8137507 _144105) (@lem8137506 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137509 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term350 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8137508 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137510 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137511 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137510 P) (@lem8137509 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137512 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137513 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term351 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term352 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137512) (@lem8137511 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137514 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8137515 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8137516 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a).
Proof. exact (MK_COMB (@lem8137514 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8137515 _144105 P z a)). Qed.
Lemma lem8137517 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a)). Qed.
Lemma lem8137518 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8137516 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) (@lem8137517 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8137519 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term356 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term357 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (fun_ext (fun a : P => @lem8137518 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8137520 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137521 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term358 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (MK_COMB (@lem8137520 P) (@lem8137519 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137522 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term360 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8137521 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137523 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8137524 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137523 _144105 P) (@lem8137522 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137525 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g)) = ((term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g)).
Proof. exact (MK_COMB (@lem8137513 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8137524 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137526 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (EQ_MP (@lem8137525 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8137500 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137527 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (TRANS (@lem8137496 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8137526 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137528 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term285 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137527 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137529 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137530 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137529 _144105 _144106) (@lem8137528 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137532 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137533 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8137532 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8137534 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (@lem8137533 _144105 _144106 P (term369 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137535 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137536 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137537 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z).
Proof. exact (MK_COMB (@lem8137535 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8137536 _144105 P z)). Qed.
Lemma lem8137538 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z)). Qed.
Lemma lem8137539 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8137537 _144104 _144105 _144106 _144141 P p lt2 s f e g z) (@lem8137538 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137540 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term373 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8137539 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137541 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8137542 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term374 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8137541 _144105 P) (@lem8137540 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137543 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term375 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137542 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137544 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137545 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137544 _144105 _144106) (@lem8137543 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137546 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137547 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term376 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term377 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137546) (@lem8137545 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137548 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8137549 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8137550 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g).
Proof. exact (MK_COMB (@lem8137548 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8137549 _144105 _144106 P z g)). Qed.
Lemma lem8137551 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g)). Qed.
Lemma lem8137552 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8137550 _144104 _144105 _144106 _144141 P p lt2 s f e z g) (@lem8137551 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137553 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term381 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term382 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137552 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8137554 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137555 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term383 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (MK_COMB (@lem8137554 _144105 _144106) (@lem8137553 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137556 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term385 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8137555 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137557 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137558 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term368 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137557 _144105 _144106 P) (@lem8137556 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137559 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : ((term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e)) = ((term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e)).
Proof. exact (MK_COMB (@lem8137547 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8137558 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137560 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (EQ_MP (@lem8137559 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8137534 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137561 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (TRANS (@lem8137530 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8137560 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137562 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term287 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137561 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137563 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137564 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137563 _144105 _144106) (@lem8137562 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137566 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137567 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8137566 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8137568 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (@lem8137567 _144105 _144106 P (term394 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137569 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8137570 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137571 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z).
Proof. exact (MK_COMB (@lem8137569 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8137570 _144105 _144106 P z)). Qed.
Lemma lem8137572 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z)). Qed.
Lemma lem8137573 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8137571 _144104 _144105 _144106 _144141 P p lt2 s f e z) (@lem8137572 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137574 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term398 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8137573 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137575 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137576 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term399 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8137575 _144105 _144106 P) (@lem8137574 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137577 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term400 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137576 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8137578 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137579 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137578 _144105 _144106) (@lem8137577 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137580 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137581 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term401 _144104 _144105 _144106 _144141 P p lt2 s e) = (term402 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137580) (@lem8137579 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137582 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8137583 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8137584 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f).
Proof. exact (MK_COMB (@lem8137582 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8137583 _144105 _144106 P z f)). Qed.
Lemma lem8137585 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f)). Qed.
Lemma lem8137586 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8137584 _144104 _144105 _144106 _144141 P p lt2 s e z f) (@lem8137585 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137587 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term406 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term407 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137586 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8137588 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137589 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term408 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term409 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (MK_COMB (@lem8137588 _144105 _144106) (@lem8137587 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8137590 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term410 _144104 _144105 _144106 _144141 P p lt2 s e) = (term411 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8137589 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8137591 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137592 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term393 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8137591 _144105 _144106 P) (@lem8137590 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137593 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : ((term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e)) = ((term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e)).
Proof. exact (MK_COMB (@lem8137581 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137592 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137594 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (EQ_MP (@lem8137593 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137568 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137596 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8137564 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137594 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137597 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8137316 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137596 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8137598 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term412 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (EQ_MP (@lem8137597 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8137261 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8137607 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8137608 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8137609 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8137608 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137610 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137611 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8137612 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137611) (@lem8137610 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137613 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8137612 _144104 _144105 _144106 P lt2 s a f g z) (@lem8137607 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137614 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137613 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137615 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137616 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137615 _144105) (@lem8137614 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137617 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8137609 _144104 _144105 _144106 P lt2 s a f g) (@lem8137616 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137619 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137620 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137619 _144105 _144106 P p g a) (@lem8137617 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137621 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137622 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137621 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137620 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137624 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137625 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137624 _144105 _144106 P p f a) (@lem8137622 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137626 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137627 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137626 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137625 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137628 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137629 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137630 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137629) (@lem8137627 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137631 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137630 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137628 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137632 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137633 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8137632 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137631 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137634 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8137633 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137635 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137636 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137635 P) (@lem8137634 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137637 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137636 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137638 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137639 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137638 _144105 _144106) (@lem8137637 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137640 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137639 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137641 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137642 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137641 _144105 _144106) (@lem8137640 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137749 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8137750 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8137749 _144105 P Q). Qed.
Lemma lem8137751 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8137750 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137752 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137753 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137752 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137754 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137755 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137754 _144105) (@lem8137753 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137756 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137757 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137756 _144105 _144106 P p g a) (@lem8137755 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137758 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137759 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137758) (@lem8137757 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137760 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137761 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8137762 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137761 _144105 _144106 P p g a) (@lem8137760 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137763 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137762 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137764 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137765 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137764 _144105) (@lem8137763 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137766 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8137759 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137765 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137767 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8137766 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137751 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137768 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137769 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137768 _144105 _144106 P p f a) (@lem8137767 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137771 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8137772 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8137771 _144105 P Q). Qed.
Lemma lem8137773 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8137772 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137774 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137775 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137774 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137776 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137777 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137776 _144105) (@lem8137775 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137778 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137779 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137778 _144105 _144106 P p f a) (@lem8137777 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137780 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137781 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137780) (@lem8137779 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137782 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137783 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8137784 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137783 _144105 _144106 P p f a) (@lem8137782 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137785 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137784 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137786 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137787 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137786 _144105) (@lem8137785 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137788 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8137781 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137787 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137789 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8137788 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137773 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137790 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8137769 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137789 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137791 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137792 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137791) (@lem8137790 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137793 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137794 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137792 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137793 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137796 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8137797 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8137796 _144105 P Q). Qed.
Lemma lem8137798 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem8137797 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137799 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137800 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137799 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137801 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137802 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137801 _144105) (@lem8137800 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137803 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137804 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8137803) (@lem8137802 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8137805 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137806 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137804 _144104 _144105 _144106 P p lt2 s a f g) (@lem8137805 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137807 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137808 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term424 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term425 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137807) (@lem8137806 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137809 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137810 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8137811 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8137810) (@lem8137809 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8137812 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8137813 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term426 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8137811 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8137812 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8137814 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term428 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8137813 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8137815 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137816 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137815 _144105) (@lem8137814 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137817 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)) = ((term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)).
Proof. exact (MK_COMB (@lem8137808 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137816 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137818 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (EQ_MP (@lem8137817 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137798 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137819 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8137794 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137818 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137820 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8137819 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137821 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137822 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137821 P) (@lem8137820 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137824 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137825 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8137824 P _144105 P'). Qed.
Lemma lem8137826 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (@lem8137825 _144105 P (term435 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137827 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137828 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137829 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z).
Proof. exact (MK_COMB (@lem8137827 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137828 _144105 z)). Qed.
Lemma lem8137830 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z)). Qed.
Lemma lem8137831 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8137829 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) (@lem8137830 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8137832 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term439 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8137831 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8137833 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8137834 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term440 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8137833 _144105) (@lem8137832 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137835 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term441 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8137834 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137836 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137837 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137836 P) (@lem8137835 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137838 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137839 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term442 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term443 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137838) (@lem8137837 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137840 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8137841 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8137842 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a).
Proof. exact (MK_COMB (@lem8137840 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8137841 _144105 P z a)). Qed.
Lemma lem8137843 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a)). Qed.
Lemma lem8137844 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8137842 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) (@lem8137843 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8137845 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term447 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term448 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8137844 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8137846 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8137847 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term449 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8137846 P) (@lem8137845 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137848 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term451 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8137847 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137849 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8137850 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137849 _144105 P) (@lem8137848 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137851 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)) = ((term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)).
Proof. exact (MK_COMB (@lem8137839 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8137850 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137852 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (EQ_MP (@lem8137851 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8137826 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137853 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (TRANS (@lem8137822 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8137852 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137854 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137853 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137855 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137856 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137855 _144105 _144106) (@lem8137854 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137858 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137859 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8137858 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8137860 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (@lem8137859 _144105 _144106 P (term458 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137861 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137862 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137863 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z).
Proof. exact (MK_COMB (@lem8137861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8137862 _144105 P z)). Qed.
Lemma lem8137864 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z)). Qed.
Lemma lem8137865 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8137863 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) (@lem8137864 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137866 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term462 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8137865 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137867 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8137868 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term463 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8137867 _144105 P) (@lem8137866 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137869 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term464 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137868 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137870 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137871 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137870 _144105 _144106) (@lem8137869 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137872 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137873 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term465 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term466 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137872) (@lem8137871 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137874 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8137875 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8137876 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g).
Proof. exact (MK_COMB (@lem8137874 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8137875 _144105 _144106 P z g)). Qed.
Lemma lem8137877 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g)). Qed.
Lemma lem8137878 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8137876 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) (@lem8137877 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137879 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term470 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term471 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8137878 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8137880 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137881 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term472 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8137880 _144105 _144106) (@lem8137879 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137882 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term474 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8137881 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137883 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137884 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137883 _144105 _144106 P) (@lem8137882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137885 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)) = ((term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)).
Proof. exact (MK_COMB (@lem8137873 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8137884 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137886 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (EQ_MP (@lem8137885 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8137860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137887 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (TRANS (@lem8137856 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8137886 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137888 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137889 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137890 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137889 _144105 _144106) (@lem8137888 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137892 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8137893 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8137892 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8137894 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (@lem8137893 _144105 _144106 P (term481 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137895 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8137896 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8137897 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z).
Proof. exact (MK_COMB (@lem8137895 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8137896 _144105 _144106 P z)). Qed.
Lemma lem8137898 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z)). Qed.
Lemma lem8137899 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8137897 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) (@lem8137898 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137900 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term485 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8137899 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137901 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137902 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term486 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8137901 _144105 _144106 P) (@lem8137900 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137903 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term487 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137902 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8137904 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137905 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137904 _144105 _144106) (@lem8137903 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137906 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8137907 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term488 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term489 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137906) (@lem8137905 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137908 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8137909 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8137910 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f).
Proof. exact (MK_COMB (@lem8137908 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8137909 _144105 _144106 P z f)). Qed.
Lemma lem8137911 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f)). Qed.
Lemma lem8137912 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8137910 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) (@lem8137911 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137913 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term493 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8137912 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8137914 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8137915 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term495 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8137914 _144105 _144106) (@lem8137913 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8137916 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term497 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8137915 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8137917 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8137918 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8137917 _144105 _144106 P) (@lem8137916 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137919 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)) = ((term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)).
Proof. exact (MK_COMB (@lem8137907 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137918 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137920 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (EQ_MP (@lem8137919 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137894 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137922 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8137890 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137920 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137923 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8137642 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137922 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8137924 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8137923 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8137262 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8137930 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8137936 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : p g a.
Proof. exact (h1). Qed.
Lemma lem8137943 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term500 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17265 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8137944 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term501 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8137943 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8137945 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8137998 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term502 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8137945 _144105) (@lem8137944 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8137999 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term502 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8137998 _144104 _144105 _144106 P lt2 s a f g) (@lem8137265 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8138017 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term196 _144105 _144106 _144138 _144141 P f c e g a) : term196 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8138018 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (h1). Qed.
Lemma lem8138026 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138027 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8138026 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8138028 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8138027 _144105 _144106 P p f). Qed.
Lemma lem8138029 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138030 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8138028 _144105 _144106 P p f) (@lem8138029 P a)). Qed.
Lemma lem8138032 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138033 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8138032 P Prop f x). Qed.
Lemma lem8138034 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8138033 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8138036 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8138030 _144105 _144106 P p f a) (@lem8138034 _144105 _144106 P p f a)). Qed.
Lemma lem8138044 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138045 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8138044 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8138046 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8138045 _144105 _144106 P p g). Qed.
Lemma lem8138047 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138048 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8138046 _144105 _144106 P p g) (@lem8138047 P a)). Qed.
Lemma lem8138050 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138051 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8138050 P Prop f x). Qed.
Lemma lem8138052 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8138051 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8138054 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8138048 _144105 _144106 P p g a) (@lem8138052 _144105 _144106 P p g a)). Qed.
Lemma lem8138056 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8138061 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138062 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8138061 _144105 _144106 f x). Qed.
Lemma lem8138064 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (f z) = (@I (_144105 -> _144106) f z).
Proof. exact (@lem8138062 _144105 _144106 f z). Qed.
Lemma lem8138069 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138070 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8138069 _144105 _144106 f x). Qed.
Lemma lem8138072 {_144105 _144106 : Type'} (g : _144105 -> _144106) (z : _144105) : (g z) = (@I (_144105 -> _144106) g z).
Proof. exact (@lem8138070 _144105 _144106 g z). Qed.
Lemma lem8138073 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (term504 _144105 _144106 f z) = (term505 _144105 _144106 f z).
Proof. exact (MK_COMB (@lem8138056 _144106) (@lem8138064 _144105 _144106 f z)). Qed.
Lemma lem8138074 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : ((f z) = (g z)) = ((@I (_144105 -> _144106) f z) = (@I (_144105 -> _144106) g z)).
Proof. exact (MK_COMB (@lem8138073 _144105 _144106 f z) (@lem8138072 _144105 _144106 g z)). Qed.
Lemma lem8138075 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8138082 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138083 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8138082 P _144104 f x). Qed.
Lemma lem8138085 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8138083 _144104 P s a). Qed.
Lemma lem8138086 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (lt2 z).
Proof. exact (eq_refl (lt2 z)). Qed.
Lemma lem8138087 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term506 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8138086 _144104 _144105 lt2 z) (@lem8138085 _144104 P s a)). Qed.
Lemma lem8138089 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138090 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8138089 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8138091 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (@I (_144105 -> _144104 -> Prop) lt2 z).
Proof. exact (@lem8138090 _144104 _144105 lt2 z). Qed.
Lemma lem8138092 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8138093 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term507 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8138091 _144104 _144105 lt2 z) (@lem8138092 _144104 P s a)). Qed.
Lemma lem8138095 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138096 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8138095 _144104 Prop f x). Qed.
Lemma lem8138097 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term507 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (@lem8138096 _144104 (@I (_144105 -> _144104 -> Prop) lt2 z) (@I (P -> _144104) s a)). Qed.
Lemma lem8138098 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8138093 _144104 _144105 P lt2 z s a) (@lem8138097 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8138099 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8138087 _144104 _144105 P lt2 z s a) (@lem8138098 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8138100 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term509 _144104 _144105 P lt2 z s a) = (term510 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8138075) (@lem8138099 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8138101 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8138102 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term511 _144104 _144105 P lt2 z s a) = (term512 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8138101) (@lem8138100 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8138103 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term500 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8138102 _144104 _144105 P lt2 z s a) (@lem8138074 _144105 _144106 f g z)). Qed.
Lemma lem8138104 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term501 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8138103 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8138105 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8138106 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term502 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8138105 _144105) (@lem8138104 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8138107 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8138106 _144104 _144105 _144106 P lt2 s a f g) (@lem8137999 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8138208 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8138209 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8138210 {_144138 : Type'} : (@ε _144138) = (@ε _144138).
Proof. exact (eq_refl (@ε _144138)). Qed.
Lemma lem8138220 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138221 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8138220 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8138222 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8138221 _144105 _144106 _144141 P e f). Qed.
Lemma lem8138223 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138224 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8138222 _144105 _144106 _144141 P e f) (@lem8138223 P a)). Qed.
Lemma lem8138226 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138227 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8138226 P _144141 f x). Qed.
Lemma lem8138228 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8138227 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8138230 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8138224 _144105 _144106 _144141 P e f a) (@lem8138228 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138232 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8138233 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138232 _144105 _144106 _144138 _144141 P c f a) (@lem8138230 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138235 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138236 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138235 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8138237 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8138236 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8138238 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138239 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8138237 _144105 _144106 _144138 _144141 P c f) (@lem8138238 P a)). Qed.
Lemma lem8138241 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138242 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138241 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8138243 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8138242 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8138244 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8138239 _144105 _144106 _144138 _144141 P c f a) (@lem8138243 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8138245 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138246 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138244 _144105 _144106 _144138 _144141 P c f a) (@lem8138245 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138248 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138249 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138248 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8138250 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8138249 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138251 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8138246 _144105 _144106 _144138 _144141 P c e f a) (@lem8138250 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138252 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8138233 _144105 _144106 _144138 _144141 P c e f a) (@lem8138251 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138253 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term521 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138210 _144138) (@lem8138252 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138255 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138256 {_144138 : Type'} (f : type684 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> _144138) f x).
Proof. exact (@lem8138255 (_144138 -> Prop) _144138 f x). Qed.
Lemma lem8138257 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term521 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8138256 _144138 (@ε _144138) (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138258 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8138253 _144105 _144106 _144138 _144141 P c e f a) (@lem8138257 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138259 {_144138 : Type'} : (@ε _144138) = (@ε _144138).
Proof. exact (eq_refl (@ε _144138)). Qed.
Lemma lem8138269 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138270 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8138269 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8138271 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8138270 _144105 _144106 _144141 P e g). Qed.
Lemma lem8138272 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138273 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8138271 _144105 _144106 _144141 P e g) (@lem8138272 P a)). Qed.
Lemma lem8138275 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138276 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8138275 P _144141 f x). Qed.
Lemma lem8138277 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8138276 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8138279 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8138273 _144105 _144106 _144141 P e g a) (@lem8138277 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138281 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8138282 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8138281 _144105 _144106 _144138 _144141 P c g a) (@lem8138279 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138284 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138285 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138284 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8138286 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8138285 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8138287 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138288 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8138286 _144105 _144106 _144138 _144141 P c g) (@lem8138287 P a)). Qed.
Lemma lem8138290 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138291 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138290 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8138292 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8138291 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8138293 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8138288 _144105 _144106 _144138 _144141 P c g a) (@lem8138292 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8138294 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138295 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8138293 _144105 _144106 _144138 _144141 P c g a) (@lem8138294 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138297 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138298 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138297 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8138299 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8138298 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138300 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8138295 _144105 _144106 _144138 _144141 P c e g a) (@lem8138299 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138301 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8138282 _144105 _144106 _144138 _144141 P c e g a) (@lem8138300 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138302 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term145 _144105 _144106 _144138 _144141 P c e g a) = (term521 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8138259 _144138) (@lem8138301 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138304 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138305 {_144138 : Type'} (f : type684 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> _144138) f x).
Proof. exact (@lem8138304 (_144138 -> Prop) _144138 f x). Qed.
Lemma lem8138306 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term521 _144105 _144106 _144138 _144141 P c e g a) = (term522 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8138305 _144138 (@ε _144138) (term520 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138307 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term145 _144105 _144106 _144138 _144141 P c e g a) = (term522 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8138302 _144105 _144106 _144138 _144141 P c e g a) (@lem8138306 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138308 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term523 _144105 _144106 _144138 _144141 P c e f a) = (term524 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138209 _144138) (@lem8138258 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138309 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)) = ((term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8138308 _144105 _144106 _144138 _144141 P c e f a) (@lem8138307 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138310 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term196 _144105 _144106 _144138 _144141 P f c e g a) = (term525 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8138208) (@lem8138309 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8138312 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8138322 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138323 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8138322 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8138324 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8138323 _144105 _144106 _144141 P e f). Qed.
Lemma lem8138325 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138326 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8138324 _144105 _144106 _144141 P e f) (@lem8138325 P a)). Qed.
Lemma lem8138328 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138329 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8138328 P _144141 f x). Qed.
Lemma lem8138330 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8138329 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8138332 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8138326 _144105 _144106 _144141 P e f a) (@lem8138330 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138334 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8138335 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138334 _144105 _144106 _144138 _144141 P c f a) (@lem8138332 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138337 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138338 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138337 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8138339 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8138338 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8138340 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138341 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8138339 _144105 _144106 _144138 _144141 P c f) (@lem8138340 P a)). Qed.
Lemma lem8138343 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138344 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138343 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8138345 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8138344 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8138346 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8138341 _144105 _144106 _144138 _144141 P c f a) (@lem8138345 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8138347 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138348 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138346 _144105 _144106 _144138 _144141 P c f a) (@lem8138347 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138350 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138351 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138350 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8138352 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8138351 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8138353 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8138348 _144105 _144106 _144138 _144141 P c e f a) (@lem8138352 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138354 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8138335 _144105 _144106 _144138 _144141 P c e f a) (@lem8138353 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138364 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138365 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8138364 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8138366 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8138365 _144105 _144106 _144141 P e g). Qed.
Lemma lem8138367 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138368 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8138366 _144105 _144106 _144141 P e g) (@lem8138367 P a)). Qed.
Lemma lem8138370 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138371 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8138370 P _144141 f x). Qed.
Lemma lem8138372 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8138371 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8138374 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8138368 _144105 _144106 _144141 P e g a) (@lem8138372 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138376 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8138377 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8138376 _144105 _144106 _144138 _144141 P c g a) (@lem8138374 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138379 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138380 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138379 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8138381 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8138380 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8138382 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138383 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8138381 _144105 _144106 _144138 _144141 P c g) (@lem8138382 P a)). Qed.
Lemma lem8138385 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138386 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138385 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8138387 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8138386 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8138388 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8138383 _144105 _144106 _144138 _144141 P c g a) (@lem8138387 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8138389 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138390 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8138388 _144105 _144106 _144138 _144141 P c g a) (@lem8138389 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138392 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138393 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8138392 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8138394 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8138393 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8138395 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8138390 _144105 _144106 _144138 _144141 P c e g a) (@lem8138394 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138396 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8138377 _144105 _144106 _144138 _144141 P c e g a) (@lem8138395 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138397 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term39 _144105 _144106 _144138 _144141 P c e f a) = (term526 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8138312 _144138) (@lem8138354 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8138398 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8138397 _144105 _144106 _144138 _144141 P c e f a) (@lem8138396 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8138399 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8138400 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8138401 {_144105 _144106 : Type'} (f : _144105 -> _144106) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8138410 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138411 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138410 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8138412 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8138411 _144105 _144106 P z f). Qed.
Lemma lem8138413 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8138414 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8138412 _144105 _144106 P z f) (@lem8138413 _144105 _144106 g)). Qed.
Lemma lem8138416 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138417 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138416 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8138418 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8138417 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8138419 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8138414 _144105 _144106 P z f g) (@lem8138418 _144105 _144106 P z f g)). Qed.
Lemma lem8138420 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138421 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138419 _144105 _144106 P z f g) (@lem8138420 P a)). Qed.
Lemma lem8138423 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138424 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8138423 P _144105 f x). Qed.
Lemma lem8138425 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8138424 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8138427 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8138421 _144105 _144106 P z f g a) (@lem8138425 _144105 _144106 P z f g a)). Qed.
Lemma lem8138428 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term531 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138401 _144105 _144106 f) (@lem8138427 _144105 _144106 P z f g a)). Qed.
Lemma lem8138430 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138431 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8138430 _144105 _144106 f x). Qed.
Lemma lem8138432 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term531 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (@lem8138431 _144105 _144106 f (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8138433 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8138428 _144105 _144106 P z f g a) (@lem8138432 _144105 _144106 P z f g a)). Qed.
Lemma lem8138434 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8138443 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138444 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138443 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8138445 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8138444 _144105 _144106 P z f). Qed.
Lemma lem8138446 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8138447 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8138445 _144105 _144106 P z f) (@lem8138446 _144105 _144106 g)). Qed.
Lemma lem8138449 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138450 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138449 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8138451 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8138450 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8138452 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8138447 _144105 _144106 P z f g) (@lem8138451 _144105 _144106 P z f g)). Qed.
Lemma lem8138453 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138454 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138452 _144105 _144106 P z f g) (@lem8138453 P a)). Qed.
Lemma lem8138456 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138457 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8138456 P _144105 f x). Qed.
Lemma lem8138458 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8138457 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8138460 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8138454 _144105 _144106 P z f g a) (@lem8138458 _144105 _144106 P z f g a)). Qed.
Lemma lem8138461 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term534 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138434 _144105 _144106 g) (@lem8138460 _144105 _144106 P z f g a)). Qed.
Lemma lem8138463 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138464 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8138463 _144105 _144106 f x). Qed.
Lemma lem8138465 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term534 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8138464 _144105 _144106 g (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8138466 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8138461 _144105 _144106 P z f g a) (@lem8138465 _144105 _144106 P z f g a)). Qed.
Lemma lem8138467 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term536 _144105 _144106 P z f g a) = (term537 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138400 _144106) (@lem8138433 _144105 _144106 P z f g a)). Qed.
Lemma lem8138468 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : ((term530 _144105 _144106 P z f g a) = (term533 _144105 _144106 P z f g a)) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (MK_COMB (@lem8138467 _144105 _144106 P z f g a) (@lem8138466 _144105 _144106 P z f g a)). Qed.
Lemma lem8138469 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term538 _144105 _144106 P z f g a) = (term539 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138399) (@lem8138468 _144105 _144106 P z f g a)). Qed.
Lemma lem8138470 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem8138479 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138480 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138479 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8138481 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8138480 _144105 _144106 P z f). Qed.
Lemma lem8138482 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8138483 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8138481 _144105 _144106 P z f) (@lem8138482 _144105 _144106 g)). Qed.
Lemma lem8138485 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138486 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8138485 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8138487 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8138486 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8138488 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8138483 _144105 _144106 P z f g) (@lem8138487 _144105 _144106 P z f g)). Qed.
Lemma lem8138489 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138490 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8138488 _144105 _144106 P z f g) (@lem8138489 P a)). Qed.
Lemma lem8138492 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138493 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8138492 P _144105 f x). Qed.
Lemma lem8138494 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8138493 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8138496 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8138490 _144105 _144106 P z f g a) (@lem8138494 _144105 _144106 P z f g a)). Qed.
Lemma lem8138501 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138502 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8138501 P _144104 f x). Qed.
Lemma lem8138504 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8138502 _144104 P s a). Qed.
Lemma lem8138505 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term540 _144104 _144105 _144106 P lt2 z f g a) = (term541 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (MK_COMB (@lem8138470 _144104 _144105 lt2) (@lem8138496 _144105 _144106 P z f g a)). Qed.
Lemma lem8138506 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term543 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8138505 _144104 _144105 _144106 P lt2 z f g a) (@lem8138504 _144104 P s a)). Qed.
Lemma lem8138508 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138509 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8138508 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8138510 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term541 _144104 _144105 _144106 P lt2 z f g a) = (term544 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (@lem8138509 _144104 _144105 lt2 (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8138511 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8138512 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term545 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8138510 _144104 _144105 _144106 P lt2 z f g a) (@lem8138511 _144104 P s a)). Qed.
Lemma lem8138514 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138515 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8138514 _144104 Prop f x). Qed.
Lemma lem8138516 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term545 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8138515 _144104 (term544 _144104 _144105 _144106 P lt2 z f g a) (@I (P -> _144104) s a)). Qed.
Lemma lem8138517 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8138512 _144104 _144105 _144106 P lt2 z f g s a) (@lem8138516 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8138518 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8138506 _144104 _144105 _144106 P lt2 z f g s a) (@lem8138517 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8138519 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8138520 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term547 _144104 _144105 _144106 P lt2 z f g s a) = (term548 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8138519) (@lem8138518 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8138521 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term549 _144104 _144105 _144106 P lt2 s z f g a) = (term550 _144104 _144105 _144106 P lt2 s z f g a).
Proof. exact (MK_COMB (@lem8138520 _144104 _144105 _144106 P lt2 z f g s a) (@lem8138469 _144105 _144106 P z f g a)). Qed.
Lemma lem8138522 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8138529 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138530 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8138529 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8138531 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8138530 _144105 _144106 P p g). Qed.
Lemma lem8138532 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138533 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8138531 _144105 _144106 P p g) (@lem8138532 P a)). Qed.
Lemma lem8138535 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138536 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8138535 P Prop f x). Qed.
Lemma lem8138537 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8138536 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8138539 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8138533 _144105 _144106 P p g a) (@lem8138537 _144105 _144106 P p g a)). Qed.
Lemma lem8138540 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p g a) = (term551 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8138522) (@lem8138539 _144105 _144106 P p g a)). Qed.
Lemma lem8138541 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8138542 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term552 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8138541) (@lem8138540 _144105 _144106 P p g a)). Qed.
Lemma lem8138543 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term553 _144104 _144105 _144106 P p lt2 s z f g a) = (term554 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8138542 _144105 _144106 P p g a) (@lem8138521 _144104 _144105 _144106 P lt2 s z f g a)). Qed.
Lemma lem8138544 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8138551 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138552 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8138551 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8138553 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8138552 _144105 _144106 P p f). Qed.
Lemma lem8138554 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8138555 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8138553 _144105 _144106 P p f) (@lem8138554 P a)). Qed.
Lemma lem8138557 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8138558 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8138557 P Prop f x). Qed.
Lemma lem8138559 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8138558 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8138561 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8138555 _144105 _144106 P p f a) (@lem8138559 _144105 _144106 P p f a)). Qed.
Lemma lem8138562 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p f a) = (term551 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8138544) (@lem8138561 _144105 _144106 P p f a)). Qed.
Lemma lem8138563 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8138564 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8138563) (@lem8138562 _144105 _144106 P p f a)). Qed.
Lemma lem8138565 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term555 _144104 _144105 _144106 P p lt2 s z f g a) = (term556 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8138564 _144105 _144106 P p f a) (@lem8138543 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8138566 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8138567 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term557 _144104 _144105 _144106 P p lt2 s z f g a) = (term558 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8138566) (@lem8138565 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8138568 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term559 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8138567 _144104 _144105 _144106 P p lt2 s z f g a) (@lem8138398 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8138569 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term561 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8138568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8138570 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8138571 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term563 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8138570 P) (@lem8138569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8138572 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term565 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8138571 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8138573 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8138574 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8138573 _144105 _144106) (@lem8138572 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8138575 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8138574 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8138576 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8138577 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8138576 _144105 _144106) (@lem8138575 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8138578 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (EQ_MP (@lem8138577 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (@lem8138018 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8138811 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term513 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term513 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8138812 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term514 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8138811 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8138813 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8138815 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term515 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8138813 _144105) (@lem8138812 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8138816 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8138815 _144104 _144105 _144106 P lt2 s a f g) (@lem8138107 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8138830 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8138847 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term554 _144104 _144105 _144106 P p lt2 s z f g a) = (term570 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term546 _144104 _144105 _144106 P lt2 z f g s a) (term551 _144105 _144106 P p g a) (term539 _144105 _144106 P z f g a)). Qed.
Lemma lem8138850 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term552 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (eq_refl (term552 _144105 _144106 P p f a)). Qed.
Lemma lem8138851 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term571 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8138850 _144105 _144106 P p f a) (@lem8138847 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8138858 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term571 _144104 _144105 _144106 P lt2 s p z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term573 _144104 _144105 _144106 P p lt2 z f g s a) (term551 _144105 _144106 P p f a) (term574 _144105 _144106 P p z f g a)). Qed.
Lemma lem8138859 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (TRANS (@lem8138851 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8138858 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8138860 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8138861 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term558 _144104 _144105 _144106 P p lt2 s z f g a) = (term575 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8138860) (@lem8138859 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8138862 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (MK_COMB (@lem8138861 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8138830 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8138869 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (@lem19699 (term578 _144104 _144105 _144106 P p lt2 z f g s a) (term579 _144105 _144106 P p z f g a) ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8138870 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (TRANS (@lem8138862 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) (@lem8138869 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8138871 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term580 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8138870 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8138872 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8138873 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (MK_COMB (@lem8138872 P) (@lem8138871 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8138874 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term582 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8138873 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8138875 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8138876 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (MK_COMB (@lem8138875 _144105 _144106) (@lem8138874 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8138877 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term584 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8138876 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8138878 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8138880 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (MK_COMB (@lem8138878 _144105 _144106) (@lem8138877 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e)). Qed.
Lemma lem8138881 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e.
Proof. exact (EQ_MP (@lem8138880 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e) (@lem8138578 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8138935 {_144104 _144105 _144106 P : Type'} (_107782 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term586 _144104 _144105 _144106 P lt2 s a f g _107782.
Proof. exact (@lem8138816 _144104 _144105 _144106 P lt2 s a f g h1 _107782). Qed.
Lemma lem8138936 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107782 : _144105) : (term586 _144104 _144105 _144106 P lt2 s a f g _107782) = (term513 _144104 _144105 _144106 P lt2 s a f g _107782).
Proof. exact (eq_refl (term586 _144104 _144105 _144106 P lt2 s a f g _107782)). Qed.
Lemma lem8138938 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107783.
Proof. exact (@lem8138881 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1 _107783). Qed.
Lemma lem8138939 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107783) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e).
Proof. exact (eq_refl (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107783)). Qed.
Lemma lem8138940 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e.
Proof. exact (EQ_MP (@lem8138939 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e) (@lem8138938 _144104 _144105 _144106 _144138 _144141 P _107783 p lt2 s z c e h1)). Qed.
Lemma lem8138941 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784.
Proof. exact (@lem8138940 _144104 _144105 _144106 _144138 _144141 P _107783 p lt2 s z c e h1 _107784). Qed.
Lemma lem8138942 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) : (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784).
Proof. exact (eq_refl (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784)). Qed.
Lemma lem8138943 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784.
Proof. exact (EQ_MP (@lem8138942 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784) (@lem8138941 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 p lt2 s z c e h1)). Qed.
Lemma lem8138944 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785.
Proof. exact (@lem8138943 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 p lt2 s z c e h1 _107785). Qed.
Lemma lem8138945 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785).
Proof. exact (eq_refl (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785)). Qed.
Lemma lem8138946 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785.
Proof. exact (EQ_MP (@lem8138945 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107783 c e _107784 _107785) (@lem8138944 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8138958 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term590 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785.
Proof. exact (proj2 (@lem8138946 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8138959 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785.
Proof. exact (proj1 (@lem8138946 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8138969 {_144104 _144105 _144106 P : Type'} (_107782 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term513 _144104 _144105 _144106 P lt2 s a f g _107782.
Proof. exact (EQ_MP (@lem8138936 _144104 _144105 _144106 P lt2 s a f g _107782) (@lem8138935 _144104 _144105 _144106 P _107782 lt2 s a f g h1)). Qed.
Lemma lem8138975 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term196 _144105 _144106 _144138 _144141 P f c e g a) : term525 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8138310 _144105 _144106 _144138 _144141 P f c e g a) (@lem8138017 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8139015 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107783 _107785) (term573 _144104 _144105 _144106 P p lt2 z _107783 _107784 s _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139022 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term593 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107784 _107785) (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139023 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139026 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139023 _144105 _144106 P p _107783 _107785) (@lem8139022 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785)). Qed.
Lemma lem8139028 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785).
Proof. exact (TRANS (@lem8139015 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) (@lem8139026 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785)). Qed.
Lemma lem8139029 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785.
Proof. exact (EQ_MP (@lem8139028 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) (@lem8138959 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139033 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term596 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107783 _107785) (term574 _144105 _144106 P p z _107783 _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139040 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term597 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term598 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107784 _107785) (term539 _144105 _144106 P z _107783 _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139041 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139044 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term596 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139041 _144105 _144106 P p _107783 _107785) (@lem8139040 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785)). Qed.
Lemma lem8139046 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (TRANS (@lem8139033 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) (@lem8139044 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785)). Qed.
Lemma lem8139047 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785.
Proof. exact (EQ_MP (@lem8139046 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) (@lem8138958 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139150 {_144138 : Type'} : (@I ((_144138 -> Prop) -> _144138)) = (@I ((_144138 -> Prop) -> _144138)).
Proof. exact (eq_refl (@I ((_144138 -> Prop) -> _144138))). Qed.
Lemma lem8139151 {_144138 : Type'} (_107813 : type684 _144138) (_107815 : type684 _144138) (h1 : _107813 = _107815) : _107813 = _107815.
Proof. exact (h1). Qed.
Lemma lem8139152 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (h1 : _107814 = _107816) : _107814 = _107816.
Proof. exact (h1). Qed.
Lemma lem8139153 {_144138 : Type'} (_107813 : type684 _144138) (_107815 : type684 _144138) (h1 : _107813 = _107815) : (@I ((_144138 -> Prop) -> _144138) _107813) = (@I ((_144138 -> Prop) -> _144138) _107815).
Proof. exact (MK_COMB (@lem8139150 _144138) (@lem8139151 _144138 _107813 _107815 h1)). Qed.
Lemma lem8139154 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) (h1 : _107814 = _107816) (h2 : _107813 = _107815) : (@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816).
Proof. exact (MK_COMB (@lem8139153 _144138 _107813 _107815 h2) (@lem8139152 _144138 _107814 _107816 h1)). Qed.
Lemma lem8139155 {_144138 : Type'} (_107813 : type684 _144138) (_107815 : type684 _144138) (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (h1 : _107814 = _107816) : term600 _144138 _107813 _107814 _107815 _107816.
Proof. exact (fun h0 : _107813 = _107815 => @lem8139154 _144138 _107814 _107816 _107813 _107815 h1 h0). Qed.
Lemma lem8139157 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8139158 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : (term600 _144138 _107813 _107814 _107815 _107816) = (term602 _144138 _107813 _107814 _107815 _107816).
Proof. exact (@lem8139157 (_107813 = _107815) ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816))). Qed.
Lemma lem8139159 {_144138 : Type'} (_107813 : type684 _144138) (_107815 : type684 _144138) (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (h1 : _107814 = _107816) : term602 _144138 _107813 _107814 _107815 _107816.
Proof. exact (EQ_MP (@lem8139158 _144138 _107813 _107814 _107815 _107816) (@lem8139155 _144138 _107813 _107815 _107814 _107816 h1)). Qed.
Lemma lem8139160 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : term603 _144138 _107813 _107814 _107815 _107816.
Proof. exact (fun h0 : _107814 = _107816 => @lem8139159 _144138 _107813 _107815 _107814 _107816 h0). Qed.
Lemma lem8139162 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8139163 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : (term603 _144138 _107813 _107814 _107815 _107816) = (term604 _144138 _107813 _107814 _107815 _107816).
Proof. exact (@lem8139162 (_107814 = _107816) (term602 _144138 _107813 _107814 _107815 _107816)). Qed.
Lemma lem8139164 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : term604 _144138 _107813 _107814 _107815 _107816.
Proof. exact (EQ_MP (@lem8139163 _144138 _107813 _107814 _107815 _107816) (@lem8139160 _144138 _107813 _107814 _107815 _107816)). Qed.
Lemma lem8139347 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8138036 _144105 _144106 P p f a) (@lem8137930 _144105 _144106 P p f a h1)). Qed.
Lemma lem8139348 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8139347 _144105 _144106 P p f a h1). Qed.
Lemma lem8139350 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139351 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8139350 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8139352 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8139351 _144105 _144106 P p f a) (@lem8139348 _144105 _144106 P p f a h1)). Qed.
Lemma lem8139354 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8138054 _144105 _144106 P p g a) (@lem8137936 _144105 _144106 P p g a h1)). Qed.
Lemma lem8139355 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8139354 _144105 _144106 P p g a h1). Qed.
Lemma lem8139357 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139358 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8139357 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8139359 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8139358 _144105 _144106 P p g a) (@lem8139355 _144105 _144106 P p g a h1)). Qed.
Lemma lem8139361 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8138036 _144105 _144106 P p f a) (@lem8137930 _144105 _144106 P p f a h1)). Qed.
Lemma lem8139362 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8139361 _144105 _144106 P p f a h1). Qed.
Lemma lem8139364 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139365 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8139364 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8139366 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8139365 _144105 _144106 P p f a) (@lem8139362 _144105 _144106 P p f a h1)). Qed.
Lemma lem8139368 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8138054 _144105 _144106 P p g a) (@lem8137936 _144105 _144106 P p g a h1)). Qed.
Lemma lem8139369 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8139368 _144105 _144106 P p g a h1). Qed.
Lemma lem8139371 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139372 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8139371 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8139373 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8139372 _144105 _144106 P p g a) (@lem8139369 _144105 _144106 P p g a h1)). Qed.
Lemma lem8139376 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8139377 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term608 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a) => @lem8139376 _144105 _144106 _144138 _144141 P f c e g a h1). Qed.
Lemma lem8139379 (p : Prop) : (term609 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8139380 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term608 _144105 _144106 _144138 _144141 P f c e g a) = (term607 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8139379 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8139381 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8139380 _144105 _144106 _144138 _144141 P f c e g a) (@lem8139377 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8139397 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139398 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785).
Proof. exact (@lem8139397 (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (term551 _144105 _144106 P p _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139412 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139413 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term611 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term612 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785).
Proof. exact (@lem8139412 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139421 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) = (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139422 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107783 c e p _107784 _107785).
Proof. exact (MK_COMB (@lem8139421 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (@lem8139413 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785)). Qed.
Lemma lem8139426 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139427 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107783 c e p _107784 _107785) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785).
Proof. exact (@lem8139426 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139445 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785).
Proof. exact (TRANS (@lem8139422 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107783 c e p _107784 _107785) (@lem8139427 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785)). Qed.
Lemma lem8139446 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785).
Proof. exact (TRANS (@lem8139398 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) (@lem8139445 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785)). Qed.
Lemma lem8139447 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139448 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785).
Proof. exact (MK_COMB (@lem8139447 _144105 _144106 P p _107783 _107785) (@lem8139446 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785)). Qed.
Lemma lem8139452 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139453 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785) = (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785).
Proof. exact (@lem8139452 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107783 _107785) (term618 _144104 _144105 _144106 P lt2 z _107783 s p _107784 _107785)). Qed.
Lemma lem8139469 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139470 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term619 _144104 _144105 _144106 P lt2 z _107783 s p _107784 _107785) = (term620 _144104 _144105 _144106 P lt2 z s _107783 p _107784 _107785).
Proof. exact (@lem8139469 (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (term551 _144105 _144106 P p _107783 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139486 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) = (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139487 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139486 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) (@lem8139470 _144104 _144105 _144106 P lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139498 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139453 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785) (@lem8139487 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139499 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139448 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107783 s p _107784 _107785) (@lem8139498 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139500 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8139501 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term623 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term624 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139500) (@lem8139499 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139525 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139526 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term611 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term612 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785).
Proof. exact (@lem8139525 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139534 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139535 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term625 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term626 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785).
Proof. exact (MK_COMB (@lem8139534 _144105 _144106 P p _107783 _107785) (@lem8139526 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785)). Qed.
Lemma lem8139539 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139540 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term626 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785) = (term627 _144105 _144106 _144138 _144141 P c e _107783 p _107784 _107785).
Proof. exact (@lem8139539 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107783 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139558 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term625 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term627 _144105 _144106 _144138 _144141 P c e _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139535 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785) (@lem8139540 _144105 _144106 _144138 _144141 P c e _107783 p _107784 _107785)). Qed.
Lemma lem8139559 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) = (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139560 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139559 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (@lem8139558 _144105 _144106 _144138 _144141 P c e _107783 p _107784 _107785)). Qed.
Lemma lem8139564 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139565 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107783 p _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (@lem8139564 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) (term630 _144105 _144106 P _107783 p _107784 _107785)). Qed.
Lemma lem8139593 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139560 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107783 p _107784 _107785) (@lem8139565 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139594 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785)) = ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)).
Proof. exact (MK_COMB (@lem8139501 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785) (@lem8139593 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139596 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8139597 (x : Prop) : (x = x) = True.
Proof. exact (@lem8139596 Prop x). Qed.
Lemma lem8139598 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)) = True.
Proof. exact (@lem8139597 (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139599 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785)) = True.
Proof. exact (TRANS (@lem8139594 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785) (@lem8139598 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107783 p _107784 _107785)). Qed.
Lemma lem8139600 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : True = ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785)).
Proof. exact (SYM (@lem8139599 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785)). Qed.
Lemma lem8139601 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107783 c e _107784 _107785) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785).
Proof. exact (EQ_MP (@lem8139600 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) (@lem0)). Qed.
Lemma lem8139602 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785.
Proof. exact (EQ_MP (@lem8139601 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) (@lem8139029 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139604 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8139605 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785).
Proof. exact (@lem8139604 (term625 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139607 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8139608 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term635 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term636 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (@lem8139607 (term551 _144105 _144106 P p _107783 _107785) (term611 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785)). Qed.
Lemma lem8139610 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139611 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term637 _144105 _144106 P p _107783 _107785) = (term503 _144105 _144106 P p _107783 _107785).
Proof. exact (@lem8139610 (term503 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139612 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8139613 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term638 _144105 _144106 P p _107783 _107785) = (term639 _144105 _144106 P p _107783 _107785).
Proof. exact (MK_COMB (@lem8139612) (@lem8139611 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139615 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8139616 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term640 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term641 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (@lem8139615 (term551 _144105 _144106 P p _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139618 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139619 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term637 _144105 _144106 P p _107784 _107785) = (term503 _144105 _144106 P p _107784 _107785).
Proof. exact (@lem8139618 (term503 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139620 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8139621 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term638 _144105 _144106 P p _107784 _107785) = (term639 _144105 _144106 P p _107784 _107785).
Proof. exact (MK_COMB (@lem8139620) (@lem8139619 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139622 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term607 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) = (term607 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785).
Proof. exact (eq_refl (term607 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139623 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term641 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term642 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139621 _144105 _144106 P p _107784 _107785) (@lem8139622 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139624 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term640 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term642 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (TRANS (@lem8139616 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) (@lem8139623 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785)). Qed.
Lemma lem8139625 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term636 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term643 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139613 _144105 _144106 P p _107783 _107785) (@lem8139624 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785)). Qed.
Lemma lem8139626 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term635 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term643 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (TRANS (@lem8139608 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) (@lem8139625 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785)). Qed.
Lemma lem8139627 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8139628 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term644 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term645 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139627) (@lem8139626 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785)). Qed.
Lemma lem8139629 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785) = (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785).
Proof. exact (eq_refl (term546 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139630 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785).
Proof. exact (MK_COMB (@lem8139628 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) (@lem8139629 _144104 _144105 _144106 P lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139631 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (s : P -> _144104) (_107785 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107783 c e _107784 _107785) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785).
Proof. exact (TRANS (@lem8139605 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785) (@lem8139630 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785)). Qed.
Lemma lem8139633 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p g a) : term642 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8139373 _144105 _144106 P p g a h2) (@lem8139381 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8139634 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p f a) (h3 : p g a) : term643 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8139366 _144105 _144106 P p f a h2) (@lem8139633 _144105 _144106 _144138 _144141 P f c e p g a h1 h3)). Qed.
Lemma lem8139636 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785.
Proof. exact (EQ_MP (@lem8139631 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785) (@lem8139602 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139637 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107783 _107784 s _107785.
Proof. exact (@lem8139636 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1). Qed.
Lemma lem8139638 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z f g s a.
Proof. exact (@lem8139637 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8139641 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (@lem8139638 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1 (@lem8139634 _144105 _144106 _144138 _144141 P c e f p g a h2 h3 h4)). Qed.
Lemma lem8139642 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term647 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (fun h0 : term648 _144104 _144105 _144106 P lt2 z f g s a => @lem8139641 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4). Qed.
Lemma lem8139644 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139645 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term647 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8139644 (term546 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8139646 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (EQ_MP (@lem8139645 _144104 _144105 _144106 P lt2 z f g s a) (@lem8139642 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8139652 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139653 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107782) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a).
Proof. exact (@lem8139652 ((@I (_144105 -> _144106) f _107782) = (@I (_144105 -> _144106) g _107782)) (term510 _144104 _144105 P lt2 _107782 s a)). Qed.
Lemma lem8139661 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8139662 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term650 _144104 _144105 _144106 P lt2 s a f g _107782) = (term651 _144104 _144105 _144106 P f g lt2 _107782 s a).
Proof. exact (MK_COMB (@lem8139661) (@lem8139653 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139670 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term649 _144104 _144105 _144106 P f g lt2 _107782 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a).
Proof. exact (eq_refl (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139671 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107782) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)) = ((term649 _144104 _144105 _144106 P f g lt2 _107782 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)).
Proof. exact (MK_COMB (@lem8139662 _144104 _144105 _144106 P f g lt2 _107782 s a) (@lem8139670 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139673 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8139674 (x : Prop) : (x = x) = True.
Proof. exact (@lem8139673 Prop x). Qed.
Lemma lem8139675 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : ((term649 _144104 _144105 _144106 P f g lt2 _107782 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)) = True.
Proof. exact (@lem8139674 (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139676 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107782) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)) = True.
Proof. exact (TRANS (@lem8139671 _144104 _144105 _144106 P f g lt2 _107782 s a) (@lem8139675 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139677 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : True = ((term513 _144104 _144105 _144106 P lt2 s a f g _107782) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a)).
Proof. exact (SYM (@lem8139676 _144104 _144105 _144106 P f g lt2 _107782 s a)). Qed.
Lemma lem8139678 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107782) = (term649 _144104 _144105 _144106 P f g lt2 _107782 s a).
Proof. exact (EQ_MP (@lem8139677 _144104 _144105 _144106 P f g lt2 _107782 s a) (@lem0)). Qed.
Lemma lem8139679 {_144104 _144105 _144106 P : Type'} (_107782 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term649 _144104 _144105 _144106 P f g lt2 _107782 s a.
Proof. exact (EQ_MP (@lem8139678 _144104 _144105 _144106 P f g lt2 _107782 s a) (@lem8138969 _144104 _144105 _144106 P _107782 lt2 s a f g h1)). Qed.
Lemma lem8139681 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8139682 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107782 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107782 s a) = (term652 _144104 _144105 _144106 P lt2 s a f g _107782).
Proof. exact (@lem8139681 (term510 _144104 _144105 P lt2 _107782 s a) ((@I (_144105 -> _144106) f _107782) = (@I (_144105 -> _144106) g _107782))). Qed.
Lemma lem8139684 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139685 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term653 _144104 _144105 P lt2 _107782 s a) = (term508 _144104 _144105 P lt2 _107782 s a).
Proof. exact (@lem8139684 (term508 _144104 _144105 P lt2 _107782 s a)). Qed.
Lemma lem8139686 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8139687 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107782 : _144105) (s : P -> _144104) (a : P) : (term654 _144104 _144105 P lt2 _107782 s a) = (term655 _144104 _144105 P lt2 _107782 s a).
Proof. exact (MK_COMB (@lem8139686) (@lem8139685 _144104 _144105 P lt2 _107782 s a)). Qed.
Lemma lem8139688 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (_107782 : _144105) : ((@I (_144105 -> _144106) f _107782) = (@I (_144105 -> _144106) g _107782)) = ((@I (_144105 -> _144106) f _107782) = (@I (_144105 -> _144106) g _107782)).
Proof. exact (eq_refl ((@I (_144105 -> _144106) f _107782) = (@I (_144105 -> _144106) g _107782))). Qed.
Lemma lem8139689 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107782 : _144105) : (term652 _144104 _144105 _144106 P lt2 s a f g _107782) = (term656 _144104 _144105 _144106 P lt2 s a f g _107782).
Proof. exact (MK_COMB (@lem8139687 _144104 _144105 P lt2 _107782 s a) (@lem8139688 _144105 _144106 f g _107782)). Qed.
Lemma lem8139690 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107782 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107782 s a) = (term656 _144104 _144105 _144106 P lt2 s a f g _107782).
Proof. exact (TRANS (@lem8139682 _144104 _144105 _144106 P lt2 s a f g _107782) (@lem8139689 _144104 _144105 _144106 P lt2 s a f g _107782)). Qed.
Lemma lem8139693 {_144104 _144105 _144106 P : Type'} (_107782 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107782.
Proof. exact (EQ_MP (@lem8139690 _144104 _144105 _144106 P lt2 s a f g _107782) (@lem8139679 _144104 _144105 _144106 P _107782 lt2 s a f g h1)). Qed.
Lemma lem8139694 {_144104 _144105 _144106 P : Type'} (_107782 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107782.
Proof. exact (@lem8139693 _144104 _144105 _144106 P _107782 lt2 s a f g h1). Qed.
Lemma lem8139695 {_144104 _144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term657 _144104 _144105 _144106 P lt2 s z f g a.
Proof. exact (@lem8139694 _144104 _144105 _144106 P (term529 _144105 _144106 P z f g a) lt2 s a f g h1). Qed.
Lemma lem8139698 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8139695 _144104 _144105 _144106 P z lt2 s a f g h1 (@lem8139646 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h2 h3 h4 h5)). Qed.
Lemma lem8139699 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term658 _144105 _144106 P z f g a.
Proof. exact (fun h0 : term539 _144105 _144106 P z f g a => @lem8139698 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8139701 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139702 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term658 _144105 _144106 P z f g a) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (@lem8139701 ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a))). Qed.
Lemma lem8139703 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (EQ_MP (@lem8139702 _144105 _144106 P z f g a) (@lem8139699 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8139719 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139720 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term659 _144105 _144106 _144138 _144141 P z p _107783 c e _107784 _107785).
Proof. exact (@lem8139719 (term539 _144105 _144106 P z _107783 _107784 _107785) (term551 _144105 _144106 P p _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139736 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139737 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term611 _144105 _144106 _144138 _144141 P p _107783 c e _107784 _107785) = (term612 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785).
Proof. exact (@lem8139736 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139745 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term660 _144105 _144106 P z _107783 _107784 _107785) = (term660 _144105 _144106 P z _107783 _107784 _107785).
Proof. exact (eq_refl (term660 _144105 _144106 P z _107783 _107784 _107785)). Qed.
Lemma lem8139746 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107783 c e _107784 _107785) = (term661 _144105 _144106 _144138 _144141 P z _107783 c e p _107784 _107785).
Proof. exact (MK_COMB (@lem8139745 _144105 _144106 P z _107783 _107784 _107785) (@lem8139737 _144105 _144106 _144138 _144141 P _107783 c e p _107784 _107785)). Qed.
Lemma lem8139750 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139751 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term661 _144105 _144106 _144138 _144141 P z _107783 c e p _107784 _107785) = (term662 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (@lem8139750 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term539 _144105 _144106 P z _107783 _107784 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139771 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107783 c e _107784 _107785) = (term662 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139746 _144105 _144106 _144138 _144141 P z _107783 c e p _107784 _107785) (@lem8139751 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139772 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term662 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139720 _144105 _144106 _144138 _144141 P z p _107783 c e _107784 _107785) (@lem8139771 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139773 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139774 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term663 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139773 _144105 _144106 P p _107783 _107785) (@lem8139772 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139778 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139779 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) = (term664 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (@lem8139778 ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) (term551 _144105 _144106 P p _107783 _107785) (term665 _144105 _144106 P z _107783 p _107784 _107785)). Qed.
Lemma lem8139795 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139796 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term666 _144105 _144106 P z _107783 p _107784 _107785) = (term667 _144105 _144106 P z _107783 p _107784 _107785).
Proof. exact (@lem8139795 (term539 _144105 _144106 P z _107783 _107784 _107785) (term551 _144105 _144106 P p _107783 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139814 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) = (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139815 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term664 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139814 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) (@lem8139796 _144105 _144106 P z _107783 p _107784 _107785)). Qed.
Lemma lem8139826 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139779 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) (@lem8139815 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139827 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139774 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) (@lem8139826 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139828 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8139829 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term669 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term670 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139828) (@lem8139827 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139855 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139856 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term574 _144105 _144106 P p z _107783 _107784 _107785) = (term665 _144105 _144106 P z _107783 p _107784 _107785).
Proof. exact (@lem8139855 (term539 _144105 _144106 P z _107783 _107784 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139864 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term552 _144105 _144106 P p _107783 _107785) = (term552 _144105 _144106 P p _107783 _107785).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139865 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term579 _144105 _144106 P p z _107783 _107784 _107785) = (term666 _144105 _144106 P z _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139864 _144105 _144106 P p _107783 _107785) (@lem8139856 _144105 _144106 P z _107783 p _107784 _107785)). Qed.
Lemma lem8139869 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139870 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term666 _144105 _144106 P z _107783 p _107784 _107785) = (term667 _144105 _144106 P z _107783 p _107784 _107785).
Proof. exact (@lem8139869 (term539 _144105 _144106 P z _107783 _107784 _107785) (term551 _144105 _144106 P p _107783 _107785) (term551 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139888 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term579 _144105 _144106 P p z _107783 _107784 _107785) = (term667 _144105 _144106 P z _107783 p _107784 _107785).
Proof. exact (TRANS (@lem8139865 _144105 _144106 P z _107783 p _107784 _107785) (@lem8139870 _144105 _144106 P z _107783 p _107784 _107785)). Qed.
Lemma lem8139889 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) = (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139890 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785).
Proof. exact (MK_COMB (@lem8139889 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785) (@lem8139888 _144105 _144106 P z _107783 p _107784 _107785)). Qed.
Lemma lem8139901 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785)) = ((term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)).
Proof. exact (MK_COMB (@lem8139829 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) (@lem8139890 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139903 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8139904 (x : Prop) : (x = x) = True.
Proof. exact (@lem8139903 Prop x). Qed.
Lemma lem8139905 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) = (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)) = True.
Proof. exact (@lem8139904 (term668 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139906 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785)) = True.
Proof. exact (TRANS (@lem8139901 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785) (@lem8139905 _144105 _144106 _144138 _144141 P c e z _107783 p _107784 _107785)). Qed.
Lemma lem8139907 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : True = ((term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785)).
Proof. exact (SYM (@lem8139906 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785)). Qed.
Lemma lem8139908 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785).
Proof. exact (EQ_MP (@lem8139907 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785) (@lem0)). Qed.
Lemma lem8139909 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785.
Proof. exact (EQ_MP (@lem8139908 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785) (@lem8139047 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139911 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8139912 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785) = (term672 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (@lem8139911 (term579 _144105 _144106 P p z _107783 _107784 _107785) ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139914 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8139915 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term673 _144105 _144106 P p z _107783 _107784 _107785) = (term674 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (@lem8139914 (term551 _144105 _144106 P p _107783 _107785) (term574 _144105 _144106 P p z _107783 _107784 _107785)). Qed.
Lemma lem8139917 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139918 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term637 _144105 _144106 P p _107783 _107785) = (term503 _144105 _144106 P p _107783 _107785).
Proof. exact (@lem8139917 (term503 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139919 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8139920 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107785 : P) : (term638 _144105 _144106 P p _107783 _107785) = (term639 _144105 _144106 P p _107783 _107785).
Proof. exact (MK_COMB (@lem8139919) (@lem8139918 _144105 _144106 P p _107783 _107785)). Qed.
Lemma lem8139922 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8139923 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term675 _144105 _144106 P p z _107783 _107784 _107785) = (term676 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (@lem8139922 (term551 _144105 _144106 P p _107784 _107785) (term539 _144105 _144106 P z _107783 _107784 _107785)). Qed.
Lemma lem8139925 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139926 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term637 _144105 _144106 P p _107784 _107785) = (term503 _144105 _144106 P p _107784 _107785).
Proof. exact (@lem8139925 (term503 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139927 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8139928 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term638 _144105 _144106 P p _107784 _107785) = (term639 _144105 _144106 P p _107784 _107785).
Proof. exact (MK_COMB (@lem8139927) (@lem8139926 _144105 _144106 P p _107784 _107785)). Qed.
Lemma lem8139930 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8139931 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term677 _144105 _144106 P z _107783 _107784 _107785) = ((term532 _144105 _144106 P z _107783 _107784 _107785) = (term535 _144105 _144106 P z _107783 _107784 _107785)).
Proof. exact (@lem8139930 ((term532 _144105 _144106 P z _107783 _107784 _107785) = (term535 _144105 _144106 P z _107783 _107784 _107785))). Qed.
Lemma lem8139932 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term676 _144105 _144106 P p z _107783 _107784 _107785) = (term678 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (MK_COMB (@lem8139928 _144105 _144106 P p _107784 _107785) (@lem8139931 _144105 _144106 P z _107783 _107784 _107785)). Qed.
Lemma lem8139933 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term675 _144105 _144106 P p z _107783 _107784 _107785) = (term678 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (TRANS (@lem8139923 _144105 _144106 P p z _107783 _107784 _107785) (@lem8139932 _144105 _144106 P p z _107783 _107784 _107785)). Qed.
Lemma lem8139934 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term674 _144105 _144106 P p z _107783 _107784 _107785) = (term679 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (MK_COMB (@lem8139920 _144105 _144106 P p _107783 _107785) (@lem8139933 _144105 _144106 P p z _107783 _107784 _107785)). Qed.
Lemma lem8139935 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term673 _144105 _144106 P p z _107783 _107784 _107785) = (term679 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (TRANS (@lem8139915 _144105 _144106 P p z _107783 _107784 _107785) (@lem8139934 _144105 _144106 P p z _107783 _107784 _107785)). Qed.
Lemma lem8139936 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8139937 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) : (term680 _144105 _144106 P p z _107783 _107784 _107785) = (term681 _144105 _144106 P p z _107783 _107784 _107785).
Proof. exact (MK_COMB (@lem8139936) (@lem8139935 _144105 _144106 P p z _107783 _107784 _107785)). Qed.
Lemma lem8139938 {_144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)) = ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e _107783 _107785) = (term520 _144105 _144106 _144138 _144141 P c e _107784 _107785))). Qed.
Lemma lem8139939 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term672 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) = (term682 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (MK_COMB (@lem8139937 _144105 _144106 P p z _107783 _107784 _107785) (@lem8139938 _144105 _144106 _144138 _144141 P _107783 c e _107784 _107785)). Qed.
Lemma lem8139940 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107783 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107784 : _144105 -> _144106) (_107785 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107783 _107784 _107785) = (term682 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785).
Proof. exact (TRANS (@lem8139912 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) (@lem8139939 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785)). Qed.
Lemma lem8139942 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term678 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8139359 _144105 _144106 P p g a h5) (@lem8139703 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8139943 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term679 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8139352 _144105 _144106 P p f a h4) (@lem8139942 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8139945 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785.
Proof. exact (EQ_MP (@lem8139940 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785) (@lem8139909 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1)). Qed.
Lemma lem8139946 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107783 : _144105 -> _144106) (_107784 : _144105 -> _144106) (_107785 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107783 c e _107784 _107785.
Proof. exact (@lem8139945 _144104 _144105 _144106 _144138 _144141 P _107783 _107784 _107785 p lt2 s z c e h1). Qed.
Lemma lem8139947 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z f c e g a.
Proof. exact (@lem8139946 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8139950 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8139947 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h2 (@lem8139943 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8139951 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term683 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term607 _144105 _144106 _144138 _144141 P f c e g a => @lem8139950 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h3 h4). Qed.
Lemma lem8139953 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139954 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term683 _144105 _144106 _144138 _144141 P f c e g a) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8139953 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8139955 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8139954 _144105 _144106 _144138 _144141 P f c e g a) (@lem8139951 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8139957 {_144138 : Type'} (x : type684 _144138) : x = x.
Proof. exact (@lem21386 (type684 _144138) x). Qed.
Lemma lem8139958 {_144138 : Type'} (x : type684 _144138) : x = x.
Proof. exact (@lem8139957 _144138 x). Qed.
Lemma lem8139959 {_144138 : Type'} : (@ε _144138) = (@ε _144138).
Proof. exact (@lem8139958 _144138 (@ε _144138)). Qed.
Lemma lem8139960 {_144138 : Type'} : term684 _144138.
Proof. exact (fun h0 : term685 _144138 => @lem8139959 _144138). Qed.
Lemma lem8139962 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8139963 {_144138 : Type'} : (term684 _144138) = ((@ε _144138) = (@ε _144138)).
Proof. exact (@lem8139962 ((@ε _144138) = (@ε _144138))). Qed.
Lemma lem8139964 {_144138 : Type'} : (@ε _144138) = (@ε _144138).
Proof. exact (EQ_MP (@lem8139963 _144138) (@lem8139960 _144138)). Qed.
Lemma lem8139982 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8139983 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term602 _144138 _107813 _107814 _107815 _107816) = (term686 _144138 _107814 _107816 _107813 _107815).
Proof. exact (@lem8139982 ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816)) (term687 _144138 _107813 _107815)). Qed.
Lemma lem8139993 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) : (term688 _144138 _107814 _107816) = (term688 _144138 _107814 _107816).
Proof. exact (eq_refl (term688 _144138 _107814 _107816)). Qed.
Lemma lem8139994 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term604 _144138 _107813 _107814 _107815 _107816) = (term689 _144138 _107814 _107816 _107813 _107815).
Proof. exact (MK_COMB (@lem8139993 _144138 _107814 _107816) (@lem8139983 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8139998 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8139999 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term689 _144138 _107814 _107816 _107813 _107815) = (term690 _144138 _107814 _107816 _107813 _107815).
Proof. exact (@lem8139998 ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816)) (term691 _144138 _107814 _107816) (term687 _144138 _107813 _107815)). Qed.
Lemma lem8140021 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term604 _144138 _107813 _107814 _107815 _107816) = (term690 _144138 _107814 _107816 _107813 _107815).
Proof. exact (TRANS (@lem8139994 _144138 _107814 _107816 _107813 _107815) (@lem8139999 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140022 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8140023 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term692 _144138 _107813 _107814 _107815 _107816) = (term693 _144138 _107814 _107816 _107813 _107815).
Proof. exact (MK_COMB (@lem8140022) (@lem8140021 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140045 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term690 _144138 _107814 _107816 _107813 _107815) = (term690 _144138 _107814 _107816 _107813 _107815).
Proof. exact (eq_refl (term690 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140046 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : ((term604 _144138 _107813 _107814 _107815 _107816) = (term690 _144138 _107814 _107816 _107813 _107815)) = ((term690 _144138 _107814 _107816 _107813 _107815) = (term690 _144138 _107814 _107816 _107813 _107815)).
Proof. exact (MK_COMB (@lem8140023 _144138 _107814 _107816 _107813 _107815) (@lem8140045 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140048 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8140049 (x : Prop) : (x = x) = True.
Proof. exact (@lem8140048 Prop x). Qed.
Lemma lem8140050 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : ((term690 _144138 _107814 _107816 _107813 _107815) = (term690 _144138 _107814 _107816 _107813 _107815)) = True.
Proof. exact (@lem8140049 (term690 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140051 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : ((term604 _144138 _107813 _107814 _107815 _107816) = (term690 _144138 _107814 _107816 _107813 _107815)) = True.
Proof. exact (TRANS (@lem8140046 _144138 _107814 _107816 _107813 _107815) (@lem8140050 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140052 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : True = ((term604 _144138 _107813 _107814 _107815 _107816) = (term690 _144138 _107814 _107816 _107813 _107815)).
Proof. exact (SYM (@lem8140051 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140053 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term604 _144138 _107813 _107814 _107815 _107816) = (term690 _144138 _107814 _107816 _107813 _107815).
Proof. exact (EQ_MP (@lem8140052 _144138 _107814 _107816 _107813 _107815) (@lem0)). Qed.
Lemma lem8140054 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : term690 _144138 _107814 _107816 _107813 _107815.
Proof. exact (EQ_MP (@lem8140053 _144138 _107814 _107816 _107813 _107815) (@lem8139164 _144138 _107813 _107814 _107815 _107816)). Qed.
Lemma lem8140056 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8140057 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : (term690 _144138 _107814 _107816 _107813 _107815) = (term694 _144138 _107813 _107814 _107815 _107816).
Proof. exact (@lem8140056 (term695 _144138 _107814 _107816 _107813 _107815) ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816))). Qed.
Lemma lem8140059 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8140060 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term696 _144138 _107814 _107816 _107813 _107815) = (term697 _144138 _107814 _107816 _107813 _107815).
Proof. exact (@lem8140059 (term691 _144138 _107814 _107816) (term687 _144138 _107813 _107815)). Qed.
Lemma lem8140062 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8140063 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) : (term698 _144138 _107814 _107816) = (_107814 = _107816).
Proof. exact (@lem8140062 (_107814 = _107816)). Qed.
Lemma lem8140064 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8140065 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) : (term699 _144138 _107814 _107816) = (term700 _144138 _107814 _107816).
Proof. exact (MK_COMB (@lem8140064) (@lem8140063 _144138 _107814 _107816)). Qed.
Lemma lem8140067 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8140068 {_144138 : Type'} (_107813 : type684 _144138) (_107815 : type684 _144138) : (term701 _144138 _107813 _107815) = (_107813 = _107815).
Proof. exact (@lem8140067 (_107813 = _107815)). Qed.
Lemma lem8140069 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term697 _144138 _107814 _107816 _107813 _107815) = (term702 _144138 _107814 _107816 _107813 _107815).
Proof. exact (MK_COMB (@lem8140065 _144138 _107814 _107816) (@lem8140068 _144138 _107813 _107815)). Qed.
Lemma lem8140070 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term696 _144138 _107814 _107816 _107813 _107815) = (term702 _144138 _107814 _107816 _107813 _107815).
Proof. exact (TRANS (@lem8140060 _144138 _107814 _107816 _107813 _107815) (@lem8140069 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140071 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140072 {_144138 : Type'} (_107814 : _144138 -> Prop) (_107816 : _144138 -> Prop) (_107813 : type684 _144138) (_107815 : type684 _144138) : (term703 _144138 _107814 _107816 _107813 _107815) = (term704 _144138 _107814 _107816 _107813 _107815).
Proof. exact (MK_COMB (@lem8140071) (@lem8140070 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140073 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816)) = ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816)).
Proof. exact (eq_refl ((@I ((_144138 -> Prop) -> _144138) _107813 _107814) = (@I ((_144138 -> Prop) -> _144138) _107815 _107816))). Qed.
Lemma lem8140074 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : (term694 _144138 _107813 _107814 _107815 _107816) = (term705 _144138 _107813 _107814 _107815 _107816).
Proof. exact (MK_COMB (@lem8140072 _144138 _107814 _107816 _107813 _107815) (@lem8140073 _144138 _107813 _107814 _107815 _107816)). Qed.
Lemma lem8140075 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : (term690 _144138 _107814 _107816 _107813 _107815) = (term705 _144138 _107813 _107814 _107815 _107816).
Proof. exact (TRANS (@lem8140057 _144138 _107813 _107814 _107815 _107816) (@lem8140074 _144138 _107813 _107814 _107815 _107816)). Qed.
Lemma lem8140077 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term706 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (conj (@lem8139955 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4) (@lem8139964 _144138)). Qed.
Lemma lem8140079 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : term705 _144138 _107813 _107814 _107815 _107816.
Proof. exact (EQ_MP (@lem8140075 _144138 _107813 _107814 _107815 _107816) (@lem8140054 _144138 _107814 _107816 _107813 _107815)). Qed.
Lemma lem8140080 {_144138 : Type'} (_107813 : type684 _144138) (_107814 : _144138 -> Prop) (_107815 : type684 _144138) (_107816 : _144138 -> Prop) : term705 _144138 _107813 _107814 _107815 _107816.
Proof. exact (@lem8140079 _144138 _107813 _107814 _107815 _107816). Qed.
Lemma lem8140081 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term707 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8140080 _144138 (@ε _144138) (term520 _144105 _144106 _144138 _144141 P c e f a) (@ε _144138) (term520 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8140084 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8140081 _144105 _144106 _144138 _144141 P f c e g a (@lem8140077 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8140085 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term708 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term525 _144105 _144106 _144138 _144141 P f c e g a => @lem8140084 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4). Qed.
Lemma lem8140087 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8140088 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term708 _144105 _144106 _144138 _144141 P f c e g a) = ((term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8140087 ((term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8140089 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8140088 _144105 _144106 _144138 _144141 P f c e g a) (@lem8140085 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8140092 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8140094 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term525 _144105 _144106 _144138 _144141 P f c e g a) = (term709 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8140092 ((term522 _144105 _144106 _144138 _144141 P c e f a) = (term522 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8140097 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term196 _144105 _144106 _144138 _144141 P f c e g a) : term709 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8140094 _144105 _144106 _144138 _144141 P f c e g a) (@lem8138975 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8140100 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : False.
Proof. exact (@lem8140097 _144105 _144106 _144138 _144141 P f c e g a h3 (@lem8140089 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h4 h5)). Qed.
Lemma lem8140101 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term710.
Proof. exact (fun h0 : ~ False => @lem8140100 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8140103 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8140104 : term710 = False.
Proof. exact (@lem8140103 False). Qed.
Lemma lem8140105 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : False.
Proof. exact (EQ_MP (@lem8140104) (@lem8140101 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8140106 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (ex_elim (@lem8137598 _144104 _144105 _144106 _144141 P p lt2 s e h2) (fun z' : type518 _144105 _144106 P => fun h0 : term411 _144104 _144105 _144106 _144141 P p lt2 s e z' => @lem8140105 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h3 h4 h5 h6)). Qed.
Lemma lem8140107 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (ex_elim (@lem8137924 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h3) (fun z : type518 _144105 _144106 P => fun h0 : term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z => @lem8140106 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h4 h5 h6)). Qed.
Lemma lem8140108 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : (term196 _144105 _144106 _144138 _144141 P f c e g a) = False.
Proof. exact (prop_ext (fun h7 : term196 _144105 _144106 _144138 _144141 P f c e g a => @lem8140107 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : False => @lem8138017 _144105 _144106 _144138 _144141 P f c e g a h4)). Qed.
Lemma lem8140109 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8140108 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8138017 _144105 _144106 _144138 _144141 P f c e g a h4)). Qed.
Lemma lem8140110 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : (p g a) = False.
Proof. exact (prop_ext (fun h7 : p g a => @lem8140109 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : False => @lem8137936 _144105 _144106 P p g a h6)). Qed.
Lemma lem8140111 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8140110 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8137936 _144105 _144106 P p g a h6)). Qed.
Lemma lem8140112 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : (p f a) = False.
Proof. exact (prop_ext (fun h7 : p f a => @lem8140111 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : False => @lem8137930 _144105 _144106 P p f a h5)). Qed.
Lemma lem8140113 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8140112 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8137930 _144105 _144106 P p f a h5)). Qed.
Lemma lem8140114 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : (term196 _144105 _144106 _144138 _144141 P f c e g a) = False.
Proof. exact (prop_ext (fun h7 : term196 _144105 _144106 _144138 _144141 P f c e g a => @lem8140113 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : False => @lem8137272 _144105 _144106 _144138 _144141 P f c e g a h4)). Qed.
Lemma lem8140115 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8140114 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8137272 _144105 _144106 _144138 _144141 P f c e g a h4)). Qed.
Lemma lem8140116 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term195 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term196 _144105 _144106 _144138 _144141 P f c e g a => @lem8140115 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h0 h4 h5). Qed.
Lemma lem8140117 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8137271 _144105 _144106 _144138 _144141 P f c e g a) (@lem8140116 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8140118 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term172 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8140117 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8140119 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term205 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e f a => @lem8140118 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8140120 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term208 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (fun h0 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8140119 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h0 h1 h2 h3 h4). Qed.
Lemma lem8140121 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term211 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : p g a => @lem8140120 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h0). Qed.
Lemma lem8140122 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term213 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : p f a => @lem8140121 _144104 _144105 _144106 _144138 _144141 P g lt2 s c e p f a h1 h2 h0). Qed.
Lemma lem8140123 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term216 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8140122 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s c e h1 h0). Qed.
Lemma lem8140124 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term218 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8140123 _144104 _144105 _144106 _144138 _144141 P f c g a p lt2 s e h0). Qed.
Lemma lem8140129 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term222 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (fun p : type560 _144105 _144106 P => @lem8140124 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8140134 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term226 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (fun lt2 : type1470 _144104 _144105 => @lem8140129 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a). Qed.
Lemma lem8140139 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term230 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun s : P -> _144104 => @lem8140134 _144104 _144105 _144106 _144138 _144141 P s f c e g a). Qed.
Lemma lem8140144 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term234 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun f : _144105 -> _144106 => @lem8140139 _144104 _144105 _144106 _144138 _144141 P f c e g a). Qed.
Lemma lem8140149 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term238 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8140144 _144104 _144105 _144106 _144138 _144141 P c e g a). Qed.
Lemma lem8140154 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term242 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (fun e : type564 _144105 _144106 _144141 P => @lem8140149 _144104 _144105 _144106 _144138 _144141 P e g a). Qed.
Lemma lem8140159 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term246 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (fun g : _144105 -> _144106 => @lem8140154 _144104 _144105 _144106 _144138 _144141 P g a). Qed.
Lemma lem8140164 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term250 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (fun a : P => @lem8140159 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8140165 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term249 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (EQ_MP (@lem8137260 _144104 _144105 _144106 _144138 _144141 P) (@lem8140164 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8140166 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term711 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (@lem8140165 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8140167 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term711 _144104 _144105 _144106 _144138 _144141 P a) = (term245 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (eq_refl (term711 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140168 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term245 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (EQ_MP (@lem8140167 _144104 _144105 _144106 _144138 _144141 P a) (@lem8140166 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140169 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) (g : _144105 -> _144106) : term712 _144104 _144105 _144106 _144138 _144141 P a g.
Proof. exact (@lem8140168 _144104 _144105 _144106 _144138 _144141 P a g). Qed.
Lemma lem8140170 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term712 _144104 _144105 _144106 _144138 _144141 P a g) = (term241 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (eq_refl (term712 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8140171 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term241 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (EQ_MP (@lem8140170 _144104 _144105 _144106 _144138 _144141 P g a) (@lem8140169 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8140172 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) (e : type564 _144105 _144106 _144141 P) : term713 _144104 _144105 _144106 _144138 _144141 P g a e.
Proof. exact (@lem8140171 _144104 _144105 _144106 _144138 _144141 P g a e). Qed.
Lemma lem8140173 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term713 _144104 _144105 _144106 _144138 _144141 P g a e) = (term237 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (eq_refl (term713 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8140174 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term237 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (EQ_MP (@lem8140173 _144104 _144105 _144106 _144138 _144141 P e g a) (@lem8140172 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8140175 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (c : type566 _144105 _144106 _144138 _144141 P) : term714 _144104 _144105 _144106 _144138 _144141 P e g a c.
Proof. exact (@lem8140174 _144104 _144105 _144106 _144138 _144141 P e g a c). Qed.
Lemma lem8140176 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term714 _144104 _144105 _144106 _144138 _144141 P e g a c) = (term233 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term714 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8140177 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term233 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8140176 _144104 _144105 _144106 _144138 _144141 P c e g a) (@lem8140175 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8140178 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (f : _144105 -> _144106) : term715 _144104 _144105 _144106 _144138 _144141 P c e g a f.
Proof. exact (@lem8140177 _144104 _144105 _144106 _144138 _144141 P c e g a f). Qed.
Lemma lem8140179 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term715 _144104 _144105 _144106 _144138 _144141 P c e g a f) = (term229 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (eq_refl (term715 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8140180 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term229 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8140179 _144104 _144105 _144106 _144138 _144141 P f c e g a) (@lem8140178 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8140181 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (s : P -> _144104) : term716 _144104 _144105 _144106 _144138 _144141 P f c e g a s.
Proof. exact (@lem8140180 _144104 _144105 _144106 _144138 _144141 P f c e g a s). Qed.
Lemma lem8140182 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term716 _144104 _144105 _144106 _144138 _144141 P f c e g a s) = (term225 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (eq_refl (term716 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8140183 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term225 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (EQ_MP (@lem8140182 _144104 _144105 _144106 _144138 _144141 P s f c e g a) (@lem8140181 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8140184 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (lt2 : type1470 _144104 _144105) : term717 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2.
Proof. exact (@lem8140183 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2). Qed.
Lemma lem8140185 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term717 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2) = (term221 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (eq_refl (term717 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8140186 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term221 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8140185 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) (@lem8140184 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8140187 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) : term718 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p.
Proof. exact (@lem8140186 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p). Qed.
Lemma lem8140188 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term718 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p) = (term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term718 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8140189 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8140188 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8140187 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8140191 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term197 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8136811 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8140189 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8140192 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term215 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8140191 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8140193 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term212 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8140192 _144104 _144105 _144106 _144138 _144141 P f c g a p lt2 s e h1 (@lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8140194 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term210 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8140193 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s c e h1 h2 (@lem8136632 _144105 _144106 P p f a h3)). Qed.
Lemma lem8140195 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term207 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (@lem8140194 _144104 _144105 _144106 _144138 _144141 P g lt2 s c e p f a h1 h2 h3 (@lem8136634 _144105 _144106 P p g a h4)). Qed.
Lemma lem8140196 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term204 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8140195 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h2 h3 h4 h5 (@lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8140197 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term203 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8140196 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h5 h6 (@lem8136653 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8140198 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term195 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8140197 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h6 h7 (@lem8136705 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8140199 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (@lem8140198 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h7 h8 (@lem8136795 _144105 _144106 _144138 _144141 P f c e g a h6)). Qed.
Lemma lem8140200 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h7 : p f a) (h8 : p g a) : (term196 _144105 _144106 _144138 _144141 P f c e g a) = False.
Proof. exact (prop_ext (fun h9 : term196 _144105 _144106 _144138 _144141 P f c e g a => @lem8140199 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (fun h9 : False => @lem8136795 _144105 _144106 _144138 _144141 P f c e g a h6)). Qed.
Lemma lem8140201 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : term196 _144105 _144106 _144138 _144141 P f c e g a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (EQ_MP (@lem8140200 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (@lem8136795 _144105 _144106 _144138 _144141 P f c e g a h6)). Qed.
Lemma lem8140202 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term195 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term196 _144105 _144106 _144138 _144141 P f c e g a => @lem8140201 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h0 h6 h7). Qed.
Lemma lem8140205 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8140206 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138)) = (term719 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8140205 ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138))). Qed.
Lemma lem8140207 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term719 _144105 _144106 _144138 _144141 P c e f a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138)).
Proof. exact (SYM (@lem8140206 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140208 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term720 _144105 _144106 _144138 _144141 P c e f a) : term720 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (h1). Qed.
Lemma lem8140225 {_144138 : Type'} (P : _144138 -> Prop) : term721 _144138 P.
Proof. exact (@lem19732 _144138 P). Qed.
Lemma lem8140226 {_144138 : Type'} : term722 _144138.
Proof. exact (@lem8140225 _144138 (term723 _144138)). Qed.
Lemma lem8140227 {_144138 : Type'} : (term724 _144138) = False.
Proof. exact (eq_refl (term724 _144138)). Qed.
Lemma lem8140228 {_144138 : Type'} (x : _144138) : (term725 _144138 x) = False.
Proof. exact (eq_refl (term725 _144138 x)). Qed.
Lemma lem8140229 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140230 {_144138 : Type'} (x : _144138) : (term726 _144138 x) = (imp False).
Proof. exact (MK_COMB (@lem8140229) (@lem8140228 _144138 x)). Qed.
Lemma lem8140231 {_144138 : Type'} (x : _144138) : (term727 _144138 x) = (False -> False).
Proof. exact (MK_COMB (@lem8140230 _144138 x) (@lem8140227 _144138)). Qed.
Lemma lem8140232 {_144138 : Type'} : (term728 _144138) = (term729 _144138).
Proof. exact (fun_ext (fun x : _144138 => @lem8140231 _144138 x)). Qed.
Lemma lem8140233 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8140234 {_144138 : Type'} : (term722 _144138) = (term730 _144138).
Proof. exact (MK_COMB (@lem8140233 _144138) (@lem8140232 _144138)). Qed.
Lemma lem8140235 {_144138 : Type'} : term730 _144138.
Proof. exact (EQ_MP (@lem8140234 _144138) (@lem8140226 _144138)). Qed.
Lemma lem8140236 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140237 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140236 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h1 (@lem8140235 _144138)). Qed.
Lemma lem8140238 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term733 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140237 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h0). Qed.
Lemma lem8140239 {_144138 : Type'} (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : _107853 = (term147 _144138).
Proof. exact (h1). Qed.
Lemma lem8140242 {_144138 : Type'} (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term147 _144138) = _107853.
Proof. exact (SYM (@lem8140239 _144138 _107853 h1)). Qed.
Lemma lem8140243 {_144138 : Type'} (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term147 _144138) = _107853.
Proof. exact (@lem8140242 _144138 _107853 h1). Qed.
Lemma lem8140244 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term523 _144105 _144106 _144138 _144141 P c e f a) = (term523 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term523 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140245 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138)) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853).
Proof. exact (MK_COMB (@lem8140244 _144105 _144106 _144138 _144141 P c e f a) (@lem8140243 _144138 _107853 h1)). Qed.
Lemma lem8140246 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8140247 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term720 _144105 _144106 _144138 _144141 P c e f a) = (term734 _144105 _144106 _144138 _144141 P c e f a _107853).
Proof. exact (MK_COMB (@lem8140246) (@lem8140245 _144105 _144106 _144138 _144141 P c e f a _107853 h1)). Qed.
Lemma lem8140248 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140249 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term735 _144105 _144106 _144138 _144141 P c e f a) = (term736 _144105 _144106 _144138 _144141 P c e f a _107853).
Proof. exact (MK_COMB (@lem8140248) (@lem8140247 _144105 _144106 _144138 _144141 P c e f a _107853 h1)). Qed.
Lemma lem8140250 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8140251 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term719 _144105 _144106 _144138 _144141 P c e f a) = (term737 _144105 _144106 _144138 _144141 P c e f a _107853).
Proof. exact (MK_COMB (@lem8140249 _144105 _144106 _144138 _144141 P c e f a _107853 h1) (@lem8140250)). Qed.
Lemma lem8140252 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8140253 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term738 _144105 _144106 _144138 _144141 P g c e f a) = (term739 _144105 _144106 _144138 _144141 P g c e f a _107853).
Proof. exact (MK_COMB (@lem8140252 _144105 _144106 _144138 _144141 P c e g a) (@lem8140251 _144105 _144106 _144138 _144141 P c e f a _107853 h1)). Qed.
Lemma lem8140254 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e f a) = (term153 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140255 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term740 _144105 _144106 _144138 _144141 P g c e f a) = (term741 _144105 _144106 _144138 _144141 P g c e f a _107853).
Proof. exact (MK_COMB (@lem8140254 _144105 _144106 _144138 _144141 P c e f a) (@lem8140253 _144105 _144106 _144138 _144141 P g c e f a _107853 h1)). Qed.
Lemma lem8140256 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140257 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term742 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) = (term743 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140256 _144104 _144105 _144106 P lt2 s a f g) (@lem8140255 _144105 _144106 _144138 _144141 P g c e f a _107853 h1)). Qed.
Lemma lem8140258 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8140259 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term744 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term745 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140258 _144105 _144106 P p g a) (@lem8140257 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140260 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8140261 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term746 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term747 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140260 _144105 _144106 P p f a) (@lem8140259 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140262 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8140263 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term748 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term749 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140262 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8140261 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140264 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8140265 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term750 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140264 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8140263 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140266 {_144138 : Type'} : (term751 _144138) = (term751 _144138).
Proof. exact (eq_refl (term751 _144138)). Qed.
Lemma lem8140267 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140266 _144138) (@lem8140265 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140268 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140269 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term754 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (@lem8140268 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h1 _107853). Qed.
Lemma lem8140270 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term754 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (eq_refl (term754 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140271 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (EQ_MP (@lem8140270 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) (@lem8140269 _144104 _144105 _144106 _144138 _144141 P _107853 p lt2 s g c e f a h1)). Qed.
Lemma lem8140272 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : (term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (SYM (@lem8140267 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140273 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (h2 : _107853 = (term147 _144138)) : term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (EQ_MP (@lem8140272 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h2) (@lem8140271 _144104 _144105 _144106 _144138 _144141 P _107853 p lt2 s g c e f a h1)). Qed.
Lemma lem8140274 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : term755 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140273 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h0 h1). Qed.
Lemma lem8140275 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term756 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem51 (term731 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140276 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : term757 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140275 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8140274 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1)). Qed.
Lemma lem8140277 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (h1 : _107853 = (term147 _144138)) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140276 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h1 (@lem8140238 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140278 {_144138 : Type'} : (term147 _144138) = (term147 _144138).
Proof. exact (eq_refl (term147 _144138)). Qed.
Lemma lem8140279 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term759 _144104 _144105 _144106 _144138 _144141 P _107853 p lt2 s g c e f a.
Proof. exact (fun h0 : _107853 = (term147 _144138) => @lem8140277 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853 h0). Qed.
Lemma lem8140280 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term760 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140279 _144104 _144105 _144106 _144138 _144141 P (term147 _144138) p lt2 s g c e f a). Qed.
Lemma lem8140281 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140280 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8140278 _144138)). Qed.
Lemma lem8140282 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140283 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term761 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140282 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h0). Qed.
Lemma lem8140284 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term762 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem51 (term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140285 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term763 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140284 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8140283 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140286 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140285 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8140281 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140287 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140288 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140289 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (h2 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140287 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h2 (@lem8140288 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h1)). Qed.
Lemma lem8140290 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term764 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140289 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h1 h0). Qed.
Lemma lem8140291 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (h1). Qed.
Lemma lem8140292 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (h2 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140290 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h1 (@lem8140291 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h2)). Qed.
Lemma lem8140293 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140292 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h0 h1). Qed.
Lemma lem8140294 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term763 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun h0 : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a => @lem8140293 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a h0). Qed.
Lemma lem8140297 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140294 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8140286 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140298 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term758 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140297 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a). Qed.
Lemma lem8140338 {A : Type'} (t : Prop) : (term765 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8140339 {_144138 : Type'} (t : Prop) : (term765 _144138 t) = t.
Proof. exact (@lem8140338 _144138 t). Qed.
Lemma lem8140340 {_144138 : Type'} : (term730 _144138) = (False -> False).
Proof. exact (@lem8140339 _144138 (False -> False)). Qed.
Lemma lem8140342 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem16473 t)). Qed.
Lemma lem8140343 : (False -> False) = True.
Proof. exact (@lem8140342 False). Qed.
Lemma lem8140344 {_144138 : Type'} : (term730 _144138) = True.
Proof. exact (TRANS (@lem8140340 _144138) (@lem8140343)). Qed.
Lemma lem8140345 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140346 {_144138 : Type'} : (term751 _144138) = (imp True).
Proof. exact (MK_COMB (@lem8140345) (@lem8140344 _144138)). Qed.
Lemma lem8140416 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8140417 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term737 _144105 _144106 _144138 _144141 P c e f a _107853) = (term766 _144105 _144106 _144138 _144141 P c e f a _107853).
Proof. exact (@lem8140416 (term734 _144105 _144106 _144138 _144141 P c e f a _107853)). Qed.
Lemma lem8140419 (t : Prop) : (term202 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8140420 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term766 _144105 _144106 _144138 _144141 P c e f a _107853) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853).
Proof. exact (@lem8140419 ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853)). Qed.
Lemma lem8140421 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term737 _144105 _144106 _144138 _144141 P c e f a _107853) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853).
Proof. exact (TRANS (@lem8140417 _144105 _144106 _144138 _144141 P c e f a _107853) (@lem8140420 _144105 _144106 _144138 _144141 P c e f a _107853)). Qed.
Lemma lem8140422 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8140423 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term739 _144105 _144106 _144138 _144141 P g c e f a _107853) = (term767 _144105 _144106 _144138 _144141 P g c e f a _107853).
Proof. exact (MK_COMB (@lem8140422 _144105 _144106 _144138 _144141 P c e g a) (@lem8140421 _144105 _144106 _144138 _144141 P c e f a _107853)). Qed.
Lemma lem8140426 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e f a) = (term153 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140427 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term741 _144105 _144106 _144138 _144141 P g c e f a _107853) = (term768 _144105 _144106 _144138 _144141 P g c e f a _107853).
Proof. exact (MK_COMB (@lem8140426 _144105 _144106 _144138 _144141 P c e f a) (@lem8140423 _144105 _144106 _144138 _144141 P g c e f a _107853)). Qed.
Lemma lem8140430 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140431 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term743 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853) = (term769 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140430 _144104 _144105 _144106 P lt2 s a f g) (@lem8140427 _144105 _144106 _144138 _144141 P g c e f a _107853)). Qed.
Lemma lem8140434 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8140435 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term745 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term770 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140434 _144105 _144106 P p g a) (@lem8140431 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853)). Qed.
Lemma lem8140438 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8140439 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term747 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term771 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140438 _144105 _144106 P p f a) (@lem8140435 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140442 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8140443 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term749 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term772 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140442 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8140439 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140446 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8140447 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term750 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140446 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8140443 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140450 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term774 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140346 _144138) (@lem8140447 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140452 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8140453 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term774 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (@lem8140452 (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140522 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term752 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (TRANS (@lem8140450 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) (@lem8140453 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140523 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term775 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term776 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (fun_ext (fun _107853 : _144138 => @lem8140522 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140524 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8140525 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term777 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (MK_COMB (@lem8140524 _144138) (@lem8140523 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140530 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term778 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) = (term779 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8140525 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140531 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8140532 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term780 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) = (term781 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a).
Proof. exact (MK_COMB (@lem8140531 _144105 _144106 P) (@lem8140530 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a)). Qed.
Lemma lem8140537 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term782 _144104 _144105 _144106 _144138 _144141 P s g c e f a) = (term783 _144104 _144105 _144106 _144138 _144141 P s g c e f a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8140532 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a)). Qed.
Lemma lem8140538 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8140539 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term784 _144104 _144105 _144106 _144138 _144141 P s g c e f a) = (term785 _144104 _144105 _144106 _144138 _144141 P s g c e f a).
Proof. exact (MK_COMB (@lem8140538 _144104 _144105) (@lem8140537 _144104 _144105 _144106 _144138 _144141 P s g c e f a)). Qed.
Lemma lem8140544 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term786 _144104 _144105 _144106 _144138 _144141 P g c e f a) = (term787 _144104 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8140539 _144104 _144105 _144106 _144138 _144141 P s g c e f a)). Qed.
Lemma lem8140545 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8140546 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term788 _144104 _144105 _144106 _144138 _144141 P g c e f a) = (term789 _144104 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (MK_COMB (@lem8140545 _144104 P) (@lem8140544 _144104 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8140551 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term790 _144104 _144105 _144106 _144138 _144141 P c e f a) = (term791 _144104 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8140546 _144104 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8140552 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140553 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term792 _144104 _144105 _144106 _144138 _144141 P c e f a) = (term793 _144104 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8140552 _144105 _144106) (@lem8140551 _144104 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140558 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term794 _144104 _144105 _144106 _144138 _144141 P e f a) = (term795 _144104 _144105 _144106 _144138 _144141 P e f a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8140553 _144104 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140559 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8140560 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term796 _144104 _144105 _144106 _144138 _144141 P e f a) = (term797 _144104 _144105 _144106 _144138 _144141 P e f a).
Proof. exact (MK_COMB (@lem8140559 _144105 _144106 _144138 _144141 P) (@lem8140558 _144104 _144105 _144106 _144138 _144141 P e f a)). Qed.
Lemma lem8140565 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : (term798 _144104 _144105 _144106 _144138 _144141 P f a) = (term799 _144104 _144105 _144106 _144138 _144141 P f a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8140560 _144104 _144105 _144106 _144138 _144141 P e f a)). Qed.
Lemma lem8140566 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8140567 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : (term800 _144104 _144105 _144106 _144138 _144141 P f a) = (term801 _144104 _144105 _144106 _144138 _144141 P f a).
Proof. exact (MK_COMB (@lem8140566 _144105 _144106 _144141 P) (@lem8140565 _144104 _144105 _144106 _144138 _144141 P f a)). Qed.
Lemma lem8140572 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term802 _144104 _144105 _144106 _144138 _144141 P a) = (term803 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8140567 _144104 _144105 _144106 _144138 _144141 P f a)). Qed.
Lemma lem8140573 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140574 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term804 _144104 _144105 _144106 _144138 _144141 P a) = (term805 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8140573 _144105 _144106) (@lem8140572 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140579 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term806 _144104 _144105 _144106 _144138 _144141 P) = (term807 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8140574 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140580 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8140589 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term808 _144104 _144105 _144106 _144138 _144141 P) = (term809 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8140580 P) (@lem8140579 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8140600 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term768 _144105 _144106 _144138 _144141 P g c e f a _107853) = (term768 _144105 _144106 _144138 _144141 P g c e f a _107853).
Proof. exact (eq_refl (term768 _144105 _144106 _144138 _144141 P g c e f a _107853)). Qed.
Lemma lem8140605 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140606 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8140605 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140607 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8140608 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8140607 _144105) (@lem8140606 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140609 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140610 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8140609) (@lem8140608 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140611 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term769 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853) = (term769 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140610 _144104 _144105 _144106 P lt2 s a f g) (@lem8140600 _144105 _144106 _144138 _144141 P g c e f a _107853)). Qed.
Lemma lem8140614 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8140615 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term770 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term770 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140614 _144105 _144106 P p g a) (@lem8140611 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853)). Qed.
Lemma lem8140618 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8140619 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term771 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term771 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140618 _144105 _144106 P p f a) (@lem8140615 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140620 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8140625 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140626 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8140625 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140627 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8140628 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8140627 _144105) (@lem8140626 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140631 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8140632 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140631 _144105 _144106 P p g a) (@lem8140628 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140635 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8140636 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140635 _144105 _144106 P p f a) (@lem8140632 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140637 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140638 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140637) (@lem8140636 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140639 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8140638 _144104 _144105 _144106 P p lt2 s a f g) (@lem8140620 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8140640 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8140639 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8140641 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8140642 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8140641 P) (@lem8140640 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8140643 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8140642 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8140644 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140645 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8140644 _144105 _144106) (@lem8140643 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8140646 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8140645 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8140647 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140648 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8140647 _144105 _144106) (@lem8140646 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8140649 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140650 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8140649) (@lem8140648 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8140651 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term772 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term772 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140650 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8140619 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140652 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8140657 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140658 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8140657 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140659 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8140660 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8140659 _144105) (@lem8140658 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140663 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8140664 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140663 _144105 _144106 P p g a) (@lem8140660 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140667 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8140668 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140667 _144105 _144106 P p f a) (@lem8140664 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140669 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140670 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140669) (@lem8140668 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140671 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8140670 _144104 _144105 _144106 P p lt2 s a f g) (@lem8140652 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8140672 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8140671 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8140673 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8140674 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8140673 P) (@lem8140672 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8140675 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term257 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8140674 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8140676 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140677 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term258 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8140676 _144105 _144106) (@lem8140675 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8140678 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term259 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8140677 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8140679 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140680 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term15 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8140679 _144105 _144106) (@lem8140678 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8140681 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8140682 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8140681) (@lem8140680 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8140683 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853) = (term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853).
Proof. exact (MK_COMB (@lem8140682 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8140651 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140684 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term776 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term776 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (fun_ext (fun _107853 : _144138 => @lem8140683 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853)). Qed.
Lemma lem8140685 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8140686 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term777 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) = (term777 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (MK_COMB (@lem8140685 _144138) (@lem8140684 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140687 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term779 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) = (term779 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8140686 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8140688 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8140689 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term781 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) = (term781 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a).
Proof. exact (MK_COMB (@lem8140688 _144105 _144106 P) (@lem8140687 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a)). Qed.
Lemma lem8140690 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term783 _144104 _144105 _144106 _144138 _144141 P s g c e f a) = (term783 _144104 _144105 _144106 _144138 _144141 P s g c e f a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8140689 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a)). Qed.
Lemma lem8140691 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8140692 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term785 _144104 _144105 _144106 _144138 _144141 P s g c e f a) = (term785 _144104 _144105 _144106 _144138 _144141 P s g c e f a).
Proof. exact (MK_COMB (@lem8140691 _144104 _144105) (@lem8140690 _144104 _144105 _144106 _144138 _144141 P s g c e f a)). Qed.
Lemma lem8140693 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term787 _144104 _144105 _144106 _144138 _144141 P g c e f a) = (term787 _144104 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8140692 _144104 _144105 _144106 _144138 _144141 P s g c e f a)). Qed.
Lemma lem8140694 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8140695 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term789 _144104 _144105 _144106 _144138 _144141 P g c e f a) = (term789 _144104 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (MK_COMB (@lem8140694 _144104 P) (@lem8140693 _144104 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8140696 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term791 _144104 _144105 _144106 _144138 _144141 P c e f a) = (term791 _144104 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8140695 _144104 _144105 _144106 _144138 _144141 P g c e f a)). Qed.
Lemma lem8140697 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140698 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term793 _144104 _144105 _144106 _144138 _144141 P c e f a) = (term793 _144104 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8140697 _144105 _144106) (@lem8140696 _144104 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140699 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term795 _144104 _144105 _144106 _144138 _144141 P e f a) = (term795 _144104 _144105 _144106 _144138 _144141 P e f a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8140698 _144104 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8140700 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8140701 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term797 _144104 _144105 _144106 _144138 _144141 P e f a) = (term797 _144104 _144105 _144106 _144138 _144141 P e f a).
Proof. exact (MK_COMB (@lem8140700 _144105 _144106 _144138 _144141 P) (@lem8140699 _144104 _144105 _144106 _144138 _144141 P e f a)). Qed.
Lemma lem8140702 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : (term799 _144104 _144105 _144106 _144138 _144141 P f a) = (term799 _144104 _144105 _144106 _144138 _144141 P f a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8140701 _144104 _144105 _144106 _144138 _144141 P e f a)). Qed.
Lemma lem8140703 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8140704 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : (term801 _144104 _144105 _144106 _144138 _144141 P f a) = (term801 _144104 _144105 _144106 _144138 _144141 P f a).
Proof. exact (MK_COMB (@lem8140703 _144105 _144106 _144141 P) (@lem8140702 _144104 _144105 _144106 _144138 _144141 P f a)). Qed.
Lemma lem8140705 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term803 _144104 _144105 _144106 _144138 _144141 P a) = (term803 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8140704 _144104 _144105 _144106 _144138 _144141 P f a)). Qed.
Lemma lem8140706 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140707 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term805 _144104 _144105 _144106 _144138 _144141 P a) = (term805 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8140706 _144105 _144106) (@lem8140705 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140708 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term807 _144104 _144105 _144106 _144138 _144141 P) = (term807 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8140707 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8140709 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8140710 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term809 _144104 _144105 _144106 _144138 _144141 P) = (term809 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8140709 P) (@lem8140708 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8140853 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term808 _144104 _144105 _144106 _144138 _144141 P) = (term809 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (TRANS (@lem8140589 _144104 _144105 _144106 _144138 _144141 P) (@lem8140710 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8140854 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term809 _144104 _144105 _144106 _144138 _144141 P) = (term808 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (SYM (@lem8140853 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8140855 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (h1). Qed.
Lemma lem8140856 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8140859 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term137 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8140863 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8140864 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853) = (term737 _144105 _144106 _144138 _144141 P c e f a _107853).
Proof. exact (@lem8140863 ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853)). Qed.
Lemma lem8140865 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : (term737 _144105 _144106 _144138 _144141 P c e f a _107853) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = _107853).
Proof. exact (SYM (@lem8140864 _144105 _144106 _144138 _144141 P c e f a _107853)). Qed.
Lemma lem8140875 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8140876 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8140877 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8140876 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140878 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140879 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8140880 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8140879) (@lem8140878 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140881 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8140880 _144104 _144105 _144106 P lt2 s a f g z) (@lem8140875 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140882 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8140881 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8140883 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8140884 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8140883 _144105) (@lem8140882 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140885 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8140877 _144104 _144105 _144106 P lt2 s a f g) (@lem8140884 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140887 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8140888 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140887 _144105 _144106 P p g a) (@lem8140885 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140889 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8140890 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8140889 _144104 _144105 _144106 P p lt2 s a f g) (@lem8140888 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140892 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8140893 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140892 _144105 _144106 P p f a) (@lem8140890 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140894 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140895 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8140894 _144104 _144105 _144106 P p lt2 s a f g) (@lem8140893 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140896 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8140897 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8140898 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8140897) (@lem8140895 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8140899 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8140898 _144104 _144105 _144106 P p lt2 s a f g) (@lem8140896 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8140900 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8140901 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8140900 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8140899 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8140902 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8140901 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8140903 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8140904 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8140903 P) (@lem8140902 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8140905 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term285 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8140904 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8140906 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140907 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term286 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8140906 _144105 _144106) (@lem8140905 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8140908 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term287 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8140907 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8140909 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8140910 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term288 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8140909 _144105 _144106) (@lem8140908 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141017 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8141018 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8141017 _144105 P Q). Qed.
Lemma lem8141019 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8141018 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141020 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141021 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141020 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141022 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141023 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8141022 _144105) (@lem8141021 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141024 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8141025 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141024 _144105 _144106 P p g a) (@lem8141023 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141026 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141027 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141026) (@lem8141025 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141028 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141029 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8141030 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141029 _144105 _144106 P p g a) (@lem8141028 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141031 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141030 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141032 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141033 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141032 _144105) (@lem8141031 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141034 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8141027 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141033 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141035 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8141034 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141019 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141036 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141037 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141036 _144105 _144106 P p f a) (@lem8141035 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141039 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8141040 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8141039 _144105 P Q). Qed.
Lemma lem8141041 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8141040 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141042 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141043 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141042 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141044 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141045 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141044 _144105) (@lem8141043 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141046 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141047 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141046 _144105 _144106 P p f a) (@lem8141045 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141048 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141049 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141048) (@lem8141047 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141050 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141051 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141052 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141051 _144105 _144106 P p f a) (@lem8141050 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141053 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141052 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141054 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141055 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141054 _144105) (@lem8141053 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141056 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8141049 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141055 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141057 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8141056 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141041 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141058 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8141037 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141057 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141059 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141060 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141059) (@lem8141058 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141061 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8141062 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8141060 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141061 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8141064 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8141065 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8141064 _144105 P Q). Qed.
Lemma lem8141066 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem8141065 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8141067 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141068 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141067 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141069 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141070 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141069 _144105) (@lem8141068 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141071 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141072 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141071) (@lem8141070 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141073 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8141074 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8141072 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141073 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8141075 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141076 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term327 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term328 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8141075) (@lem8141074 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141077 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141078 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141079 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141078) (@lem8141077 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141080 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8141081 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term331 _144104 _144105 _144106 _144141 P p lt2 s z f e g a) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (MK_COMB (@lem8141079 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8141080 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8141082 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term333 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8141081 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8141083 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141084 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8141083 _144105) (@lem8141082 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141085 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a)) = ((term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a)).
Proof. exact (MK_COMB (@lem8141076 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8141084 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141086 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (EQ_MP (@lem8141085 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8141066 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141087 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8141062 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8141086 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141088 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8141087 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141089 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141090 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8141089 P) (@lem8141088 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141092 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141093 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8141092 P _144105 P'). Qed.
Lemma lem8141094 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (@lem8141093 _144105 P (term344 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141095 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141096 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141097 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z).
Proof. exact (MK_COMB (@lem8141095 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8141096 _144105 z)). Qed.
Lemma lem8141098 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z)). Qed.
Lemma lem8141099 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8141097 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) (@lem8141098 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8141100 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term348 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8141099 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8141101 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141102 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term349 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8141101 _144105) (@lem8141100 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141103 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term350 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8141102 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141104 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141105 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8141104 P) (@lem8141103 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141106 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141107 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term351 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term352 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8141106) (@lem8141105 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141108 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8141109 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8141110 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a).
Proof. exact (MK_COMB (@lem8141108 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8141109 _144105 P z a)). Qed.
Lemma lem8141111 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a)). Qed.
Lemma lem8141112 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8141110 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) (@lem8141111 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8141113 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term356 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term357 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (fun_ext (fun a : P => @lem8141112 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8141114 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141115 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term358 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (MK_COMB (@lem8141114 P) (@lem8141113 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141116 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term360 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8141115 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141117 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8141118 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8141117 _144105 P) (@lem8141116 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141119 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g)) = ((term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g)).
Proof. exact (MK_COMB (@lem8141107 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8141118 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141120 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (EQ_MP (@lem8141119 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8141094 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141121 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (TRANS (@lem8141090 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8141120 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141122 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term285 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141121 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141123 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141124 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8141123 _144105 _144106) (@lem8141122 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141126 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141127 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8141126 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8141128 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (@lem8141127 _144105 _144106 P (term369 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141129 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141130 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141131 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z).
Proof. exact (MK_COMB (@lem8141129 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8141130 _144105 P z)). Qed.
Lemma lem8141132 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z)). Qed.
Lemma lem8141133 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8141131 _144104 _144105 _144106 _144141 P p lt2 s f e g z) (@lem8141132 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141134 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term373 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8141133 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141135 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8141136 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term374 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8141135 _144105 P) (@lem8141134 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141137 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term375 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141136 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141138 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141139 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8141138 _144105 _144106) (@lem8141137 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141140 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141141 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term376 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term377 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8141140) (@lem8141139 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141142 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8141143 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8141144 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g).
Proof. exact (MK_COMB (@lem8141142 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8141143 _144105 _144106 P z g)). Qed.
Lemma lem8141145 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g)). Qed.
Lemma lem8141146 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8141144 _144104 _144105 _144106 _144141 P p lt2 s f e z g) (@lem8141145 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141147 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term381 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term382 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141146 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8141148 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141149 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term383 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (MK_COMB (@lem8141148 _144105 _144106) (@lem8141147 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141150 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term385 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8141149 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141151 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141152 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term368 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8141151 _144105 _144106 P) (@lem8141150 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141153 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : ((term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e)) = ((term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e)).
Proof. exact (MK_COMB (@lem8141141 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8141152 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141154 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (EQ_MP (@lem8141153 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8141128 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141155 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (TRANS (@lem8141124 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8141154 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141156 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term287 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141155 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141157 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141158 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8141157 _144105 _144106) (@lem8141156 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141160 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141161 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8141160 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8141162 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (@lem8141161 _144105 _144106 P (term394 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141163 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8141164 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141165 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z).
Proof. exact (MK_COMB (@lem8141163 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8141164 _144105 _144106 P z)). Qed.
Lemma lem8141166 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z)). Qed.
Lemma lem8141167 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8141165 _144104 _144105 _144106 _144141 P p lt2 s f e z) (@lem8141166 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141168 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term398 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8141167 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141169 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141170 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term399 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8141169 _144105 _144106 P) (@lem8141168 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141171 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term400 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141170 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8141172 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141173 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8141172 _144105 _144106) (@lem8141171 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141174 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141175 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term401 _144104 _144105 _144106 _144141 P p lt2 s e) = (term402 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8141174) (@lem8141173 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141176 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8141177 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8141178 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f).
Proof. exact (MK_COMB (@lem8141176 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8141177 _144105 _144106 P z f)). Qed.
Lemma lem8141179 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f)). Qed.
Lemma lem8141180 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8141178 _144104 _144105 _144106 _144141 P p lt2 s e z f) (@lem8141179 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141181 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term406 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term407 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141180 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8141182 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141183 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term408 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term409 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (MK_COMB (@lem8141182 _144105 _144106) (@lem8141181 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8141184 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term410 _144104 _144105 _144106 _144141 P p lt2 s e) = (term411 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8141183 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8141185 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141186 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term393 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8141185 _144105 _144106 P) (@lem8141184 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141187 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : ((term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e)) = ((term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e)).
Proof. exact (MK_COMB (@lem8141175 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8141186 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141188 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (EQ_MP (@lem8141187 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8141162 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141190 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8141158 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8141188 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141191 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8140910 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8141190 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8141192 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term412 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (EQ_MP (@lem8141191 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8140855 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8141201 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8141202 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8141203 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8141202 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141204 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141205 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8141206 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141205) (@lem8141204 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141207 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8141206 _144104 _144105 _144106 P lt2 s a f g z) (@lem8141201 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141208 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141207 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141209 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141210 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8141209 _144105) (@lem8141208 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141211 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8141203 _144104 _144105 _144106 P lt2 s a f g) (@lem8141210 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141213 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8141214 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141213 _144105 _144106 P p g a) (@lem8141211 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141215 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141216 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8141215 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141214 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141218 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141219 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141218 _144105 _144106 P p f a) (@lem8141216 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141220 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141221 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8141220 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141219 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141222 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141223 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141224 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141223) (@lem8141221 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141225 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141224 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141222 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8141226 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141227 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8141226 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141225 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141228 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8141227 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141229 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141230 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141229 P) (@lem8141228 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141231 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141230 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141232 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141233 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141232 _144105 _144106) (@lem8141231 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141234 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141233 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141235 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141236 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8141235 _144105 _144106) (@lem8141234 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141343 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8141344 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8141343 _144105 P Q). Qed.
Lemma lem8141345 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8141344 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141346 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141347 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141346 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141348 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141349 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8141348 _144105) (@lem8141347 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141350 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8141351 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141350 _144105 _144106 P p g a) (@lem8141349 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141352 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141353 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141352) (@lem8141351 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141354 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141355 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8141356 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141355 _144105 _144106 P p g a) (@lem8141354 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141357 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141356 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141358 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141359 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141358 _144105) (@lem8141357 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141360 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8141353 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141359 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141361 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8141360 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141345 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141362 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141363 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141362 _144105 _144106 P p f a) (@lem8141361 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141365 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8141366 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8141365 _144105 P Q). Qed.
Lemma lem8141367 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8141366 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141368 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141369 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141368 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141370 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141371 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141370 _144105) (@lem8141369 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141372 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141373 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141372 _144105 _144106 P p f a) (@lem8141371 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141374 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141375 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141374) (@lem8141373 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141376 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141377 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8141378 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141377 _144105 _144106 P p f a) (@lem8141376 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141379 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141378 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141380 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141381 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141380 _144105) (@lem8141379 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141382 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8141375 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141381 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141383 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8141382 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141367 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141384 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8141363 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141383 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141385 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141386 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141385) (@lem8141384 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141387 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141388 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141386 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141387 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8141390 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8141391 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8141390 _144105 P Q). Qed.
Lemma lem8141392 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem8141391 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141393 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141394 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141393 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141395 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141396 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141395 _144105) (@lem8141394 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141397 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141398 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8141397) (@lem8141396 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8141399 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141400 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141398 _144104 _144105 _144106 P p lt2 s a f g) (@lem8141399 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8141401 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141402 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term424 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term425 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141401) (@lem8141400 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141403 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141404 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141405 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141404) (@lem8141403 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8141406 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8141407 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term426 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8141405 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8141406 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8141408 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term428 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8141407 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8141409 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141410 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141409 _144105) (@lem8141408 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141411 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)) = ((term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)).
Proof. exact (MK_COMB (@lem8141402 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141410 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141412 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (EQ_MP (@lem8141411 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141392 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141413 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8141388 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141412 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141414 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8141413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141415 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141416 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141415 P) (@lem8141414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141418 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141419 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8141418 P _144105 P'). Qed.
Lemma lem8141420 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (@lem8141419 _144105 P (term435 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141421 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141422 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141423 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z).
Proof. exact (MK_COMB (@lem8141421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141422 _144105 z)). Qed.
Lemma lem8141424 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z)). Qed.
Lemma lem8141425 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8141423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) (@lem8141424 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8141426 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term439 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8141425 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8141427 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8141428 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term440 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8141427 _144105) (@lem8141426 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141429 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term441 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8141428 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141430 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141431 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141430 P) (@lem8141429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141432 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141433 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term442 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term443 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141432) (@lem8141431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141434 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8141435 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8141436 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a).
Proof. exact (MK_COMB (@lem8141434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8141435 _144105 P z a)). Qed.
Lemma lem8141437 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a)). Qed.
Lemma lem8141438 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8141436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) (@lem8141437 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8141439 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term447 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term448 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8141438 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8141440 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8141441 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term449 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8141440 P) (@lem8141439 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141442 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term451 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8141441 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141443 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8141444 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141443 _144105 P) (@lem8141442 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141445 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)) = ((term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)).
Proof. exact (MK_COMB (@lem8141433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8141444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141446 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (EQ_MP (@lem8141445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8141420 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141447 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (TRANS (@lem8141416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8141446 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141448 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141447 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141449 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141450 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141449 _144105 _144106) (@lem8141448 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141452 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141453 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8141452 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8141454 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (@lem8141453 _144105 _144106 P (term458 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141455 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141456 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141457 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z).
Proof. exact (MK_COMB (@lem8141455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8141456 _144105 P z)). Qed.
Lemma lem8141458 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z)). Qed.
Lemma lem8141459 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8141457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) (@lem8141458 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141460 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term462 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8141459 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141461 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8141462 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term463 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8141461 _144105 P) (@lem8141460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141463 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term464 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141462 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141464 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141465 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141464 _144105 _144106) (@lem8141463 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141466 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141467 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term465 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term466 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141466) (@lem8141465 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141468 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8141469 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8141470 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g).
Proof. exact (MK_COMB (@lem8141468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8141469 _144105 _144106 P z g)). Qed.
Lemma lem8141471 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g)). Qed.
Lemma lem8141472 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8141470 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) (@lem8141471 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141473 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term470 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term471 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8141472 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8141474 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141475 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term472 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8141474 _144105 _144106) (@lem8141473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141476 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term474 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8141475 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141477 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141478 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141477 _144105 _144106 P) (@lem8141476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141479 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)) = ((term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)).
Proof. exact (MK_COMB (@lem8141467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8141478 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141480 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (EQ_MP (@lem8141479 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8141454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141481 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (TRANS (@lem8141450 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8141480 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141482 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141481 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141483 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141484 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8141483 _144105 _144106) (@lem8141482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141486 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8141487 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8141486 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8141488 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (@lem8141487 _144105 _144106 P (term481 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141489 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8141490 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8141491 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z).
Proof. exact (MK_COMB (@lem8141489 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8141490 _144105 _144106 P z)). Qed.
Lemma lem8141492 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z)). Qed.
Lemma lem8141493 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8141491 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) (@lem8141492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141494 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term485 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8141493 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141495 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141496 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term486 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8141495 _144105 _144106 P) (@lem8141494 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141497 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term487 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141496 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8141498 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141499 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8141498 _144105 _144106) (@lem8141497 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141500 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8141501 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term488 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term489 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8141500) (@lem8141499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141502 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8141503 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8141504 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f).
Proof. exact (MK_COMB (@lem8141502 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8141503 _144105 _144106 P z f)). Qed.
Lemma lem8141505 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f)). Qed.
Lemma lem8141506 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8141504 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) (@lem8141505 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141507 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term493 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8141506 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8141508 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8141509 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term495 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8141508 _144105 _144106) (@lem8141507 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8141510 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term497 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8141509 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8141511 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8141512 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8141511 _144105 _144106 P) (@lem8141510 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141513 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)) = ((term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)).
Proof. exact (MK_COMB (@lem8141501 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8141512 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141514 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (EQ_MP (@lem8141513 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8141488 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141516 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8141484 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8141514 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141517 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8141236 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8141516 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8141518 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8141517 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8140856 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8141524 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8141530 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : p g a.
Proof. exact (h1). Qed.
Lemma lem8141537 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term500 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17265 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8141538 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term501 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141537 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141539 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8141592 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term502 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8141539 _144105) (@lem8141538 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141593 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term502 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8141592 _144104 _144105 _144106 P lt2 s a f g) (@lem8140859 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8141599 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term146 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (h1). Qed.
Lemma lem8141605 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e g a) : term161 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8141612 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (h1). Qed.
Lemma lem8141620 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141621 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8141620 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8141622 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8141621 _144105 _144106 P p f). Qed.
Lemma lem8141623 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141624 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8141622 _144105 _144106 P p f) (@lem8141623 P a)). Qed.
Lemma lem8141626 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141627 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8141626 P Prop f x). Qed.
Lemma lem8141628 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8141627 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8141630 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8141624 _144105 _144106 P p f a) (@lem8141628 _144105 _144106 P p f a)). Qed.
Lemma lem8141638 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141639 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8141638 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8141640 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8141639 _144105 _144106 P p g). Qed.
Lemma lem8141641 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141642 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8141640 _144105 _144106 P p g) (@lem8141641 P a)). Qed.
Lemma lem8141644 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141645 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8141644 P Prop f x). Qed.
Lemma lem8141646 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8141645 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8141648 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8141642 _144105 _144106 P p g a) (@lem8141646 _144105 _144106 P p g a)). Qed.
Lemma lem8141650 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8141655 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141656 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8141655 _144105 _144106 f x). Qed.
Lemma lem8141658 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (f z) = (@I (_144105 -> _144106) f z).
Proof. exact (@lem8141656 _144105 _144106 f z). Qed.
Lemma lem8141663 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141664 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8141663 _144105 _144106 f x). Qed.
Lemma lem8141666 {_144105 _144106 : Type'} (g : _144105 -> _144106) (z : _144105) : (g z) = (@I (_144105 -> _144106) g z).
Proof. exact (@lem8141664 _144105 _144106 g z). Qed.
Lemma lem8141667 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (term504 _144105 _144106 f z) = (term505 _144105 _144106 f z).
Proof. exact (MK_COMB (@lem8141650 _144106) (@lem8141658 _144105 _144106 f z)). Qed.
Lemma lem8141668 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : ((f z) = (g z)) = ((@I (_144105 -> _144106) f z) = (@I (_144105 -> _144106) g z)).
Proof. exact (MK_COMB (@lem8141667 _144105 _144106 f z) (@lem8141666 _144105 _144106 g z)). Qed.
Lemma lem8141669 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8141676 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141677 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8141676 P _144104 f x). Qed.
Lemma lem8141679 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8141677 _144104 P s a). Qed.
Lemma lem8141680 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (lt2 z).
Proof. exact (eq_refl (lt2 z)). Qed.
Lemma lem8141681 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term506 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8141680 _144104 _144105 lt2 z) (@lem8141679 _144104 P s a)). Qed.
Lemma lem8141683 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141684 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8141683 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8141685 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (@I (_144105 -> _144104 -> Prop) lt2 z).
Proof. exact (@lem8141684 _144104 _144105 lt2 z). Qed.
Lemma lem8141686 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8141687 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term507 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8141685 _144104 _144105 lt2 z) (@lem8141686 _144104 P s a)). Qed.
Lemma lem8141689 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141690 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8141689 _144104 Prop f x). Qed.
Lemma lem8141691 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term507 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (@lem8141690 _144104 (@I (_144105 -> _144104 -> Prop) lt2 z) (@I (P -> _144104) s a)). Qed.
Lemma lem8141692 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8141687 _144104 _144105 P lt2 z s a) (@lem8141691 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8141693 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8141681 _144104 _144105 P lt2 z s a) (@lem8141692 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8141694 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term509 _144104 _144105 P lt2 z s a) = (term510 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8141669) (@lem8141693 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8141695 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8141696 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term511 _144104 _144105 P lt2 z s a) = (term512 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8141695) (@lem8141694 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8141697 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term500 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8141696 _144104 _144105 P lt2 z s a) (@lem8141668 _144105 _144106 f g z)). Qed.
Lemma lem8141698 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term501 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8141697 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8141699 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8141700 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term502 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8141699 _144105) (@lem8141698 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8141701 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8141700 _144104 _144105 _144106 P lt2 s a f g) (@lem8141593 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8141702 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (eq_refl (@ex1 _144138)). Qed.
Lemma lem8141712 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141713 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8141712 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8141714 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8141713 _144105 _144106 _144141 P e f). Qed.
Lemma lem8141715 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141716 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8141714 _144105 _144106 _144141 P e f) (@lem8141715 P a)). Qed.
Lemma lem8141718 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141719 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8141718 P _144141 f x). Qed.
Lemma lem8141720 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8141719 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8141722 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8141716 _144105 _144106 _144141 P e f a) (@lem8141720 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141724 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8141725 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141724 _144105 _144106 _144138 _144141 P c f a) (@lem8141722 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141727 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141728 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141727 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8141729 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8141728 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8141730 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141731 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8141729 _144105 _144106 _144138 _144141 P c f) (@lem8141730 P a)). Qed.
Lemma lem8141733 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141734 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141733 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8141735 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8141734 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8141736 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8141731 _144105 _144106 _144138 _144141 P c f a) (@lem8141735 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8141737 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141738 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141736 _144105 _144106 _144138 _144141 P c f a) (@lem8141737 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141740 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141741 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141740 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8141742 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8141741 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141743 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8141738 _144105 _144106 _144138 _144141 P c e f a) (@lem8141742 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141744 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8141725 _144105 _144106 _144138 _144141 P c e f a) (@lem8141743 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141745 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e f a) = (term810 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141702 _144138) (@lem8141744 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141747 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141748 {_144138 : Type'} (f : type686 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> Prop) f x).
Proof. exact (@lem8141747 (_144138 -> Prop) Prop f x). Qed.
Lemma lem8141749 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term810 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8141748 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141750 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8141745 _144105 _144106 _144138 _144141 P c e f a) (@lem8141749 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141752 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8141753 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (eq_refl (@ex1 _144138)). Qed.
Lemma lem8141763 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141764 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8141763 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8141765 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8141764 _144105 _144106 _144141 P e g). Qed.
Lemma lem8141766 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141767 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8141765 _144105 _144106 _144141 P e g) (@lem8141766 P a)). Qed.
Lemma lem8141769 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141770 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8141769 P _144141 f x). Qed.
Lemma lem8141771 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8141770 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8141773 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8141767 _144105 _144106 _144141 P e g a) (@lem8141771 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141775 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8141776 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141775 _144105 _144106 _144138 _144141 P c g a) (@lem8141773 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141778 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141779 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141778 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8141780 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8141779 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8141781 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141782 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8141780 _144105 _144106 _144138 _144141 P c g) (@lem8141781 P a)). Qed.
Lemma lem8141784 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141785 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141784 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8141786 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8141785 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8141787 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8141782 _144105 _144106 _144138 _144141 P c g a) (@lem8141786 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8141788 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141789 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141787 _144105 _144106 _144138 _144141 P c g a) (@lem8141788 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141791 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141792 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141791 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8141793 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8141792 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141794 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8141789 _144105 _144106 _144138 _144141 P c e g a) (@lem8141793 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141795 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8141776 _144105 _144106 _144138 _144141 P c e g a) (@lem8141794 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141796 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e g a) = (term810 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141753 _144138) (@lem8141795 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141798 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141799 {_144138 : Type'} (f : type686 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> Prop) f x).
Proof. exact (@lem8141798 (_144138 -> Prop) Prop f x). Qed.
Lemma lem8141800 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term810 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8141799 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141801 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8141796 _144105 _144106 _144138 _144141 P c e g a) (@lem8141800 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141802 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term161 _144105 _144106 _144138 _144141 P c e g a) = (term812 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141752) (@lem8141801 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141860 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8141870 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141871 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8141870 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8141872 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8141871 _144105 _144106 _144141 P e f). Qed.
Lemma lem8141873 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141874 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8141872 _144105 _144106 _144141 P e f) (@lem8141873 P a)). Qed.
Lemma lem8141876 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141877 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8141876 P _144141 f x). Qed.
Lemma lem8141878 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8141877 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8141880 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8141874 _144105 _144106 _144141 P e f a) (@lem8141878 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141882 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8141883 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141882 _144105 _144106 _144138 _144141 P c f a) (@lem8141880 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141885 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141886 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141885 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8141887 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8141886 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8141888 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141889 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8141887 _144105 _144106 _144138 _144141 P c f) (@lem8141888 P a)). Qed.
Lemma lem8141891 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141892 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141891 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8141893 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8141892 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8141894 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8141889 _144105 _144106 _144138 _144141 P c f a) (@lem8141893 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8141895 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141896 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141894 _144105 _144106 _144138 _144141 P c f a) (@lem8141895 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141898 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141899 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141898 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8141900 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8141899 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8141901 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8141896 _144105 _144106 _144138 _144141 P c e f a) (@lem8141900 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141902 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8141883 _144105 _144106 _144138 _144141 P c e f a) (@lem8141901 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141912 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141913 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8141912 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8141914 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8141913 _144105 _144106 _144141 P e g). Qed.
Lemma lem8141915 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141916 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8141914 _144105 _144106 _144141 P e g) (@lem8141915 P a)). Qed.
Lemma lem8141918 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141919 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8141918 P _144141 f x). Qed.
Lemma lem8141920 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8141919 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8141922 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8141916 _144105 _144106 _144141 P e g a) (@lem8141920 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141924 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8141925 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141924 _144105 _144106 _144138 _144141 P c g a) (@lem8141922 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141927 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141928 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141927 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8141929 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8141928 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8141930 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141931 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8141929 _144105 _144106 _144138 _144141 P c g) (@lem8141930 P a)). Qed.
Lemma lem8141933 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141934 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141933 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8141935 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8141934 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8141936 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8141931 _144105 _144106 _144138 _144141 P c g a) (@lem8141935 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8141937 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141938 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8141936 _144105 _144106 _144138 _144141 P c g a) (@lem8141937 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141940 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141941 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8141940 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8141942 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8141941 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8141943 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8141938 _144105 _144106 _144138 _144141 P c e g a) (@lem8141942 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141944 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8141925 _144105 _144106 _144138 _144141 P c e g a) (@lem8141943 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141945 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term39 _144105 _144106 _144138 _144141 P c e f a) = (term526 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8141860 _144138) (@lem8141902 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8141946 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8141945 _144105 _144106 _144138 _144141 P c e f a) (@lem8141944 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8141947 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8141948 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8141949 {_144105 _144106 : Type'} (f : _144105 -> _144106) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8141958 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141959 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8141958 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8141960 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8141959 _144105 _144106 P z f). Qed.
Lemma lem8141961 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8141962 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8141960 _144105 _144106 P z f) (@lem8141961 _144105 _144106 g)). Qed.
Lemma lem8141964 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141965 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8141964 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8141966 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8141965 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8141967 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8141962 _144105 _144106 P z f g) (@lem8141966 _144105 _144106 P z f g)). Qed.
Lemma lem8141968 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8141969 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8141967 _144105 _144106 P z f g) (@lem8141968 P a)). Qed.
Lemma lem8141971 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141972 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8141971 P _144105 f x). Qed.
Lemma lem8141973 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8141972 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8141975 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8141969 _144105 _144106 P z f g a) (@lem8141973 _144105 _144106 P z f g a)). Qed.
Lemma lem8141976 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term531 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8141949 _144105 _144106 f) (@lem8141975 _144105 _144106 P z f g a)). Qed.
Lemma lem8141978 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141979 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8141978 _144105 _144106 f x). Qed.
Lemma lem8141980 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term531 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (@lem8141979 _144105 _144106 f (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8141981 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8141976 _144105 _144106 P z f g a) (@lem8141980 _144105 _144106 P z f g a)). Qed.
Lemma lem8141982 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8141991 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141992 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8141991 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8141993 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8141992 _144105 _144106 P z f). Qed.
Lemma lem8141994 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8141995 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8141993 _144105 _144106 P z f) (@lem8141994 _144105 _144106 g)). Qed.
Lemma lem8141997 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8141998 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8141997 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8141999 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8141998 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8142000 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8141995 _144105 _144106 P z f g) (@lem8141999 _144105 _144106 P z f g)). Qed.
Lemma lem8142001 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8142002 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8142000 _144105 _144106 P z f g) (@lem8142001 P a)). Qed.
Lemma lem8142004 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142005 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8142004 P _144105 f x). Qed.
Lemma lem8142006 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8142005 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8142008 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8142002 _144105 _144106 P z f g a) (@lem8142006 _144105 _144106 P z f g a)). Qed.
Lemma lem8142009 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term534 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8141982 _144105 _144106 g) (@lem8142008 _144105 _144106 P z f g a)). Qed.
Lemma lem8142011 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142012 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8142011 _144105 _144106 f x). Qed.
Lemma lem8142013 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term534 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8142012 _144105 _144106 g (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8142014 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8142009 _144105 _144106 P z f g a) (@lem8142013 _144105 _144106 P z f g a)). Qed.
Lemma lem8142015 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term536 _144105 _144106 P z f g a) = (term537 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8141948 _144106) (@lem8141981 _144105 _144106 P z f g a)). Qed.
Lemma lem8142016 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : ((term530 _144105 _144106 P z f g a) = (term533 _144105 _144106 P z f g a)) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (MK_COMB (@lem8142015 _144105 _144106 P z f g a) (@lem8142014 _144105 _144106 P z f g a)). Qed.
Lemma lem8142017 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term538 _144105 _144106 P z f g a) = (term539 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8141947) (@lem8142016 _144105 _144106 P z f g a)). Qed.
Lemma lem8142018 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem8142027 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142028 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8142027 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8142029 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8142028 _144105 _144106 P z f). Qed.
Lemma lem8142030 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8142031 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8142029 _144105 _144106 P z f) (@lem8142030 _144105 _144106 g)). Qed.
Lemma lem8142033 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142034 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8142033 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8142035 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8142034 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8142036 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8142031 _144105 _144106 P z f g) (@lem8142035 _144105 _144106 P z f g)). Qed.
Lemma lem8142037 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8142038 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8142036 _144105 _144106 P z f g) (@lem8142037 P a)). Qed.
Lemma lem8142040 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142041 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8142040 P _144105 f x). Qed.
Lemma lem8142042 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8142041 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8142044 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8142038 _144105 _144106 P z f g a) (@lem8142042 _144105 _144106 P z f g a)). Qed.
Lemma lem8142049 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142050 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8142049 P _144104 f x). Qed.
Lemma lem8142052 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8142050 _144104 P s a). Qed.
Lemma lem8142053 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term540 _144104 _144105 _144106 P lt2 z f g a) = (term541 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (MK_COMB (@lem8142018 _144104 _144105 lt2) (@lem8142044 _144105 _144106 P z f g a)). Qed.
Lemma lem8142054 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term543 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8142053 _144104 _144105 _144106 P lt2 z f g a) (@lem8142052 _144104 P s a)). Qed.
Lemma lem8142056 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142057 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8142056 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8142058 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term541 _144104 _144105 _144106 P lt2 z f g a) = (term544 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (@lem8142057 _144104 _144105 lt2 (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8142059 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8142060 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term545 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8142058 _144104 _144105 _144106 P lt2 z f g a) (@lem8142059 _144104 P s a)). Qed.
Lemma lem8142062 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142063 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8142062 _144104 Prop f x). Qed.
Lemma lem8142064 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term545 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8142063 _144104 (term544 _144104 _144105 _144106 P lt2 z f g a) (@I (P -> _144104) s a)). Qed.
Lemma lem8142065 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8142060 _144104 _144105 _144106 P lt2 z f g s a) (@lem8142064 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8142066 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8142054 _144104 _144105 _144106 P lt2 z f g s a) (@lem8142065 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8142067 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8142068 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term547 _144104 _144105 _144106 P lt2 z f g s a) = (term548 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8142067) (@lem8142066 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8142069 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term549 _144104 _144105 _144106 P lt2 s z f g a) = (term550 _144104 _144105 _144106 P lt2 s z f g a).
Proof. exact (MK_COMB (@lem8142068 _144104 _144105 _144106 P lt2 z f g s a) (@lem8142017 _144105 _144106 P z f g a)). Qed.
Lemma lem8142070 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8142077 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142078 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8142077 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8142079 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8142078 _144105 _144106 P p g). Qed.
Lemma lem8142080 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8142081 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8142079 _144105 _144106 P p g) (@lem8142080 P a)). Qed.
Lemma lem8142083 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142084 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8142083 P Prop f x). Qed.
Lemma lem8142085 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8142084 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8142087 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8142081 _144105 _144106 P p g a) (@lem8142085 _144105 _144106 P p g a)). Qed.
Lemma lem8142088 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p g a) = (term551 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8142070) (@lem8142087 _144105 _144106 P p g a)). Qed.
Lemma lem8142089 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8142090 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term552 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8142089) (@lem8142088 _144105 _144106 P p g a)). Qed.
Lemma lem8142091 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term553 _144104 _144105 _144106 P p lt2 s z f g a) = (term554 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8142090 _144105 _144106 P p g a) (@lem8142069 _144104 _144105 _144106 P lt2 s z f g a)). Qed.
Lemma lem8142092 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8142099 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142100 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8142099 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8142101 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8142100 _144105 _144106 P p f). Qed.
Lemma lem8142102 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8142103 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8142101 _144105 _144106 P p f) (@lem8142102 P a)). Qed.
Lemma lem8142105 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8142106 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8142105 P Prop f x). Qed.
Lemma lem8142107 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8142106 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8142109 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8142103 _144105 _144106 P p f a) (@lem8142107 _144105 _144106 P p f a)). Qed.
Lemma lem8142110 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p f a) = (term551 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8142092) (@lem8142109 _144105 _144106 P p f a)). Qed.
Lemma lem8142111 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8142112 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8142111) (@lem8142110 _144105 _144106 P p f a)). Qed.
Lemma lem8142113 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term555 _144104 _144105 _144106 P p lt2 s z f g a) = (term556 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8142112 _144105 _144106 P p f a) (@lem8142091 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8142114 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8142115 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term557 _144104 _144105 _144106 P p lt2 s z f g a) = (term558 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8142114) (@lem8142113 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8142116 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term559 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8142115 _144104 _144105 _144106 P p lt2 s z f g a) (@lem8141946 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8142117 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term561 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8142116 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8142118 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8142119 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term563 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8142118 P) (@lem8142117 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8142120 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term565 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8142119 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8142121 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8142122 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8142121 _144105 _144106) (@lem8142120 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8142123 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8142122 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8142124 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8142125 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8142124 _144105 _144106) (@lem8142123 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8142126 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (EQ_MP (@lem8142125 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (@lem8141612 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8142359 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term513 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term513 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8142360 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term514 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8142359 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8142361 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8142363 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term515 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8142361 _144105) (@lem8142360 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8142364 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8142363 _144104 _144105 _144106 P lt2 s a f g) (@lem8141701 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8142378 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8142395 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term554 _144104 _144105 _144106 P p lt2 s z f g a) = (term570 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term546 _144104 _144105 _144106 P lt2 z f g s a) (term551 _144105 _144106 P p g a) (term539 _144105 _144106 P z f g a)). Qed.
Lemma lem8142398 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term552 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (eq_refl (term552 _144105 _144106 P p f a)). Qed.
Lemma lem8142399 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term571 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8142398 _144105 _144106 P p f a) (@lem8142395 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8142406 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term571 _144104 _144105 _144106 P lt2 s p z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term573 _144104 _144105 _144106 P p lt2 z f g s a) (term551 _144105 _144106 P p f a) (term574 _144105 _144106 P p z f g a)). Qed.
Lemma lem8142407 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (TRANS (@lem8142399 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8142406 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8142408 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8142409 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term558 _144104 _144105 _144106 P p lt2 s z f g a) = (term575 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8142408) (@lem8142407 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8142410 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (MK_COMB (@lem8142409 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8142378 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8142417 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (@lem19699 (term578 _144104 _144105 _144106 P p lt2 z f g s a) (term579 _144105 _144106 P p z f g a) ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8142418 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (TRANS (@lem8142410 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) (@lem8142417 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8142419 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term580 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8142418 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8142420 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8142421 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (MK_COMB (@lem8142420 P) (@lem8142419 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8142422 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term582 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8142421 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8142423 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8142424 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (MK_COMB (@lem8142423 _144105 _144106) (@lem8142422 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8142425 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term584 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8142424 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8142426 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8142428 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (MK_COMB (@lem8142426 _144105 _144106) (@lem8142425 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e)). Qed.
Lemma lem8142429 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e.
Proof. exact (EQ_MP (@lem8142428 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e) (@lem8142126 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8142483 {_144104 _144105 _144106 P : Type'} (_107854 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term586 _144104 _144105 _144106 P lt2 s a f g _107854.
Proof. exact (@lem8142364 _144104 _144105 _144106 P lt2 s a f g h1 _107854). Qed.
Lemma lem8142484 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107854 : _144105) : (term586 _144104 _144105 _144106 P lt2 s a f g _107854) = (term513 _144104 _144105 _144106 P lt2 s a f g _107854).
Proof. exact (eq_refl (term586 _144104 _144105 _144106 P lt2 s a f g _107854)). Qed.
Lemma lem8142486 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107855.
Proof. exact (@lem8142429 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1 _107855). Qed.
Lemma lem8142487 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107855) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e).
Proof. exact (eq_refl (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107855)). Qed.
Lemma lem8142488 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e.
Proof. exact (EQ_MP (@lem8142487 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e) (@lem8142486 _144104 _144105 _144106 _144138 _144141 P _107855 p lt2 s z c e h1)). Qed.
Lemma lem8142489 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856.
Proof. exact (@lem8142488 _144104 _144105 _144106 _144138 _144141 P _107855 p lt2 s z c e h1 _107856). Qed.
Lemma lem8142490 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) : (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856).
Proof. exact (eq_refl (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856)). Qed.
Lemma lem8142491 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856.
Proof. exact (EQ_MP (@lem8142490 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856) (@lem8142489 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 p lt2 s z c e h1)). Qed.
Lemma lem8142492 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857.
Proof. exact (@lem8142491 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 p lt2 s z c e h1 _107857). Qed.
Lemma lem8142493 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857).
Proof. exact (eq_refl (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857)). Qed.
Lemma lem8142494 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857.
Proof. exact (EQ_MP (@lem8142493 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107855 c e _107856 _107857) (@lem8142492 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8142506 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term590 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857.
Proof. exact (proj2 (@lem8142494 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8142507 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857.
Proof. exact (proj1 (@lem8142494 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8142517 {_144104 _144105 _144106 P : Type'} (_107854 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term513 _144104 _144105 _144106 P lt2 s a f g _107854.
Proof. exact (EQ_MP (@lem8142484 _144104 _144105 _144106 P lt2 s a f g _107854) (@lem8142483 _144104 _144105 _144106 P _107854 lt2 s a f g h1)). Qed.
Lemma lem8142521 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e g a) : term812 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8141802 _144105 _144106 _144138 _144141 P c e g a) (@lem8141605 _144105 _144106 _144138 _144141 P c e g a h1)). Qed.
Lemma lem8142563 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107855 _107857) (term573 _144104 _144105 _144106 P p lt2 z _107855 _107856 s _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8142570 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term593 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107856 _107857) (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8142571 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8142574 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8142571 _144105 _144106 P p _107855 _107857) (@lem8142570 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857)). Qed.
Lemma lem8142576 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857).
Proof. exact (TRANS (@lem8142563 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) (@lem8142574 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857)). Qed.
Lemma lem8142577 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857.
Proof. exact (EQ_MP (@lem8142576 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) (@lem8142507 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8142581 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term596 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107855 _107857) (term574 _144105 _144106 P p z _107855 _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8142588 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term597 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term598 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107856 _107857) (term539 _144105 _144106 P z _107855 _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8142589 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8142592 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term596 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8142589 _144105 _144106 P p _107855 _107857) (@lem8142588 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857)). Qed.
Lemma lem8142594 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (TRANS (@lem8142581 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) (@lem8142592 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857)). Qed.
Lemma lem8142595 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857.
Proof. exact (EQ_MP (@lem8142594 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) (@lem8142506 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8142596 {_144138 : Type'} : (@I ((_144138 -> Prop) -> Prop)) = (@I ((_144138 -> Prop) -> Prop)).
Proof. exact (eq_refl (@I ((_144138 -> Prop) -> Prop))). Qed.
Lemma lem8142597 {_144138 : Type'} (_107861 : type686 _144138) (_107863 : type686 _144138) (h1 : _107861 = _107863) : _107861 = _107863.
Proof. exact (h1). Qed.
Lemma lem8142598 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) (h1 : _107862 = _107864) : _107862 = _107864.
Proof. exact (h1). Qed.
Lemma lem8142599 {_144138 : Type'} (_107861 : type686 _144138) (_107863 : type686 _144138) (h1 : _107861 = _107863) : (@I ((_144138 -> Prop) -> Prop) _107861) = (@I ((_144138 -> Prop) -> Prop) _107863).
Proof. exact (MK_COMB (@lem8142596 _144138) (@lem8142597 _144138 _107861 _107863 h1)). Qed.
Lemma lem8142600 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107863 : type686 _144138) (h1 : _107862 = _107864) (h2 : _107861 = _107863) : (@I ((_144138 -> Prop) -> Prop) _107861 _107862) = (@I ((_144138 -> Prop) -> Prop) _107863 _107864).
Proof. exact (MK_COMB (@lem8142599 _144138 _107861 _107863 h2) (@lem8142598 _144138 _107862 _107864 h1)). Qed.
Lemma lem8142602 (b : Prop) (a : Prop) : term813 b a.
Proof. exact (EQ_MP (@lem21501 b a) (@lem21598 b a)). Qed.
Lemma lem8142603 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : term814 _144138 _107863 _107864 _107861 _107862.
Proof. exact (@lem8142602 (@I ((_144138 -> Prop) -> Prop) _107863 _107864) (@I ((_144138 -> Prop) -> Prop) _107861 _107862)). Qed.
Lemma lem8142604 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107863 : type686 _144138) (h1 : _107862 = _107864) (h2 : _107861 = _107863) : term815 _144138 _107863 _107864 _107861 _107862.
Proof. exact (@lem8142603 _144138 _107863 _107864 _107861 _107862 (@lem8142600 _144138 _107862 _107864 _107861 _107863 h1 h2)). Qed.
Lemma lem8142605 {_144138 : Type'} (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) (h1 : _107862 = _107864) : term816 _144138 _107863 _107864 _107861 _107862.
Proof. exact (fun h0 : _107861 = _107863 => @lem8142604 _144138 _107862 _107864 _107861 _107863 h1 h0). Qed.
Lemma lem8142607 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8142608 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term816 _144138 _107863 _107864 _107861 _107862) = (term817 _144138 _107863 _107864 _107861 _107862).
Proof. exact (@lem8142607 (_107861 = _107863) (term815 _144138 _107863 _107864 _107861 _107862)). Qed.
Lemma lem8142609 {_144138 : Type'} (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) (h1 : _107862 = _107864) : term817 _144138 _107863 _107864 _107861 _107862.
Proof. exact (EQ_MP (@lem8142608 _144138 _107863 _107864 _107861 _107862) (@lem8142605 _144138 _107863 _107861 _107862 _107864 h1)). Qed.
Lemma lem8142610 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : term818 _144138 _107863 _107864 _107861 _107862.
Proof. exact (fun h0 : _107862 = _107864 => @lem8142609 _144138 _107863 _107861 _107862 _107864 h0). Qed.
Lemma lem8142612 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8142613 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term818 _144138 _107863 _107864 _107861 _107862) = (term819 _144138 _107863 _107864 _107861 _107862).
Proof. exact (@lem8142612 (_107862 = _107864) (term817 _144138 _107863 _107864 _107861 _107862)). Qed.
Lemma lem8142614 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : term819 _144138 _107863 _107864 _107861 _107862.
Proof. exact (EQ_MP (@lem8142613 _144138 _107863 _107864 _107861 _107862) (@lem8142610 _144138 _107863 _107864 _107861 _107862)). Qed.
Lemma lem8142895 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8141630 _144105 _144106 P p f a) (@lem8141524 _144105 _144106 P p f a h1)). Qed.
Lemma lem8142896 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8142895 _144105 _144106 P p f a h1). Qed.
Lemma lem8142898 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8142899 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8142898 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8142900 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8142899 _144105 _144106 P p f a) (@lem8142896 _144105 _144106 P p f a h1)). Qed.
Lemma lem8142902 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8141648 _144105 _144106 P p g a) (@lem8141530 _144105 _144106 P p g a h1)). Qed.
Lemma lem8142903 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8142902 _144105 _144106 P p g a h1). Qed.
Lemma lem8142905 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8142906 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8142905 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8142907 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8142906 _144105 _144106 P p g a) (@lem8142903 _144105 _144106 P p g a h1)). Qed.
Lemma lem8142909 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8141630 _144105 _144106 P p f a) (@lem8141524 _144105 _144106 P p f a h1)). Qed.
Lemma lem8142910 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8142909 _144105 _144106 P p f a h1). Qed.
Lemma lem8142912 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8142913 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8142912 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8142914 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8142913 _144105 _144106 P p f a) (@lem8142910 _144105 _144106 P p f a h1)). Qed.
Lemma lem8142916 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8141648 _144105 _144106 P p g a) (@lem8141530 _144105 _144106 P p g a h1)). Qed.
Lemma lem8142917 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8142916 _144105 _144106 P p g a h1). Qed.
Lemma lem8142919 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8142920 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8142919 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8142921 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8142920 _144105 _144106 P p g a) (@lem8142917 _144105 _144106 P p g a h1)). Qed.
Lemma lem8142924 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8142925 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term608 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a) => @lem8142924 _144105 _144106 _144138 _144141 P f c e g a h1). Qed.
Lemma lem8142927 (p : Prop) : (term609 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8142928 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term608 _144105 _144106 _144138 _144141 P f c e g a) = (term607 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8142927 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8142929 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8142928 _144105 _144106 _144138 _144141 P f c e g a) (@lem8142925 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8142945 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8142946 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857).
Proof. exact (@lem8142945 (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (term551 _144105 _144106 P p _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8142960 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8142961 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term611 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term612 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857).
Proof. exact (@lem8142960 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8142969 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) = (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8142970 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107855 c e p _107856 _107857).
Proof. exact (MK_COMB (@lem8142969 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (@lem8142961 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857)). Qed.
Lemma lem8142974 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8142975 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107855 c e p _107856 _107857) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857).
Proof. exact (@lem8142974 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8142993 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857).
Proof. exact (TRANS (@lem8142970 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107855 c e p _107856 _107857) (@lem8142975 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857)). Qed.
Lemma lem8142994 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857).
Proof. exact (TRANS (@lem8142946 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) (@lem8142993 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857)). Qed.
Lemma lem8142995 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8142996 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857).
Proof. exact (MK_COMB (@lem8142995 _144105 _144106 P p _107855 _107857) (@lem8142994 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857)). Qed.
Lemma lem8143000 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143001 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857) = (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857).
Proof. exact (@lem8143000 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107855 _107857) (term618 _144104 _144105 _144106 P lt2 z _107855 s p _107856 _107857)). Qed.
Lemma lem8143017 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143018 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term619 _144104 _144105 _144106 P lt2 z _107855 s p _107856 _107857) = (term620 _144104 _144105 _144106 P lt2 z s _107855 p _107856 _107857).
Proof. exact (@lem8143017 (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (term551 _144105 _144106 P p _107855 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143034 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) = (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143035 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143034 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) (@lem8143018 _144104 _144105 _144106 P lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143046 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143001 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857) (@lem8143035 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143047 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8142996 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107855 s p _107856 _107857) (@lem8143046 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143048 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8143049 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term623 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term624 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143048) (@lem8143047 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143073 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8143074 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term611 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term612 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857).
Proof. exact (@lem8143073 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143082 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143083 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term625 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term626 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857).
Proof. exact (MK_COMB (@lem8143082 _144105 _144106 P p _107855 _107857) (@lem8143074 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857)). Qed.
Lemma lem8143087 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143088 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term626 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857) = (term627 _144105 _144106 _144138 _144141 P c e _107855 p _107856 _107857).
Proof. exact (@lem8143087 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107855 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143106 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term625 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term627 _144105 _144106 _144138 _144141 P c e _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143083 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857) (@lem8143088 _144105 _144106 _144138 _144141 P c e _107855 p _107856 _107857)). Qed.
Lemma lem8143107 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) = (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8143108 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143107 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (@lem8143106 _144105 _144106 _144138 _144141 P c e _107855 p _107856 _107857)). Qed.
Lemma lem8143112 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143113 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107855 p _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (@lem8143112 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) (term630 _144105 _144106 P _107855 p _107856 _107857)). Qed.
Lemma lem8143141 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143108 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107855 p _107856 _107857) (@lem8143113 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143142 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857)) = ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)).
Proof. exact (MK_COMB (@lem8143049 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857) (@lem8143141 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143144 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8143145 (x : Prop) : (x = x) = True.
Proof. exact (@lem8143144 Prop x). Qed.
Lemma lem8143146 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)) = True.
Proof. exact (@lem8143145 (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143147 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857)) = True.
Proof. exact (TRANS (@lem8143142 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857) (@lem8143146 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107855 p _107856 _107857)). Qed.
Lemma lem8143148 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : True = ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857)).
Proof. exact (SYM (@lem8143147 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857)). Qed.
Lemma lem8143149 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107855 c e _107856 _107857) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857).
Proof. exact (EQ_MP (@lem8143148 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) (@lem0)). Qed.
Lemma lem8143150 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857.
Proof. exact (EQ_MP (@lem8143149 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) (@lem8142577 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8143152 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8143153 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857).
Proof. exact (@lem8143152 (term625 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8143155 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143156 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term635 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term636 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (@lem8143155 (term551 _144105 _144106 P p _107855 _107857) (term611 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857)). Qed.
Lemma lem8143158 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143159 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term637 _144105 _144106 P p _107855 _107857) = (term503 _144105 _144106 P p _107855 _107857).
Proof. exact (@lem8143158 (term503 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143160 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143161 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term638 _144105 _144106 P p _107855 _107857) = (term639 _144105 _144106 P p _107855 _107857).
Proof. exact (MK_COMB (@lem8143160) (@lem8143159 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143163 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143164 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term640 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term641 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (@lem8143163 (term551 _144105 _144106 P p _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8143166 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143167 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term637 _144105 _144106 P p _107856 _107857) = (term503 _144105 _144106 P p _107856 _107857).
Proof. exact (@lem8143166 (term503 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143168 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143169 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term638 _144105 _144106 P p _107856 _107857) = (term639 _144105 _144106 P p _107856 _107857).
Proof. exact (MK_COMB (@lem8143168) (@lem8143167 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143170 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term607 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) = (term607 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857).
Proof. exact (eq_refl (term607 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143171 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term641 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term642 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8143169 _144105 _144106 P p _107856 _107857) (@lem8143170 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143172 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term640 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term642 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (TRANS (@lem8143164 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) (@lem8143171 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857)). Qed.
Lemma lem8143173 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term636 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term643 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8143161 _144105 _144106 P p _107855 _107857) (@lem8143172 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857)). Qed.
Lemma lem8143174 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term635 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term643 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (TRANS (@lem8143156 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) (@lem8143173 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857)). Qed.
Lemma lem8143175 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143176 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term644 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term645 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8143175) (@lem8143174 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857)). Qed.
Lemma lem8143177 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857) = (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857).
Proof. exact (eq_refl (term546 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8143178 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857).
Proof. exact (MK_COMB (@lem8143176 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) (@lem8143177 _144104 _144105 _144106 P lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8143179 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (s : P -> _144104) (_107857 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107855 c e _107856 _107857) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857).
Proof. exact (TRANS (@lem8143153 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857) (@lem8143178 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857)). Qed.
Lemma lem8143181 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p g a) : term642 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8142921 _144105 _144106 P p g a h2) (@lem8142929 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8143182 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p f a) (h3 : p g a) : term643 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8142914 _144105 _144106 P p f a h2) (@lem8143181 _144105 _144106 _144138 _144141 P f c e p g a h1 h3)). Qed.
Lemma lem8143184 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857.
Proof. exact (EQ_MP (@lem8143179 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857) (@lem8143150 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8143185 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107855 _107856 s _107857.
Proof. exact (@lem8143184 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1). Qed.
Lemma lem8143186 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z f g s a.
Proof. exact (@lem8143185 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8143189 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (@lem8143186 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1 (@lem8143182 _144105 _144106 _144138 _144141 P c e f p g a h2 h3 h4)). Qed.
Lemma lem8143190 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term647 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (fun h0 : term648 _144104 _144105 _144106 P lt2 z f g s a => @lem8143189 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4). Qed.
Lemma lem8143192 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143193 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term647 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8143192 (term546 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8143194 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (EQ_MP (@lem8143193 _144104 _144105 _144106 P lt2 z f g s a) (@lem8143190 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8143200 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8143201 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107854) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a).
Proof. exact (@lem8143200 ((@I (_144105 -> _144106) f _107854) = (@I (_144105 -> _144106) g _107854)) (term510 _144104 _144105 P lt2 _107854 s a)). Qed.
Lemma lem8143209 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8143210 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term650 _144104 _144105 _144106 P lt2 s a f g _107854) = (term651 _144104 _144105 _144106 P f g lt2 _107854 s a).
Proof. exact (MK_COMB (@lem8143209) (@lem8143201 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143218 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term649 _144104 _144105 _144106 P f g lt2 _107854 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a).
Proof. exact (eq_refl (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143219 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107854) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)) = ((term649 _144104 _144105 _144106 P f g lt2 _107854 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)).
Proof. exact (MK_COMB (@lem8143210 _144104 _144105 _144106 P f g lt2 _107854 s a) (@lem8143218 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143221 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8143222 (x : Prop) : (x = x) = True.
Proof. exact (@lem8143221 Prop x). Qed.
Lemma lem8143223 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : ((term649 _144104 _144105 _144106 P f g lt2 _107854 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)) = True.
Proof. exact (@lem8143222 (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143224 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107854) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)) = True.
Proof. exact (TRANS (@lem8143219 _144104 _144105 _144106 P f g lt2 _107854 s a) (@lem8143223 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143225 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : True = ((term513 _144104 _144105 _144106 P lt2 s a f g _107854) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a)).
Proof. exact (SYM (@lem8143224 _144104 _144105 _144106 P f g lt2 _107854 s a)). Qed.
Lemma lem8143226 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107854) = (term649 _144104 _144105 _144106 P f g lt2 _107854 s a).
Proof. exact (EQ_MP (@lem8143225 _144104 _144105 _144106 P f g lt2 _107854 s a) (@lem0)). Qed.
Lemma lem8143227 {_144104 _144105 _144106 P : Type'} (_107854 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term649 _144104 _144105 _144106 P f g lt2 _107854 s a.
Proof. exact (EQ_MP (@lem8143226 _144104 _144105 _144106 P f g lt2 _107854 s a) (@lem8142517 _144104 _144105 _144106 P _107854 lt2 s a f g h1)). Qed.
Lemma lem8143229 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8143230 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107854 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107854 s a) = (term652 _144104 _144105 _144106 P lt2 s a f g _107854).
Proof. exact (@lem8143229 (term510 _144104 _144105 P lt2 _107854 s a) ((@I (_144105 -> _144106) f _107854) = (@I (_144105 -> _144106) g _107854))). Qed.
Lemma lem8143232 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143233 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term653 _144104 _144105 P lt2 _107854 s a) = (term508 _144104 _144105 P lt2 _107854 s a).
Proof. exact (@lem8143232 (term508 _144104 _144105 P lt2 _107854 s a)). Qed.
Lemma lem8143234 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143235 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107854 : _144105) (s : P -> _144104) (a : P) : (term654 _144104 _144105 P lt2 _107854 s a) = (term655 _144104 _144105 P lt2 _107854 s a).
Proof. exact (MK_COMB (@lem8143234) (@lem8143233 _144104 _144105 P lt2 _107854 s a)). Qed.
Lemma lem8143236 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (_107854 : _144105) : ((@I (_144105 -> _144106) f _107854) = (@I (_144105 -> _144106) g _107854)) = ((@I (_144105 -> _144106) f _107854) = (@I (_144105 -> _144106) g _107854)).
Proof. exact (eq_refl ((@I (_144105 -> _144106) f _107854) = (@I (_144105 -> _144106) g _107854))). Qed.
Lemma lem8143237 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107854 : _144105) : (term652 _144104 _144105 _144106 P lt2 s a f g _107854) = (term656 _144104 _144105 _144106 P lt2 s a f g _107854).
Proof. exact (MK_COMB (@lem8143235 _144104 _144105 P lt2 _107854 s a) (@lem8143236 _144105 _144106 f g _107854)). Qed.
Lemma lem8143238 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107854 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107854 s a) = (term656 _144104 _144105 _144106 P lt2 s a f g _107854).
Proof. exact (TRANS (@lem8143230 _144104 _144105 _144106 P lt2 s a f g _107854) (@lem8143237 _144104 _144105 _144106 P lt2 s a f g _107854)). Qed.
Lemma lem8143241 {_144104 _144105 _144106 P : Type'} (_107854 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107854.
Proof. exact (EQ_MP (@lem8143238 _144104 _144105 _144106 P lt2 s a f g _107854) (@lem8143227 _144104 _144105 _144106 P _107854 lt2 s a f g h1)). Qed.
Lemma lem8143242 {_144104 _144105 _144106 P : Type'} (_107854 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107854.
Proof. exact (@lem8143241 _144104 _144105 _144106 P _107854 lt2 s a f g h1). Qed.
Lemma lem8143243 {_144104 _144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term657 _144104 _144105 _144106 P lt2 s z f g a.
Proof. exact (@lem8143242 _144104 _144105 _144106 P (term529 _144105 _144106 P z f g a) lt2 s a f g h1). Qed.
Lemma lem8143246 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8143243 _144104 _144105 _144106 P z lt2 s a f g h1 (@lem8143194 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h2 h3 h4 h5)). Qed.
Lemma lem8143247 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term658 _144105 _144106 P z f g a.
Proof. exact (fun h0 : term539 _144105 _144106 P z f g a => @lem8143246 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8143249 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143250 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term658 _144105 _144106 P z f g a) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (@lem8143249 ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a))). Qed.
Lemma lem8143251 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (EQ_MP (@lem8143250 _144105 _144106 P z f g a) (@lem8143247 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143267 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143268 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term659 _144105 _144106 _144138 _144141 P z p _107855 c e _107856 _107857).
Proof. exact (@lem8143267 (term539 _144105 _144106 P z _107855 _107856 _107857) (term551 _144105 _144106 P p _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8143284 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8143285 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term611 _144105 _144106 _144138 _144141 P p _107855 c e _107856 _107857) = (term612 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857).
Proof. exact (@lem8143284 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143293 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term660 _144105 _144106 P z _107855 _107856 _107857) = (term660 _144105 _144106 P z _107855 _107856 _107857).
Proof. exact (eq_refl (term660 _144105 _144106 P z _107855 _107856 _107857)). Qed.
Lemma lem8143294 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107855 c e _107856 _107857) = (term661 _144105 _144106 _144138 _144141 P z _107855 c e p _107856 _107857).
Proof. exact (MK_COMB (@lem8143293 _144105 _144106 P z _107855 _107856 _107857) (@lem8143285 _144105 _144106 _144138 _144141 P _107855 c e p _107856 _107857)). Qed.
Lemma lem8143298 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143299 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term661 _144105 _144106 _144138 _144141 P z _107855 c e p _107856 _107857) = (term662 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (@lem8143298 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term539 _144105 _144106 P z _107855 _107856 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143319 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107855 c e _107856 _107857) = (term662 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143294 _144105 _144106 _144138 _144141 P z _107855 c e p _107856 _107857) (@lem8143299 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143320 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term662 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143268 _144105 _144106 _144138 _144141 P z p _107855 c e _107856 _107857) (@lem8143319 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143321 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143322 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term663 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143321 _144105 _144106 P p _107855 _107857) (@lem8143320 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143326 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143327 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) = (term664 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (@lem8143326 ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) (term551 _144105 _144106 P p _107855 _107857) (term665 _144105 _144106 P z _107855 p _107856 _107857)). Qed.
Lemma lem8143343 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143344 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term666 _144105 _144106 P z _107855 p _107856 _107857) = (term667 _144105 _144106 P z _107855 p _107856 _107857).
Proof. exact (@lem8143343 (term539 _144105 _144106 P z _107855 _107856 _107857) (term551 _144105 _144106 P p _107855 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143362 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) = (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143363 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term664 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143362 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) (@lem8143344 _144105 _144106 P z _107855 p _107856 _107857)). Qed.
Lemma lem8143374 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143327 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) (@lem8143363 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143375 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143322 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) (@lem8143374 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143376 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8143377 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term669 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term670 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143376) (@lem8143375 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143403 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8143404 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term574 _144105 _144106 P p z _107855 _107856 _107857) = (term665 _144105 _144106 P z _107855 p _107856 _107857).
Proof. exact (@lem8143403 (term539 _144105 _144106 P z _107855 _107856 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143412 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term552 _144105 _144106 P p _107855 _107857) = (term552 _144105 _144106 P p _107855 _107857).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143413 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term579 _144105 _144106 P p z _107855 _107856 _107857) = (term666 _144105 _144106 P z _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143412 _144105 _144106 P p _107855 _107857) (@lem8143404 _144105 _144106 P z _107855 p _107856 _107857)). Qed.
Lemma lem8143417 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143418 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term666 _144105 _144106 P z _107855 p _107856 _107857) = (term667 _144105 _144106 P z _107855 p _107856 _107857).
Proof. exact (@lem8143417 (term539 _144105 _144106 P z _107855 _107856 _107857) (term551 _144105 _144106 P p _107855 _107857) (term551 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143436 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term579 _144105 _144106 P p z _107855 _107856 _107857) = (term667 _144105 _144106 P z _107855 p _107856 _107857).
Proof. exact (TRANS (@lem8143413 _144105 _144106 P z _107855 p _107856 _107857) (@lem8143418 _144105 _144106 P z _107855 p _107856 _107857)). Qed.
Lemma lem8143437 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) = (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143438 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857).
Proof. exact (MK_COMB (@lem8143437 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857) (@lem8143436 _144105 _144106 P z _107855 p _107856 _107857)). Qed.
Lemma lem8143449 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857)) = ((term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)).
Proof. exact (MK_COMB (@lem8143377 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) (@lem8143438 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143451 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8143452 (x : Prop) : (x = x) = True.
Proof. exact (@lem8143451 Prop x). Qed.
Lemma lem8143453 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) = (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)) = True.
Proof. exact (@lem8143452 (term668 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143454 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857)) = True.
Proof. exact (TRANS (@lem8143449 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857) (@lem8143453 _144105 _144106 _144138 _144141 P c e z _107855 p _107856 _107857)). Qed.
Lemma lem8143455 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : True = ((term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857)).
Proof. exact (SYM (@lem8143454 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857)). Qed.
Lemma lem8143456 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857).
Proof. exact (EQ_MP (@lem8143455 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857) (@lem0)). Qed.
Lemma lem8143457 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857.
Proof. exact (EQ_MP (@lem8143456 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857) (@lem8142595 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8143459 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8143460 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857) = (term672 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (@lem8143459 (term579 _144105 _144106 P p z _107855 _107856 _107857) ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8143462 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143463 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term673 _144105 _144106 P p z _107855 _107856 _107857) = (term674 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (@lem8143462 (term551 _144105 _144106 P p _107855 _107857) (term574 _144105 _144106 P p z _107855 _107856 _107857)). Qed.
Lemma lem8143465 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143466 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term637 _144105 _144106 P p _107855 _107857) = (term503 _144105 _144106 P p _107855 _107857).
Proof. exact (@lem8143465 (term503 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143467 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143468 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107857 : P) : (term638 _144105 _144106 P p _107855 _107857) = (term639 _144105 _144106 P p _107855 _107857).
Proof. exact (MK_COMB (@lem8143467) (@lem8143466 _144105 _144106 P p _107855 _107857)). Qed.
Lemma lem8143470 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143471 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term675 _144105 _144106 P p z _107855 _107856 _107857) = (term676 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (@lem8143470 (term551 _144105 _144106 P p _107856 _107857) (term539 _144105 _144106 P z _107855 _107856 _107857)). Qed.
Lemma lem8143473 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143474 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term637 _144105 _144106 P p _107856 _107857) = (term503 _144105 _144106 P p _107856 _107857).
Proof. exact (@lem8143473 (term503 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143475 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143476 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term638 _144105 _144106 P p _107856 _107857) = (term639 _144105 _144106 P p _107856 _107857).
Proof. exact (MK_COMB (@lem8143475) (@lem8143474 _144105 _144106 P p _107856 _107857)). Qed.
Lemma lem8143478 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143479 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term677 _144105 _144106 P z _107855 _107856 _107857) = ((term532 _144105 _144106 P z _107855 _107856 _107857) = (term535 _144105 _144106 P z _107855 _107856 _107857)).
Proof. exact (@lem8143478 ((term532 _144105 _144106 P z _107855 _107856 _107857) = (term535 _144105 _144106 P z _107855 _107856 _107857))). Qed.
Lemma lem8143480 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term676 _144105 _144106 P p z _107855 _107856 _107857) = (term678 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (MK_COMB (@lem8143476 _144105 _144106 P p _107856 _107857) (@lem8143479 _144105 _144106 P z _107855 _107856 _107857)). Qed.
Lemma lem8143481 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term675 _144105 _144106 P p z _107855 _107856 _107857) = (term678 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (TRANS (@lem8143471 _144105 _144106 P p z _107855 _107856 _107857) (@lem8143480 _144105 _144106 P p z _107855 _107856 _107857)). Qed.
Lemma lem8143482 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term674 _144105 _144106 P p z _107855 _107856 _107857) = (term679 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (MK_COMB (@lem8143468 _144105 _144106 P p _107855 _107857) (@lem8143481 _144105 _144106 P p z _107855 _107856 _107857)). Qed.
Lemma lem8143483 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term673 _144105 _144106 P p z _107855 _107856 _107857) = (term679 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (TRANS (@lem8143463 _144105 _144106 P p z _107855 _107856 _107857) (@lem8143482 _144105 _144106 P p z _107855 _107856 _107857)). Qed.
Lemma lem8143484 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143485 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) : (term680 _144105 _144106 P p z _107855 _107856 _107857) = (term681 _144105 _144106 P p z _107855 _107856 _107857).
Proof. exact (MK_COMB (@lem8143484) (@lem8143483 _144105 _144106 P p z _107855 _107856 _107857)). Qed.
Lemma lem8143486 {_144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)) = ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e _107855 _107857) = (term520 _144105 _144106 _144138 _144141 P c e _107856 _107857))). Qed.
Lemma lem8143487 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term672 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) = (term682 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (MK_COMB (@lem8143485 _144105 _144106 P p z _107855 _107856 _107857) (@lem8143486 _144105 _144106 _144138 _144141 P _107855 c e _107856 _107857)). Qed.
Lemma lem8143488 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107855 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107856 : _144105 -> _144106) (_107857 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107855 _107856 _107857) = (term682 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857).
Proof. exact (TRANS (@lem8143460 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) (@lem8143487 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857)). Qed.
Lemma lem8143490 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term678 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8142907 _144105 _144106 P p g a h5) (@lem8143251 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143491 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term679 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8142900 _144105 _144106 P p f a h4) (@lem8143490 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143493 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857.
Proof. exact (EQ_MP (@lem8143488 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857) (@lem8143457 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1)). Qed.
Lemma lem8143494 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107855 : _144105 -> _144106) (_107856 : _144105 -> _144106) (_107857 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107855 c e _107856 _107857.
Proof. exact (@lem8143493 _144104 _144105 _144106 _144138 _144141 P _107855 _107856 _107857 p lt2 s z c e h1). Qed.
Lemma lem8143495 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z f c e g a.
Proof. exact (@lem8143494 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8143498 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8143495 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h2 (@lem8143491 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143499 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term683 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term607 _144105 _144106 _144138 _144141 P f c e g a => @lem8143498 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h3 h4). Qed.
Lemma lem8143501 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143502 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term683 _144105 _144106 _144138 _144141 P f c e g a) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8143501 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8143503 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8143502 _144105 _144106 _144138 _144141 P f c e g a) (@lem8143499 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8143505 {_144138 : Type'} (x : type686 _144138) : x = x.
Proof. exact (@lem21386 (type686 _144138) x). Qed.
Lemma lem8143506 {_144138 : Type'} (x : type686 _144138) : x = x.
Proof. exact (@lem8143505 _144138 x). Qed.
Lemma lem8143507 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (@lem8143506 _144138 (@ex1 _144138)). Qed.
Lemma lem8143508 {_144138 : Type'} : term820 _144138.
Proof. exact (fun h0 : term821 _144138 => @lem8143507 _144138). Qed.
Lemma lem8143510 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143511 {_144138 : Type'} : (term820 _144138) = ((@ex1 _144138) = (@ex1 _144138)).
Proof. exact (@lem8143510 ((@ex1 _144138) = (@ex1 _144138))). Qed.
Lemma lem8143512 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (EQ_MP (@lem8143511 _144138) (@lem8143508 _144138)). Qed.
Lemma lem8143514 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term811 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8141750 _144105 _144106 _144138 _144141 P c e f a) (@lem8141599 _144105 _144106 _144138 _144141 P c e f a h1)). Qed.
Lemma lem8143515 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term822 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (fun h0 : term812 _144105 _144106 _144138 _144141 P c e f a => @lem8143514 _144105 _144106 _144138 _144141 P c e f a h1). Qed.
Lemma lem8143517 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143518 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term822 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8143517 (term811 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8143519 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term811 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8143518 _144105 _144106 _144138 _144141 P c e f a) (@lem8143515 _144105 _144106 _144138 _144141 P c e f a h1)). Qed.
Lemma lem8143537 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143538 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term817 _144138 _107863 _107864 _107861 _107862) = (term823 _144138 _107864 _107863 _107861 _107862).
Proof. exact (@lem8143537 (@I ((_144138 -> Prop) -> Prop) _107863 _107864) (term824 _144138 _107861 _107863) (term825 _144138 _107861 _107862)). Qed.
Lemma lem8143556 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) : (term688 _144138 _107862 _107864) = (term688 _144138 _107862 _107864).
Proof. exact (eq_refl (term688 _144138 _107862 _107864)). Qed.
Lemma lem8143557 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term819 _144138 _107863 _107864 _107861 _107862) = (term826 _144138 _107864 _107863 _107861 _107862).
Proof. exact (MK_COMB (@lem8143556 _144138 _107862 _107864) (@lem8143538 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143561 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8143562 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term826 _144138 _107864 _107863 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862).
Proof. exact (@lem8143561 (@I ((_144138 -> Prop) -> Prop) _107863 _107864) (term691 _144138 _107862 _107864) (term828 _144138 _107863 _107861 _107862)). Qed.
Lemma lem8143592 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term819 _144138 _107863 _107864 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862).
Proof. exact (TRANS (@lem8143557 _144138 _107864 _107863 _107861 _107862) (@lem8143562 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143593 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8143594 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term829 _144138 _107863 _107864 _107861 _107862) = (term830 _144138 _107864 _107863 _107861 _107862).
Proof. exact (MK_COMB (@lem8143593) (@lem8143592 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143624 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term827 _144138 _107864 _107863 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862).
Proof. exact (eq_refl (term827 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143625 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : ((term819 _144138 _107863 _107864 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862)) = ((term827 _144138 _107864 _107863 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862)).
Proof. exact (MK_COMB (@lem8143594 _144138 _107864 _107863 _107861 _107862) (@lem8143624 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143627 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8143628 (x : Prop) : (x = x) = True.
Proof. exact (@lem8143627 Prop x). Qed.
Lemma lem8143629 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : ((term827 _144138 _107864 _107863 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862)) = True.
Proof. exact (@lem8143628 (term827 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143630 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : ((term819 _144138 _107863 _107864 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862)) = True.
Proof. exact (TRANS (@lem8143625 _144138 _107864 _107863 _107861 _107862) (@lem8143629 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143631 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : True = ((term819 _144138 _107863 _107864 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862)).
Proof. exact (SYM (@lem8143630 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143632 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term819 _144138 _107863 _107864 _107861 _107862) = (term827 _144138 _107864 _107863 _107861 _107862).
Proof. exact (EQ_MP (@lem8143631 _144138 _107864 _107863 _107861 _107862) (@lem0)). Qed.
Lemma lem8143633 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : term827 _144138 _107864 _107863 _107861 _107862.
Proof. exact (EQ_MP (@lem8143632 _144138 _107864 _107863 _107861 _107862) (@lem8142614 _144138 _107863 _107864 _107861 _107862)). Qed.
Lemma lem8143635 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8143636 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : (term827 _144138 _107864 _107863 _107861 _107862) = (term831 _144138 _107861 _107862 _107863 _107864).
Proof. exact (@lem8143635 (term832 _144138 _107864 _107863 _107861 _107862) (@I ((_144138 -> Prop) -> Prop) _107863 _107864)). Qed.
Lemma lem8143638 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143639 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term833 _144138 _107864 _107863 _107861 _107862) = (term834 _144138 _107864 _107863 _107861 _107862).
Proof. exact (@lem8143638 (term691 _144138 _107862 _107864) (term828 _144138 _107863 _107861 _107862)). Qed.
Lemma lem8143641 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143642 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) : (term698 _144138 _107862 _107864) = (_107862 = _107864).
Proof. exact (@lem8143641 (_107862 = _107864)). Qed.
Lemma lem8143643 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143644 {_144138 : Type'} (_107862 : _144138 -> Prop) (_107864 : _144138 -> Prop) : (term699 _144138 _107862 _107864) = (term700 _144138 _107862 _107864).
Proof. exact (MK_COMB (@lem8143643) (@lem8143642 _144138 _107862 _107864)). Qed.
Lemma lem8143646 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8143647 {_144138 : Type'} (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term835 _144138 _107863 _107861 _107862) = (term836 _144138 _107863 _107861 _107862).
Proof. exact (@lem8143646 (term824 _144138 _107861 _107863) (term825 _144138 _107861 _107862)). Qed.
Lemma lem8143649 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143650 {_144138 : Type'} (_107861 : type686 _144138) (_107863 : type686 _144138) : (term837 _144138 _107861 _107863) = (_107861 = _107863).
Proof. exact (@lem8143649 (_107861 = _107863)). Qed.
Lemma lem8143651 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8143652 {_144138 : Type'} (_107861 : type686 _144138) (_107863 : type686 _144138) : (term838 _144138 _107861 _107863) = (term839 _144138 _107861 _107863).
Proof. exact (MK_COMB (@lem8143651) (@lem8143650 _144138 _107861 _107863)). Qed.
Lemma lem8143654 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8143655 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term840 _144138 _107861 _107862) = (@I ((_144138 -> Prop) -> Prop) _107861 _107862).
Proof. exact (@lem8143654 (@I ((_144138 -> Prop) -> Prop) _107861 _107862)). Qed.
Lemma lem8143656 {_144138 : Type'} (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term836 _144138 _107863 _107861 _107862) = (term841 _144138 _107863 _107861 _107862).
Proof. exact (MK_COMB (@lem8143652 _144138 _107861 _107863) (@lem8143655 _144138 _107861 _107862)). Qed.
Lemma lem8143657 {_144138 : Type'} (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term835 _144138 _107863 _107861 _107862) = (term841 _144138 _107863 _107861 _107862).
Proof. exact (TRANS (@lem8143647 _144138 _107863 _107861 _107862) (@lem8143656 _144138 _107863 _107861 _107862)). Qed.
Lemma lem8143658 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term834 _144138 _107864 _107863 _107861 _107862) = (term842 _144138 _107864 _107863 _107861 _107862).
Proof. exact (MK_COMB (@lem8143644 _144138 _107862 _107864) (@lem8143657 _144138 _107863 _107861 _107862)). Qed.
Lemma lem8143659 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term833 _144138 _107864 _107863 _107861 _107862) = (term842 _144138 _107864 _107863 _107861 _107862).
Proof. exact (TRANS (@lem8143639 _144138 _107864 _107863 _107861 _107862) (@lem8143658 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143660 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143661 {_144138 : Type'} (_107864 : _144138 -> Prop) (_107863 : type686 _144138) (_107861 : type686 _144138) (_107862 : _144138 -> Prop) : (term843 _144138 _107864 _107863 _107861 _107862) = (term844 _144138 _107864 _107863 _107861 _107862).
Proof. exact (MK_COMB (@lem8143660) (@lem8143659 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143662 {_144138 : Type'} (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : (@I ((_144138 -> Prop) -> Prop) _107863 _107864) = (@I ((_144138 -> Prop) -> Prop) _107863 _107864).
Proof. exact (eq_refl (@I ((_144138 -> Prop) -> Prop) _107863 _107864)). Qed.
Lemma lem8143663 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : (term831 _144138 _107861 _107862 _107863 _107864) = (term845 _144138 _107861 _107862 _107863 _107864).
Proof. exact (MK_COMB (@lem8143661 _144138 _107864 _107863 _107861 _107862) (@lem8143662 _144138 _107863 _107864)). Qed.
Lemma lem8143664 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : (term827 _144138 _107864 _107863 _107861 _107862) = (term845 _144138 _107861 _107862 _107863 _107864).
Proof. exact (TRANS (@lem8143636 _144138 _107861 _107862 _107863 _107864) (@lem8143663 _144138 _107861 _107862 _107863 _107864)). Qed.
Lemma lem8143666 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e f a) : term846 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (conj (@lem8143512 _144138) (@lem8143519 _144105 _144106 _144138 _144141 P c e f a h1)). Qed.
Lemma lem8143667 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : p f a) (h5 : p g a) : term847 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (conj (@lem8143503 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h4 h5) (@lem8143666 _144105 _144106 _144138 _144141 P c e f a h3)). Qed.
Lemma lem8143669 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : term845 _144138 _107861 _107862 _107863 _107864.
Proof. exact (EQ_MP (@lem8143664 _144138 _107861 _107862 _107863 _107864) (@lem8143633 _144138 _107864 _107863 _107861 _107862)). Qed.
Lemma lem8143670 {_144138 : Type'} (_107861 : type686 _144138) (_107862 : _144138 -> Prop) (_107863 : type686 _144138) (_107864 : _144138 -> Prop) : term845 _144138 _107861 _107862 _107863 _107864.
Proof. exact (@lem8143669 _144138 _107861 _107862 _107863 _107864). Qed.
Lemma lem8143671 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term848 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8143670 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e f a) (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143674 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : p f a) (h5 : p g a) : term811 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (@lem8143671 _144105 _144106 _144138 _144141 P f c e g a (@lem8143667 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143675 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : p f a) (h5 : p g a) : term822 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun h0 : term812 _144105 _144106 _144138 _144141 P c e g a => @lem8143674 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8143677 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143678 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term822 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8143677 (term811 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143679 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : p f a) (h5 : p g a) : term811 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8143678 _144105 _144106 _144138 _144141 P c e g a) (@lem8143675 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8143682 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8143684 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term812 _144105 _144106 _144138 _144141 P c e g a) = (term849 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8143682 (term811 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143687 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e g a) : term849 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8143684 _144105 _144106 _144138 _144141 P c e g a) (@lem8142521 _144105 _144106 _144138 _144141 P c e g a h1)). Qed.
Lemma lem8143690 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : term161 _144105 _144106 _144138 _144141 P c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (@lem8143687 _144105 _144106 _144138 _144141 P c e g a h4 (@lem8143679 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h5 h6)). Qed.
Lemma lem8143691 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : term161 _144105 _144106 _144138 _144141 P c e g a) (h5 : p f a) (h6 : p g a) : term710.
Proof. exact (fun h0 : ~ False => @lem8143690 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5 h6). Qed.
Lemma lem8143693 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8143694 : term710 = False.
Proof. exact (@lem8143693 False). Qed.
Lemma lem8143695 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e f a) (h4 : term161 _144105 _144106 _144138 _144141 P c e g a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8143694) (@lem8143691 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8143696 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (ex_elim (@lem8141192 _144104 _144105 _144106 _144141 P p lt2 s e h2) (fun z' : type518 _144105 _144106 P => fun h0 : term411 _144104 _144105 _144106 _144141 P p lt2 s e z' => @lem8143695 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h3 h4 h5 h6 h7)). Qed.
Lemma lem8143697 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (ex_elim (@lem8141518 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h3) (fun z : type518 _144105 _144106 P => fun h0 : term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z => @lem8143696 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h4 h5 h6 h7)). Qed.
Lemma lem8143698 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term161 _144105 _144106 _144138 _144141 P c e g a) = False.
Proof. exact (prop_ext (fun h8 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8143697 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8141605 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8143699 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8143698 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8141605 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8143700 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term146 _144105 _144106 _144138 _144141 P c e f a) = False.
Proof. exact (prop_ext (fun h8 : term146 _144105 _144106 _144138 _144141 P c e f a => @lem8143699 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8141599 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8143701 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8143700 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8141599 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8143702 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (p g a) = False.
Proof. exact (prop_ext (fun h8 : p g a => @lem8143701 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8141530 _144105 _144106 P p g a h7)). Qed.
Lemma lem8143703 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8143702 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8141530 _144105 _144106 P p g a h7)). Qed.
Lemma lem8143704 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (p f a) = False.
Proof. exact (prop_ext (fun h8 : p f a => @lem8143703 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8141524 _144105 _144106 P p f a h6)). Qed.
Lemma lem8143705 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8143704 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8141524 _144105 _144106 P p f a h6)). Qed.
Lemma lem8143706 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term737 _144105 _144106 _144138 _144141 P c e f a _107853.
Proof. exact (fun h0 : term734 _144105 _144106 _144138 _144141 P c e f a _107853 => @lem8143705 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7). Qed.
Lemma lem8143707 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = _107853.
Proof. exact (EQ_MP (@lem8140865 _144105 _144106 _144138 _144141 P c e f a _107853) (@lem8143706 _144104 _144105 _144106 _144138 _144141 P _107853 lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8143708 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term767 _144105 _144106 _144138 _144141 P g c e f a _107853.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8143707 _144104 _144105 _144106 _144138 _144141 P _107853 lt2 s c e f p g a h1 h2 h3 h4 h0 h5 h6). Qed.
Lemma lem8143709 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term768 _144105 _144106 _144138 _144141 P g c e f a _107853.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e f a => @lem8143708 _144104 _144105 _144106 _144138 _144141 P _107853 lt2 s c e f p g a h1 h2 h3 h0 h4 h5). Qed.
Lemma lem8143710 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term769 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a _107853.
Proof. exact (fun h0 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8143709 _144104 _144105 _144106 _144138 _144141 P _107853 lt2 s c e f p g a h0 h1 h2 h3 h4). Qed.
Lemma lem8143711 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (_107853 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term770 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (fun h0 : p g a => @lem8143710 _144104 _144105 _144106 _144138 _144141 P _107853 lt2 s c e f p g a h1 h2 h3 h0). Qed.
Lemma lem8143712 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term771 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (fun h0 : p f a => @lem8143711 _144104 _144105 _144106 _144138 _144141 P g _107853 lt2 s c e p f a h1 h2 h0). Qed.
Lemma lem8143713 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term772 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (fun h0 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8143712 _144104 _144105 _144106 _144138 _144141 P g f a _107853 p lt2 s c e h1 h0). Qed.
Lemma lem8143714 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (_107853 : _144138) : term773 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853.
Proof. exact (fun h0 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8143713 _144104 _144105 _144106 _144138 _144141 P g c f a _107853 p lt2 s e h0). Qed.
Lemma lem8143719 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term777 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (fun _107853 : _144138 => @lem8143714 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a _107853). Qed.
Lemma lem8143724 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term781 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a.
Proof. exact (fun p : type560 _144105 _144106 P => @lem8143719 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a). Qed.
Lemma lem8143729 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term785 _144104 _144105 _144106 _144138 _144141 P s g c e f a.
Proof. exact (fun lt2 : type1470 _144104 _144105 => @lem8143724 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a). Qed.
Lemma lem8143734 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term789 _144104 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (fun s : P -> _144104 => @lem8143729 _144104 _144105 _144106 _144138 _144141 P s g c e f a). Qed.
Lemma lem8143739 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term793 _144104 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (fun g : _144105 -> _144106 => @lem8143734 _144104 _144105 _144106 _144138 _144141 P g c e f a). Qed.
Lemma lem8143744 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term797 _144104 _144105 _144106 _144138 _144141 P e f a.
Proof. exact (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8143739 _144104 _144105 _144106 _144138 _144141 P c e f a). Qed.
Lemma lem8143749 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : term801 _144104 _144105 _144106 _144138 _144141 P f a.
Proof. exact (fun e : type564 _144105 _144106 _144141 P => @lem8143744 _144104 _144105 _144106 _144138 _144141 P e f a). Qed.
Lemma lem8143754 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term805 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (fun f : _144105 -> _144106 => @lem8143749 _144104 _144105 _144106 _144138 _144141 P f a). Qed.
Lemma lem8143759 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term809 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (fun a : P => @lem8143754 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8143760 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term808 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (EQ_MP (@lem8140854 _144104 _144105 _144106 _144138 _144141 P) (@lem8143759 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8143761 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term850 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (@lem8143760 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8143762 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term850 _144104 _144105 _144106 _144138 _144141 P a) = (term804 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (eq_refl (term850 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8143763 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term804 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (EQ_MP (@lem8143762 _144104 _144105 _144106 _144138 _144141 P a) (@lem8143761 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8143764 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) (f : _144105 -> _144106) : term851 _144104 _144105 _144106 _144138 _144141 P a f.
Proof. exact (@lem8143763 _144104 _144105 _144106 _144138 _144141 P a f). Qed.
Lemma lem8143765 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : (term851 _144104 _144105 _144106 _144138 _144141 P a f) = (term800 _144104 _144105 _144106 _144138 _144141 P f a).
Proof. exact (eq_refl (term851 _144104 _144105 _144106 _144138 _144141 P a f)). Qed.
Lemma lem8143766 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) : term800 _144104 _144105 _144106 _144138 _144141 P f a.
Proof. exact (EQ_MP (@lem8143765 _144104 _144105 _144106 _144138 _144141 P f a) (@lem8143764 _144104 _144105 _144106 _144138 _144141 P a f)). Qed.
Lemma lem8143767 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (a : P) (e : type564 _144105 _144106 _144141 P) : term852 _144104 _144105 _144106 _144138 _144141 P f a e.
Proof. exact (@lem8143766 _144104 _144105 _144106 _144138 _144141 P f a e). Qed.
Lemma lem8143768 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term852 _144104 _144105 _144106 _144138 _144141 P f a e) = (term796 _144104 _144105 _144106 _144138 _144141 P e f a).
Proof. exact (eq_refl (term852 _144104 _144105 _144106 _144138 _144141 P f a e)). Qed.
Lemma lem8143769 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term796 _144104 _144105 _144106 _144138 _144141 P e f a.
Proof. exact (EQ_MP (@lem8143768 _144104 _144105 _144106 _144138 _144141 P e f a) (@lem8143767 _144104 _144105 _144106 _144138 _144141 P f a e)). Qed.
Lemma lem8143770 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (c : type566 _144105 _144106 _144138 _144141 P) : term853 _144104 _144105 _144106 _144138 _144141 P e f a c.
Proof. exact (@lem8143769 _144104 _144105 _144106 _144138 _144141 P e f a c). Qed.
Lemma lem8143771 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term853 _144104 _144105 _144106 _144138 _144141 P e f a c) = (term792 _144104 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term853 _144104 _144105 _144106 _144138 _144141 P e f a c)). Qed.
Lemma lem8143772 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term792 _144104 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8143771 _144104 _144105 _144106 _144138 _144141 P c e f a) (@lem8143770 _144104 _144105 _144106 _144138 _144141 P e f a c)). Qed.
Lemma lem8143773 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (g : _144105 -> _144106) : term854 _144104 _144105 _144106 _144138 _144141 P c e f a g.
Proof. exact (@lem8143772 _144104 _144105 _144106 _144138 _144141 P c e f a g). Qed.
Lemma lem8143774 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term854 _144104 _144105 _144106 _144138 _144141 P c e f a g) = (term788 _144104 _144105 _144106 _144138 _144141 P g c e f a).
Proof. exact (eq_refl (term854 _144104 _144105 _144106 _144138 _144141 P c e f a g)). Qed.
Lemma lem8143775 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term788 _144104 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (EQ_MP (@lem8143774 _144104 _144105 _144106 _144138 _144141 P g c e f a) (@lem8143773 _144104 _144105 _144106 _144138 _144141 P c e f a g)). Qed.
Lemma lem8143776 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (s : P -> _144104) : term855 _144104 _144105 _144106 _144138 _144141 P g c e f a s.
Proof. exact (@lem8143775 _144104 _144105 _144106 _144138 _144141 P g c e f a s). Qed.
Lemma lem8143777 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term855 _144104 _144105 _144106 _144138 _144141 P g c e f a s) = (term784 _144104 _144105 _144106 _144138 _144141 P s g c e f a).
Proof. exact (eq_refl (term855 _144104 _144105 _144106 _144138 _144141 P g c e f a s)). Qed.
Lemma lem8143778 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term784 _144104 _144105 _144106 _144138 _144141 P s g c e f a.
Proof. exact (EQ_MP (@lem8143777 _144104 _144105 _144106 _144138 _144141 P s g c e f a) (@lem8143776 _144104 _144105 _144106 _144138 _144141 P g c e f a s)). Qed.
Lemma lem8143779 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (lt2 : type1470 _144104 _144105) : term856 _144104 _144105 _144106 _144138 _144141 P s g c e f a lt2.
Proof. exact (@lem8143778 _144104 _144105 _144106 _144138 _144141 P s g c e f a lt2). Qed.
Lemma lem8143780 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term856 _144104 _144105 _144106 _144138 _144141 P s g c e f a lt2) = (term780 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a).
Proof. exact (eq_refl (term856 _144104 _144105 _144106 _144138 _144141 P s g c e f a lt2)). Qed.
Lemma lem8143781 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term780 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a.
Proof. exact (EQ_MP (@lem8143780 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a) (@lem8143779 _144104 _144105 _144106 _144138 _144141 P s g c e f a lt2)). Qed.
Lemma lem8143782 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) : term857 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a p.
Proof. exact (@lem8143781 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a p). Qed.
Lemma lem8143783 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term857 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a p) = (term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a).
Proof. exact (eq_refl (term857 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a p)). Qed.
Lemma lem8143784 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term753 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (EQ_MP (@lem8143783 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a) (@lem8143782 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a p)). Qed.
Lemma lem8143786 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term732 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8140298 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8143784 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a)). Qed.
Lemma lem8143787 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term748 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8143786 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a (@lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8143788 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (f : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term746 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8143787 _144104 _144105 _144106 _144138 _144141 P g c f a p lt2 s e h1 (@lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8143789 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term744 _144104 _144105 _144106 _144138 _144141 P p lt2 s g c e f a.
Proof. exact (@lem8143788 _144104 _144105 _144106 _144138 _144141 P g f a p lt2 s c e h1 h2 (@lem8136632 _144105 _144106 P p f a h3)). Qed.
Lemma lem8143790 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term742 _144104 _144105 _144106 _144138 _144141 P lt2 s g c e f a.
Proof. exact (@lem8143789 _144104 _144105 _144106 _144138 _144141 P g lt2 s c e p f a h1 h2 h3 (@lem8136634 _144105 _144106 P p g a h4)). Qed.
Lemma lem8143791 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term740 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (@lem8143790 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h2 h3 h4 h5 (@lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8143792 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term738 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (@lem8143791 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h5 h6 (@lem8136653 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8143793 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term719 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (@lem8143792 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h6 h7 (@lem8136722 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8143794 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term720 _144105 _144106 _144138 _144141 P c e f a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (@lem8143793 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h7 h8 (@lem8140208 _144105 _144106 _144138 _144141 P c e f a h6)). Qed.
Lemma lem8143795 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term720 _144105 _144106 _144138 _144141 P c e f a) (h7 : p f a) (h8 : p g a) : (term720 _144105 _144106 _144138 _144141 P c e f a) = False.
Proof. exact (prop_ext (fun h9 : term720 _144105 _144106 _144138 _144141 P c e f a => @lem8143794 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (fun h9 : False => @lem8140208 _144105 _144106 _144138 _144141 P c e f a h6)). Qed.
Lemma lem8143796 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term720 _144105 _144106 _144138 _144141 P c e f a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (EQ_MP (@lem8143795 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (@lem8140208 _144105 _144106 _144138 _144141 P c e f a h6)). Qed.
Lemma lem8143797 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term719 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (fun h0 : term720 _144105 _144106 _144138 _144141 P c e f a => @lem8143796 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h0 h6 h7). Qed.
Lemma lem8143800 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8143801 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a)) = (term858 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8143800 ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8143802 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term858 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8143801 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143803 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term859 _144105 _144106 _144138 _144141 P c e g a) : term859 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8143820 {_144138 : Type'} (P : _144138 -> Prop) : term721 _144138 P.
Proof. exact (@lem19732 _144138 P). Qed.
Lemma lem8143821 {_144138 : Type'} : term722 _144138.
Proof. exact (@lem8143820 _144138 (term723 _144138)). Qed.
Lemma lem8143822 {_144138 : Type'} : (term724 _144138) = False.
Proof. exact (eq_refl (term724 _144138)). Qed.
Lemma lem8143823 {_144138 : Type'} (x : _144138) : (term725 _144138 x) = False.
Proof. exact (eq_refl (term725 _144138 x)). Qed.
Lemma lem8143824 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143825 {_144138 : Type'} (x : _144138) : (term726 _144138 x) = (imp False).
Proof. exact (MK_COMB (@lem8143824) (@lem8143823 _144138 x)). Qed.
Lemma lem8143826 {_144138 : Type'} (x : _144138) : (term727 _144138 x) = (False -> False).
Proof. exact (MK_COMB (@lem8143825 _144138 x) (@lem8143822 _144138)). Qed.
Lemma lem8143827 {_144138 : Type'} : (term728 _144138) = (term729 _144138).
Proof. exact (fun_ext (fun x : _144138 => @lem8143826 _144138 x)). Qed.
Lemma lem8143828 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8143829 {_144138 : Type'} : (term722 _144138) = (term730 _144138).
Proof. exact (MK_COMB (@lem8143828 _144138) (@lem8143827 _144138)). Qed.
Lemma lem8143830 {_144138 : Type'} : term730 _144138.
Proof. exact (EQ_MP (@lem8143829 _144138) (@lem8143821 _144138)). Qed.
Lemma lem8143831 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143832 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143831 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 (@lem8143830 _144138)). Qed.
Lemma lem8143833 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term862 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143832 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8143834 {_144138 : Type'} (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : _107925 = (term147 _144138).
Proof. exact (h1). Qed.
Lemma lem8143837 {_144138 : Type'} (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term147 _144138) = _107925.
Proof. exact (SYM (@lem8143834 _144138 _107925 h1)). Qed.
Lemma lem8143838 {_144138 : Type'} (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term147 _144138) = _107925.
Proof. exact (@lem8143837 _144138 _107925 h1). Qed.
Lemma lem8143839 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8143840 {_144138 : Type'} (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term863 _144138) = (@eq _144138 _107925).
Proof. exact (MK_COMB (@lem8143839 _144138) (@lem8143838 _144138 _107925 h1)). Qed.
Lemma lem8143841 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term145 _144105 _144106 _144138 _144141 P c e g a) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term145 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143842 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a)) = (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8143840 _144138 _107925 h1) (@lem8143841 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143843 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8143844 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term859 _144105 _144106 _144138 _144141 P c e g a) = (term864 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (MK_COMB (@lem8143843) (@lem8143842 _144105 _144106 _144138 _144141 P c e g a _107925 h1)). Qed.
Lemma lem8143845 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143846 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term865 _144105 _144106 _144138 _144141 P c e g a) = (term866 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (MK_COMB (@lem8143845) (@lem8143844 _144105 _144106 _144138 _144141 P c e g a _107925 h1)). Qed.
Lemma lem8143847 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8143848 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term858 _144105 _144106 _144138 _144141 P c e g a) = (term867 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (MK_COMB (@lem8143846 _144105 _144106 _144138 _144141 P c e g a _107925 h1) (@lem8143847)). Qed.
Lemma lem8143849 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e g a) = (term153 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8143850 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term868 _144105 _144106 _144138 _144141 P c e g a) = (term869 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (MK_COMB (@lem8143849 _144105 _144106 _144138 _144141 P c e g a) (@lem8143848 _144105 _144106 _144138 _144141 P c e g a _107925 h1)). Qed.
Lemma lem8143851 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e f a) = (term149 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8143852 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term870 _144105 _144106 _144138 _144141 P f c e g a) = (term871 _144105 _144106 _144138 _144141 P f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143851 _144105 _144106 _144138 _144141 P c e f a) (@lem8143850 _144105 _144106 _144138 _144141 P c e g a _107925 h1)). Qed.
Lemma lem8143853 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8143854 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term872 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term873 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143853 _144104 _144105 _144106 P lt2 s a f g) (@lem8143852 _144105 _144106 _144138 _144141 P f c e g a _107925 h1)). Qed.
Lemma lem8143855 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8143856 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term874 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term875 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143855 _144105 _144106 P p g a) (@lem8143854 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143857 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8143858 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term876 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term877 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143857 _144105 _144106 P p f a) (@lem8143856 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143859 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8143860 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term878 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term879 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143859 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8143858 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143861 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8143862 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term880 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143861 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8143860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143863 {_144138 : Type'} : (term751 _144138) = (term751 _144138).
Proof. exact (eq_refl (term751 _144138)). Qed.
Lemma lem8143864 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143863 _144138) (@lem8143862 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143865 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143866 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term883 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925.
Proof. exact (@lem8143865 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 _107925). Qed.
Lemma lem8143867 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term883 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925) = (term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (eq_refl (term883 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925)). Qed.
Lemma lem8143868 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a.
Proof. exact (EQ_MP (@lem8143867 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) (@lem8143866 _144104 _144105 _144106 _144138 _144141 P _107925 p lt2 s f c e g a h1)). Qed.
Lemma lem8143869 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : (term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (SYM (@lem8143864 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143870 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : _107925 = (term147 _144138)) : term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8143869 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h2) (@lem8143868 _144104 _144105 _144106 _144138 _144141 P _107925 p lt2 s f c e g a h1)). Qed.
Lemma lem8143871 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : term884 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143870 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h0 h1). Qed.
Lemma lem8143872 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term885 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem51 (term860 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143873 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : term886 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143872 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8143871 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1)). Qed.
Lemma lem8143874 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107925 : _144138) (h1 : _107925 = (term147 _144138)) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143873 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h1 (@lem8143833 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143875 {_144138 : Type'} : (term147 _144138) = (term147 _144138).
Proof. exact (eq_refl (term147 _144138)). Qed.
Lemma lem8143876 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term888 _144104 _144105 _144106 _144138 _144141 P _107925 p lt2 s f c e g a.
Proof. exact (fun h0 : _107925 = (term147 _144138) => @lem8143874 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107925 h0). Qed.
Lemma lem8143877 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term889 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143876 _144104 _144105 _144106 _144138 _144141 P (term147 _144138) p lt2 s f c e g a). Qed.
Lemma lem8143878 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143877 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8143875 _144138)). Qed.
Lemma lem8143879 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143880 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term890 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143879 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8143881 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term891 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem51 (term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143882 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term892 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8143880 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143883 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8143878 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143884 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143885 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143886 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143884 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2 (@lem8143885 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1)). Qed.
Lemma lem8143887 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term893 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143886 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 h0). Qed.
Lemma lem8143888 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8143889 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 (@lem8143888 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2)). Qed.
Lemma lem8143890 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143889 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0 h1). Qed.
Lemma lem8143891 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term892 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8143890 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8143894 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143891 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8143883 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8143895 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term887 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143894 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8143935 {A : Type'} (t : Prop) : (term765 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8143936 {_144138 : Type'} (t : Prop) : (term765 _144138 t) = t.
Proof. exact (@lem8143935 _144138 t). Qed.
Lemma lem8143937 {_144138 : Type'} : (term730 _144138) = (False -> False).
Proof. exact (@lem8143936 _144138 (False -> False)). Qed.
Lemma lem8143939 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem16473 t)). Qed.
Lemma lem8143940 : (False -> False) = True.
Proof. exact (@lem8143939 False). Qed.
Lemma lem8143941 {_144138 : Type'} : (term730 _144138) = True.
Proof. exact (TRANS (@lem8143937 _144138) (@lem8143940)). Qed.
Lemma lem8143942 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8143943 {_144138 : Type'} : (term751 _144138) = (imp True).
Proof. exact (MK_COMB (@lem8143942) (@lem8143941 _144138)). Qed.
Lemma lem8144013 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8144014 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term867 _144105 _144106 _144138 _144141 P _107925 c e g a) = (term894 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (@lem8144013 (term864 _144105 _144106 _144138 _144141 P _107925 c e g a)). Qed.
Lemma lem8144016 (t : Prop) : (term202 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8144017 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term894 _144105 _144106 _144138 _144141 P _107925 c e g a) = (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8144016 (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144018 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term867 _144105 _144106 _144138 _144141 P _107925 c e g a) = (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (TRANS (@lem8144014 _144105 _144106 _144138 _144141 P _107925 c e g a) (@lem8144017 _144105 _144106 _144138 _144141 P _107925 c e g a)). Qed.
Lemma lem8144019 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term153 _144105 _144106 _144138 _144141 P c e g a) = (term153 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term153 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8144020 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term869 _144105 _144106 _144138 _144141 P _107925 c e g a) = (term895 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (MK_COMB (@lem8144019 _144105 _144106 _144138 _144141 P c e g a) (@lem8144018 _144105 _144106 _144138 _144141 P _107925 c e g a)). Qed.
Lemma lem8144023 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e f a) = (term149 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8144024 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term871 _144105 _144106 _144138 _144141 P f _107925 c e g a) = (term896 _144105 _144106 _144138 _144141 P f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144023 _144105 _144106 _144138 _144141 P c e f a) (@lem8144020 _144105 _144106 _144138 _144141 P _107925 c e g a)). Qed.
Lemma lem8144027 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144028 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term873 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a) = (term897 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144027 _144104 _144105 _144106 P lt2 s a f g) (@lem8144024 _144105 _144106 _144138 _144141 P f _107925 c e g a)). Qed.
Lemma lem8144031 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8144032 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term875 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term898 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144031 _144105 _144106 P p g a) (@lem8144028 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a)). Qed.
Lemma lem8144035 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8144036 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term877 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term899 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144035 _144105 _144106 P p f a) (@lem8144032 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144039 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8144040 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term879 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term900 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144039 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8144036 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144043 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144044 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term880 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144043 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144040 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144047 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term902 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8143943 _144138) (@lem8144044 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144049 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8144050 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term902 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (@lem8144049 (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144119 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term881 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (TRANS (@lem8144047 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) (@lem8144050 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144120 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term903 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term904 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun _107925 : _144138 => @lem8144119 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144121 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8144122 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term905 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144121 _144138) (@lem8144120 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144127 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term906 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term907 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8144122 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144128 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8144129 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term908 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term909 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144128 _144105 _144106 P) (@lem8144127 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8144134 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term910 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term911 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8144129 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8144135 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8144136 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term912 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term913 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8144135 _144104 _144105) (@lem8144134 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8144141 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term914 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term915 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8144136 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8144142 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8144143 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term916 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term917 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8144142 _144104 P) (@lem8144141 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144148 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term918 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term919 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144143 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144149 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144150 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term920 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term921 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8144149 _144105 _144106) (@lem8144148 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8144155 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term922 _144104 _144105 _144106 _144138 _144141 P e g a) = (term923 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8144150 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8144156 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8144157 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term924 _144104 _144105 _144106 _144138 _144141 P e g a) = (term925 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8144156 _144105 _144106 _144138 _144141 P) (@lem8144155 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8144162 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term926 _144104 _144105 _144106 _144138 _144141 P g a) = (term927 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8144157 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8144163 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8144164 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term928 _144104 _144105 _144106 _144138 _144141 P g a) = (term929 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8144163 _144105 _144106 _144141 P) (@lem8144162 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8144169 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term930 _144104 _144105 _144106 _144138 _144141 P a) = (term931 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144164 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8144170 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144171 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term932 _144104 _144105 _144106 _144138 _144141 P a) = (term933 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8144170 _144105 _144106) (@lem8144169 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8144176 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term934 _144104 _144105 _144106 _144138 _144141 P) = (term935 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8144171 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8144177 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144186 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term936 _144104 _144105 _144106 _144138 _144141 P) = (term937 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8144177 P) (@lem8144176 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8144197 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term896 _144105 _144106 _144138 _144141 P f _107925 c e g a) = (term896 _144105 _144106 _144138 _144141 P f _107925 c e g a).
Proof. exact (eq_refl (term896 _144105 _144106 _144138 _144141 P f _107925 c e g a)). Qed.
Lemma lem8144202 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144203 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144202 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144204 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8144205 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144204 _144105) (@lem8144203 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144206 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8144207 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144206) (@lem8144205 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144208 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term897 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a) = (term897 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144207 _144104 _144105 _144106 P lt2 s a f g) (@lem8144197 _144105 _144106 _144138 _144141 P f _107925 c e g a)). Qed.
Lemma lem8144211 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8144212 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term898 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term898 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144211 _144105 _144106 P p g a) (@lem8144208 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a)). Qed.
Lemma lem8144215 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8144216 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term899 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term899 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144215 _144105 _144106 P p f a) (@lem8144212 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144217 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144222 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144223 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144222 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144224 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8144225 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144224 _144105) (@lem8144223 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144228 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8144229 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144228 _144105 _144106 P p g a) (@lem8144225 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144232 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8144233 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144232 _144105 _144106 P p f a) (@lem8144229 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144234 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8144235 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144234) (@lem8144233 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144236 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144235 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144217 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144237 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8144236 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144238 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144239 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8144238 P) (@lem8144237 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8144240 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144239 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8144241 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144242 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8144241 _144105 _144106) (@lem8144240 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8144243 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144242 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8144244 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144245 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8144244 _144105 _144106) (@lem8144243 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8144246 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8144247 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8144246) (@lem8144245 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8144248 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term900 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term900 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144247 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8144216 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144249 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8144254 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144255 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144254 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144256 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8144257 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144256 _144105) (@lem8144255 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144260 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8144261 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144260 _144105 _144106 P p g a) (@lem8144257 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144264 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8144265 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144264 _144105 _144106 P p f a) (@lem8144261 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144266 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8144267 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144266) (@lem8144265 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144268 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144267 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144249 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8144269 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8144268 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144270 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144271 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144270 P) (@lem8144269 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144272 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term257 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144271 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144273 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144274 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term258 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144273 _144105 _144106) (@lem8144272 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144275 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term259 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144274 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144276 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144277 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term15 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144276 _144105 _144106) (@lem8144275 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144278 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8144279 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144278) (@lem8144277 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144280 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a) = (term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a).
Proof. exact (MK_COMB (@lem8144279 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144248 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144281 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term904 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term904 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun _107925 : _144138 => @lem8144280 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a)). Qed.
Lemma lem8144282 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8144283 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term905 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term905 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144282 _144138) (@lem8144281 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144284 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term907 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term907 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8144283 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144285 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8144286 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term909 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term909 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144285 _144105 _144106 P) (@lem8144284 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8144287 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term911 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term911 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8144286 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8144288 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8144289 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term913 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term913 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8144288 _144104 _144105) (@lem8144287 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8144290 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term915 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term915 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8144289 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8144291 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8144292 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term917 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term917 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8144291 _144104 P) (@lem8144290 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144293 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term919 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term919 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144292 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144294 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144295 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term921 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term921 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8144294 _144105 _144106) (@lem8144293 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8144296 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term923 _144104 _144105 _144106 _144138 _144141 P e g a) = (term923 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8144295 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8144297 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8144298 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term925 _144104 _144105 _144106 _144138 _144141 P e g a) = (term925 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8144297 _144105 _144106 _144138 _144141 P) (@lem8144296 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8144299 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term927 _144104 _144105 _144106 _144138 _144141 P g a) = (term927 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8144298 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8144300 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8144301 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term929 _144104 _144105 _144106 _144138 _144141 P g a) = (term929 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8144300 _144105 _144106 _144141 P) (@lem8144299 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8144302 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term931 _144104 _144105 _144106 _144138 _144141 P a) = (term931 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144301 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8144303 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144304 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term933 _144104 _144105 _144106 _144138 _144141 P a) = (term933 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8144303 _144105 _144106) (@lem8144302 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8144305 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term935 _144104 _144105 _144106 _144138 _144141 P) = (term935 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8144304 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8144306 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144307 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term937 _144104 _144105 _144106 _144138 _144141 P) = (term937 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8144306 P) (@lem8144305 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8144450 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term936 _144104 _144105 _144106 _144138 _144141 P) = (term937 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (TRANS (@lem8144186 _144104 _144105 _144106 _144138 _144141 P) (@lem8144307 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8144451 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term937 _144104 _144105 _144106 _144138 _144141 P) = (term936 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (SYM (@lem8144450 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8144452 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (h1). Qed.
Lemma lem8144453 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8144456 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term137 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (h1). Qed.
Lemma lem8144460 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8144461 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a)) = (term867 _144105 _144106 _144138 _144141 P _107925 c e g a).
Proof. exact (@lem8144460 (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144462 {_144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term867 _144105 _144106 _144138 _144141 P _107925 c e g a) = (_107925 = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (SYM (@lem8144461 _144105 _144106 _144138 _144141 P _107925 c e g a)). Qed.
Lemma lem8144472 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8144473 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8144474 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8144473 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144475 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144476 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8144477 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144476) (@lem8144475 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144478 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8144477 _144104 _144105 _144106 P lt2 s a f g z) (@lem8144472 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144479 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144478 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144480 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144481 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144480 _144105) (@lem8144479 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144482 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8144474 _144104 _144105 _144106 P lt2 s a f g) (@lem8144481 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144484 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144485 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144484 _144105 _144106 P p g a) (@lem8144482 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144486 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144487 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144486 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144485 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144489 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144490 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144489 _144105 _144106 P p f a) (@lem8144487 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144491 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144492 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144491 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144490 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144493 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8144494 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144495 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144494) (@lem8144492 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144496 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144495 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144493 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8144497 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8144498 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8144497 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144496 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144499 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8144498 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144500 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144501 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144500 P) (@lem8144499 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144502 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term285 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144501 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144503 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144504 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term286 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144503 _144105 _144106) (@lem8144502 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144505 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term287 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144504 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144506 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144507 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term288 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144506 _144105 _144106) (@lem8144505 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144614 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8144615 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8144614 _144105 P Q). Qed.
Lemma lem8144616 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8144615 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144617 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144618 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144617 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144619 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144620 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144619 _144105) (@lem8144618 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144621 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144622 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144621 _144105 _144106 P p g a) (@lem8144620 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144623 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144624 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144623) (@lem8144622 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144625 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144626 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144627 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144626 _144105 _144106 P p g a) (@lem8144625 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144628 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144627 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144629 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144630 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144629 _144105) (@lem8144628 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144631 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8144624 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144630 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144632 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8144631 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144616 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144633 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144634 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144633 _144105 _144106 P p f a) (@lem8144632 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144636 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8144637 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8144636 _144105 P Q). Qed.
Lemma lem8144638 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8144637 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144639 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144640 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144639 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144641 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144642 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144641 _144105) (@lem8144640 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144643 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144644 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144643 _144105 _144106 P p f a) (@lem8144642 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144645 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144646 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144645) (@lem8144644 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144647 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144648 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144649 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144648 _144105 _144106 P p f a) (@lem8144647 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144650 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144649 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144651 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144652 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144651 _144105) (@lem8144650 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144653 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8144646 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144652 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144654 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8144653 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144638 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144655 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144634 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144654 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144656 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144657 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144656) (@lem8144655 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144658 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8144659 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144657 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144658 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8144661 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8144662 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8144661 _144105 P Q). Qed.
Lemma lem8144663 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem8144662 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8144664 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144665 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144664 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144666 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144667 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144666 _144105) (@lem8144665 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144668 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144669 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144668) (@lem8144667 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144670 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8144671 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144669 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144670 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8144672 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144673 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term327 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term328 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144672) (@lem8144671 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144674 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144675 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144676 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144675) (@lem8144674 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144677 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8144678 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term331 _144104 _144105 _144106 _144141 P p lt2 s z f e g a) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (MK_COMB (@lem8144676 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8144677 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8144679 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term333 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8144678 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8144680 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144681 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144680 _144105) (@lem8144679 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144682 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a)) = ((term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a)).
Proof. exact (MK_COMB (@lem8144673 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144681 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144683 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (EQ_MP (@lem8144682 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144663 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144684 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8144659 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144683 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144685 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8144684 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144686 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144687 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144686 P) (@lem8144685 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144689 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8144690 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8144689 P _144105 P'). Qed.
Lemma lem8144691 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (@lem8144690 _144105 P (term344 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144692 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144693 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8144694 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z).
Proof. exact (MK_COMB (@lem8144692 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144693 _144105 z)). Qed.
Lemma lem8144695 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z)). Qed.
Lemma lem8144696 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8144694 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) (@lem8144695 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8144697 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term348 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8144696 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8144698 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144699 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term349 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8144698 _144105) (@lem8144697 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144700 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term350 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8144699 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144701 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144702 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144701 P) (@lem8144700 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144703 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144704 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term351 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term352 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144703) (@lem8144702 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144705 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8144706 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8144707 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a).
Proof. exact (MK_COMB (@lem8144705 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8144706 _144105 P z a)). Qed.
Lemma lem8144708 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a)). Qed.
Lemma lem8144709 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8144707 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) (@lem8144708 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8144710 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term356 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term357 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (fun_ext (fun a : P => @lem8144709 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8144711 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144712 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term358 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (MK_COMB (@lem8144711 P) (@lem8144710 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144713 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term360 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8144712 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144714 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8144715 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144714 _144105 P) (@lem8144713 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144716 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g)) = ((term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g)).
Proof. exact (MK_COMB (@lem8144704 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8144715 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144717 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (EQ_MP (@lem8144716 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8144691 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144718 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (TRANS (@lem8144687 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8144717 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144719 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term285 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144718 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144720 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144721 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144720 _144105 _144106) (@lem8144719 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144723 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8144724 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8144723 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8144725 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (@lem8144724 _144105 _144106 P (term369 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144726 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144727 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8144728 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z).
Proof. exact (MK_COMB (@lem8144726 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8144727 _144105 P z)). Qed.
Lemma lem8144729 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z)). Qed.
Lemma lem8144730 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8144728 _144104 _144105 _144106 _144141 P p lt2 s f e g z) (@lem8144729 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144731 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term373 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8144730 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144732 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8144733 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term374 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8144732 _144105 P) (@lem8144731 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144734 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term375 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144733 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144735 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144736 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144735 _144105 _144106) (@lem8144734 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144737 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144738 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term376 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term377 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144737) (@lem8144736 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144739 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8144740 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8144741 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g).
Proof. exact (MK_COMB (@lem8144739 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8144740 _144105 _144106 P z g)). Qed.
Lemma lem8144742 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g)). Qed.
Lemma lem8144743 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8144741 _144104 _144105 _144106 _144141 P p lt2 s f e z g) (@lem8144742 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144744 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term381 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term382 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144743 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8144745 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144746 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term383 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (MK_COMB (@lem8144745 _144105 _144106) (@lem8144744 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144747 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term385 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8144746 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144748 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8144749 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term368 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144748 _144105 _144106 P) (@lem8144747 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144750 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : ((term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e)) = ((term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e)).
Proof. exact (MK_COMB (@lem8144738 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8144749 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144751 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (EQ_MP (@lem8144750 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8144725 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144752 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (TRANS (@lem8144721 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8144751 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144753 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term287 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144752 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144754 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144755 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144754 _144105 _144106) (@lem8144753 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144757 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8144758 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8144757 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8144759 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (@lem8144758 _144105 _144106 P (term394 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144760 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8144761 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8144762 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z).
Proof. exact (MK_COMB (@lem8144760 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8144761 _144105 _144106 P z)). Qed.
Lemma lem8144763 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z)). Qed.
Lemma lem8144764 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8144762 _144104 _144105 _144106 _144141 P p lt2 s f e z) (@lem8144763 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144765 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term398 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8144764 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144766 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8144767 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term399 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8144766 _144105 _144106 P) (@lem8144765 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144768 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term400 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144767 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8144769 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144770 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144769 _144105 _144106) (@lem8144768 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144771 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144772 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term401 _144104 _144105 _144106 _144141 P p lt2 s e) = (term402 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144771) (@lem8144770 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144773 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8144774 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8144775 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f).
Proof. exact (MK_COMB (@lem8144773 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8144774 _144105 _144106 P z f)). Qed.
Lemma lem8144776 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f)). Qed.
Lemma lem8144777 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8144775 _144104 _144105 _144106 _144141 P p lt2 s e z f) (@lem8144776 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144778 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term406 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term407 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144777 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8144779 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144780 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term408 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term409 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (MK_COMB (@lem8144779 _144105 _144106) (@lem8144778 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8144781 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term410 _144104 _144105 _144106 _144141 P p lt2 s e) = (term411 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8144780 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8144782 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8144783 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term393 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8144782 _144105 _144106 P) (@lem8144781 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144784 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : ((term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e)) = ((term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e)).
Proof. exact (MK_COMB (@lem8144772 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144783 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144785 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (EQ_MP (@lem8144784 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144759 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144787 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8144755 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144785 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144788 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8144507 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144787 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8144789 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term412 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (EQ_MP (@lem8144788 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8144452 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8144798 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8144799 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8144800 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8144799 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144801 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144802 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8144803 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144802) (@lem8144801 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144804 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8144803 _144104 _144105 _144106 P lt2 s a f g z) (@lem8144798 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144805 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144804 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144806 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144807 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144806 _144105) (@lem8144805 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144808 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8144800 _144104 _144105 _144106 P lt2 s a f g) (@lem8144807 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144810 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144811 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144810 _144105 _144106 P p g a) (@lem8144808 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144812 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144813 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144812 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144811 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144815 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144816 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144815 _144105 _144106 P p f a) (@lem8144813 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144817 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144818 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144817 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144816 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144819 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144820 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144821 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144820) (@lem8144818 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144822 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144821 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144819 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144823 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144824 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8144823 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8144822 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144825 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8144824 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8144826 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8144827 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8144826 P) (@lem8144825 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8144828 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8144827 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8144829 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144830 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8144829 _144105 _144106) (@lem8144828 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8144831 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8144830 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8144832 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8144833 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8144832 _144105 _144106) (@lem8144831 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8144940 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8144941 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8144940 _144105 P Q). Qed.
Lemma lem8144942 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8144941 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144943 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144944 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144943 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144945 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144946 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8144945 _144105) (@lem8144944 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144947 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144948 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144947 _144105 _144106 P p g a) (@lem8144946 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8144949 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144950 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144949) (@lem8144948 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144951 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144952 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8144953 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144952 _144105 _144106 P p g a) (@lem8144951 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8144954 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144953 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144955 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144956 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144955 _144105) (@lem8144954 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144957 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8144950 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144956 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144958 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8144957 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144942 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144959 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144960 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144959 _144105 _144106 P p f a) (@lem8144958 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144962 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8144963 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8144962 _144105 P Q). Qed.
Lemma lem8144964 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8144963 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144965 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144966 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144965 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144967 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144968 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144967 _144105) (@lem8144966 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144969 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144970 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144969 _144105 _144106 P p f a) (@lem8144968 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144971 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144972 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144971) (@lem8144970 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144973 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144974 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8144975 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8144974 _144105 _144106 P p f a) (@lem8144973 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144976 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144975 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144977 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144978 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144977 _144105) (@lem8144976 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144979 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8144972 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144978 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144980 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8144979 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144964 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144981 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8144960 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144980 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144982 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144983 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144982) (@lem8144981 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144984 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144985 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144983 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144984 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144987 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8144988 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8144987 _144105 P Q). Qed.
Lemma lem8144989 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem8144988 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144990 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144991 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8144990 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8144992 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8144993 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144992 _144105) (@lem8144991 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144994 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8144995 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8144994) (@lem8144993 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8144996 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8144997 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144995 _144104 _144105 _144106 P p lt2 s a f g) (@lem8144996 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8144998 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8144999 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term424 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term425 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8144998) (@lem8144997 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145000 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8145001 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8145002 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8145001) (@lem8145000 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8145003 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8145004 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term426 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8145002 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8145003 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8145005 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term428 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8145004 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145006 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8145007 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8145006 _144105) (@lem8145005 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145008 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)) = ((term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)).
Proof. exact (MK_COMB (@lem8144999 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8145007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145009 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (EQ_MP (@lem8145008 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8144989 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145010 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8144985 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8145009 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145011 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8145010 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145012 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8145013 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8145012 P) (@lem8145011 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145015 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8145016 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8145015 P _144105 P'). Qed.
Lemma lem8145017 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (@lem8145016 _144105 P (term435 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145018 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145019 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8145020 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z).
Proof. exact (MK_COMB (@lem8145018 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8145019 _144105 z)). Qed.
Lemma lem8145021 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z)). Qed.
Lemma lem8145022 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8145020 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) (@lem8145021 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145023 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term439 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8145022 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145024 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8145025 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term440 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8145024 _144105) (@lem8145023 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145026 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term441 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8145025 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145027 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8145028 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8145027 P) (@lem8145026 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145029 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8145030 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term442 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term443 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8145029) (@lem8145028 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145031 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8145032 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8145033 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a).
Proof. exact (MK_COMB (@lem8145031 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8145032 _144105 P z a)). Qed.
Lemma lem8145034 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a)). Qed.
Lemma lem8145035 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8145033 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) (@lem8145034 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145036 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term447 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term448 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8145035 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145037 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8145038 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term449 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8145037 P) (@lem8145036 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145039 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term451 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8145038 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145040 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8145041 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8145040 _144105 P) (@lem8145039 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145042 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)) = ((term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)).
Proof. exact (MK_COMB (@lem8145030 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8145041 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145043 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (EQ_MP (@lem8145042 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8145017 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145044 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (TRANS (@lem8145013 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8145043 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145045 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8145044 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145046 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145047 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8145046 _144105 _144106) (@lem8145045 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145049 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8145050 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8145049 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8145051 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (@lem8145050 _144105 _144106 P (term458 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145052 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145053 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8145054 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z).
Proof. exact (MK_COMB (@lem8145052 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8145053 _144105 P z)). Qed.
Lemma lem8145055 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z)). Qed.
Lemma lem8145056 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8145054 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) (@lem8145055 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145057 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term462 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8145056 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145058 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8145059 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term463 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8145058 _144105 P) (@lem8145057 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145060 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term464 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8145059 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145061 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145062 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8145061 _144105 _144106) (@lem8145060 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145063 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8145064 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term465 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term466 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8145063) (@lem8145062 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145065 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8145066 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8145067 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g).
Proof. exact (MK_COMB (@lem8145065 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8145066 _144105 _144106 P z g)). Qed.
Lemma lem8145068 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g)). Qed.
Lemma lem8145069 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8145067 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) (@lem8145068 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145070 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term470 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term471 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8145069 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145071 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145072 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term472 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8145071 _144105 _144106) (@lem8145070 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145073 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term474 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8145072 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145074 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8145075 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8145074 _144105 _144106 P) (@lem8145073 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145076 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)) = ((term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)).
Proof. exact (MK_COMB (@lem8145064 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8145075 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145077 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (EQ_MP (@lem8145076 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8145051 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145078 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (TRANS (@lem8145047 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8145077 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145079 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8145078 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145080 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145081 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8145080 _144105 _144106) (@lem8145079 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145083 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8145084 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8145083 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8145085 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (@lem8145084 _144105 _144106 P (term481 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145086 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8145087 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8145088 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z).
Proof. exact (MK_COMB (@lem8145086 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8145087 _144105 _144106 P z)). Qed.
Lemma lem8145089 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z)). Qed.
Lemma lem8145090 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8145088 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) (@lem8145089 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145091 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term485 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8145090 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145092 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8145093 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term486 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8145092 _144105 _144106 P) (@lem8145091 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145094 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term487 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8145093 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8145095 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145096 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8145095 _144105 _144106) (@lem8145094 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145097 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8145098 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term488 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term489 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8145097) (@lem8145096 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145099 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8145100 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8145101 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f).
Proof. exact (MK_COMB (@lem8145099 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8145100 _144105 _144106 P z f)). Qed.
Lemma lem8145102 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f)). Qed.
Lemma lem8145103 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8145101 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) (@lem8145102 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145104 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term493 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8145103 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145105 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145106 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term495 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8145105 _144105 _144106) (@lem8145104 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8145107 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term497 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8145106 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8145108 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8145109 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8145108 _144105 _144106 P) (@lem8145107 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145110 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)) = ((term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)).
Proof. exact (MK_COMB (@lem8145098 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8145109 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145111 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (EQ_MP (@lem8145110 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8145085 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145113 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8145081 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8145111 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145114 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8144833 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8145113 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8145115 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8145114 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8144453 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8145121 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : p f a.
Proof. exact (h1). Qed.
Lemma lem8145127 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : p g a.
Proof. exact (h1). Qed.
Lemma lem8145134 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term500 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17265 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8145135 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term501 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8145134 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8145136 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8145189 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term502 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8145136 _144105) (@lem8145135 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8145190 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term502 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8145189 _144104 _144105 _144106 P lt2 s a f g) (@lem8144456 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8145196 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e f a) : term161 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (h1). Qed.
Lemma lem8145202 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term146 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (h1). Qed.
Lemma lem8145209 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (h1). Qed.
Lemma lem8145217 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145218 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8145217 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8145219 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8145218 _144105 _144106 P p f). Qed.
Lemma lem8145220 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145221 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8145219 _144105 _144106 P p f) (@lem8145220 P a)). Qed.
Lemma lem8145223 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145224 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8145223 P Prop f x). Qed.
Lemma lem8145225 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8145224 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8145227 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8145221 _144105 _144106 P p f a) (@lem8145225 _144105 _144106 P p f a)). Qed.
Lemma lem8145235 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145236 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8145235 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8145237 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8145236 _144105 _144106 P p g). Qed.
Lemma lem8145238 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145239 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8145237 _144105 _144106 P p g) (@lem8145238 P a)). Qed.
Lemma lem8145241 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145242 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8145241 P Prop f x). Qed.
Lemma lem8145243 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8145242 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8145245 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8145239 _144105 _144106 P p g a) (@lem8145243 _144105 _144106 P p g a)). Qed.
Lemma lem8145247 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8145252 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145253 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8145252 _144105 _144106 f x). Qed.
Lemma lem8145255 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (f z) = (@I (_144105 -> _144106) f z).
Proof. exact (@lem8145253 _144105 _144106 f z). Qed.
Lemma lem8145260 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145261 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8145260 _144105 _144106 f x). Qed.
Lemma lem8145263 {_144105 _144106 : Type'} (g : _144105 -> _144106) (z : _144105) : (g z) = (@I (_144105 -> _144106) g z).
Proof. exact (@lem8145261 _144105 _144106 g z). Qed.
Lemma lem8145264 {_144105 _144106 : Type'} (f : _144105 -> _144106) (z : _144105) : (term504 _144105 _144106 f z) = (term505 _144105 _144106 f z).
Proof. exact (MK_COMB (@lem8145247 _144106) (@lem8145255 _144105 _144106 f z)). Qed.
Lemma lem8145265 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : ((f z) = (g z)) = ((@I (_144105 -> _144106) f z) = (@I (_144105 -> _144106) g z)).
Proof. exact (MK_COMB (@lem8145264 _144105 _144106 f z) (@lem8145263 _144105 _144106 g z)). Qed.
Lemma lem8145266 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8145273 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145274 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8145273 P _144104 f x). Qed.
Lemma lem8145276 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8145274 _144104 P s a). Qed.
Lemma lem8145277 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (lt2 z).
Proof. exact (eq_refl (lt2 z)). Qed.
Lemma lem8145278 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term506 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8145277 _144104 _144105 lt2 z) (@lem8145276 _144104 P s a)). Qed.
Lemma lem8145280 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145281 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8145280 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8145282 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) : (lt2 z) = (@I (_144105 -> _144104 -> Prop) lt2 z).
Proof. exact (@lem8145281 _144104 _144105 lt2 z). Qed.
Lemma lem8145283 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8145284 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term507 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8145282 _144104 _144105 lt2 z) (@lem8145283 _144104 P s a)). Qed.
Lemma lem8145286 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145287 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8145286 _144104 Prop f x). Qed.
Lemma lem8145288 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term507 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (@lem8145287 _144104 (@I (_144105 -> _144104 -> Prop) lt2 z) (@I (P -> _144104) s a)). Qed.
Lemma lem8145289 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term506 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8145284 _144104 _144105 P lt2 z s a) (@lem8145288 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8145290 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term262 _144104 _144105 P lt2 z s a) = (term508 _144104 _144105 P lt2 z s a).
Proof. exact (TRANS (@lem8145278 _144104 _144105 P lt2 z s a) (@lem8145289 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8145291 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term509 _144104 _144105 P lt2 z s a) = (term510 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8145266) (@lem8145290 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8145292 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8145293 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (z : _144105) (s : P -> _144104) (a : P) : (term511 _144104 _144105 P lt2 z s a) = (term512 _144104 _144105 P lt2 z s a).
Proof. exact (MK_COMB (@lem8145292) (@lem8145291 _144104 _144105 P lt2 z s a)). Qed.
Lemma lem8145294 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term500 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8145293 _144104 _144105 P lt2 z s a) (@lem8145265 _144105 _144106 f g z)). Qed.
Lemma lem8145295 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term501 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8145294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8145296 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8145297 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term502 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8145296 _144105) (@lem8145295 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8145298 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8145297 _144104 _144105 _144106 P lt2 s a f g) (@lem8145190 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8145299 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8145300 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (eq_refl (@ex1 _144138)). Qed.
Lemma lem8145310 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145311 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8145310 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8145312 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8145311 _144105 _144106 _144141 P e f). Qed.
Lemma lem8145313 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145314 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8145312 _144105 _144106 _144141 P e f) (@lem8145313 P a)). Qed.
Lemma lem8145316 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145317 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8145316 P _144141 f x). Qed.
Lemma lem8145318 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8145317 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8145320 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8145314 _144105 _144106 _144141 P e f a) (@lem8145318 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145322 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8145323 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145322 _144105 _144106 _144138 _144141 P c f a) (@lem8145320 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145325 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145326 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145325 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8145327 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8145326 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8145328 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145329 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8145327 _144105 _144106 _144138 _144141 P c f) (@lem8145328 P a)). Qed.
Lemma lem8145331 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145332 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145331 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8145333 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8145332 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8145334 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8145329 _144105 _144106 _144138 _144141 P c f a) (@lem8145333 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8145335 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145336 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145334 _144105 _144106 _144138 _144141 P c f a) (@lem8145335 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145338 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145339 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145338 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8145340 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8145339 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145341 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8145336 _144105 _144106 _144138 _144141 P c e f a) (@lem8145340 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145342 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8145323 _144105 _144106 _144138 _144141 P c e f a) (@lem8145341 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145343 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e f a) = (term810 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145300 _144138) (@lem8145342 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145345 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145346 {_144138 : Type'} (f : type686 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> Prop) f x).
Proof. exact (@lem8145345 (_144138 -> Prop) Prop f x). Qed.
Lemma lem8145347 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term810 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8145346 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145348 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8145343 _144105 _144106 _144138 _144141 P c e f a) (@lem8145347 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145349 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term161 _144105 _144106 _144138 _144141 P c e f a) = (term812 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145299) (@lem8145348 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145351 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (eq_refl (@ex1 _144138)). Qed.
Lemma lem8145361 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145362 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8145361 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8145363 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8145362 _144105 _144106 _144141 P e g). Qed.
Lemma lem8145364 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145365 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8145363 _144105 _144106 _144141 P e g) (@lem8145364 P a)). Qed.
Lemma lem8145367 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145368 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8145367 P _144141 f x). Qed.
Lemma lem8145369 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8145368 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8145371 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8145365 _144105 _144106 _144141 P e g a) (@lem8145369 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145373 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8145374 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8145373 _144105 _144106 _144138 _144141 P c g a) (@lem8145371 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145376 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145377 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145376 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8145378 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8145377 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8145379 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145380 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8145378 _144105 _144106 _144138 _144141 P c g) (@lem8145379 P a)). Qed.
Lemma lem8145382 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145383 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145382 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8145384 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8145383 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8145385 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8145380 _144105 _144106 _144138 _144141 P c g a) (@lem8145384 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8145386 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145387 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8145385 _144105 _144106 _144138 _144141 P c g a) (@lem8145386 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145389 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145390 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145389 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8145391 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8145390 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145392 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8145387 _144105 _144106 _144138 _144141 P c e g a) (@lem8145391 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145393 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8145374 _144105 _144106 _144138 _144141 P c e g a) (@lem8145392 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145394 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e g a) = (term810 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8145351 _144138) (@lem8145393 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145396 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145397 {_144138 : Type'} (f : type686 _144138) (x : _144138 -> Prop) : (f x) = (@I ((_144138 -> Prop) -> Prop) f x).
Proof. exact (@lem8145396 (_144138 -> Prop) Prop f x). Qed.
Lemma lem8145398 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term810 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8145397 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145399 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term146 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8145394 _144105 _144106 _144138 _144141 P c e g a) (@lem8145398 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145457 {_144138 : Type'} : (@eq (_144138 -> Prop)) = (@eq (_144138 -> Prop)).
Proof. exact (eq_refl (@eq (_144138 -> Prop))). Qed.
Lemma lem8145467 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145468 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8145467 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8145469 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) : (e f) = (@I ((_144105 -> _144106) -> P -> _144141) e f).
Proof. exact (@lem8145468 _144105 _144106 _144141 P e f). Qed.
Lemma lem8145470 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145471 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (@I ((_144105 -> _144106) -> P -> _144141) e f a).
Proof. exact (MK_COMB (@lem8145469 _144105 _144106 _144141 P e f) (@lem8145470 P a)). Qed.
Lemma lem8145473 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145474 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8145473 P _144141 f x). Qed.
Lemma lem8145475 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (@lem8145474 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e f) a). Qed.
Lemma lem8145477 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (TRANS (@lem8145471 _144105 _144106 _144141 P e f a) (@lem8145475 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145479 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (c f a).
Proof. exact (eq_refl (c f a)). Qed.
Lemma lem8145480 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term517 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145479 _144105 _144106 _144138 _144141 P c f a) (@lem8145477 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145482 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145483 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145482 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8145484 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) : (c f) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f).
Proof. exact (@lem8145483 _144105 _144106 _144138 _144141 P c f). Qed.
Lemma lem8145485 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145486 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a).
Proof. exact (MK_COMB (@lem8145484 _144105 _144106 _144138 _144141 P c f) (@lem8145485 P a)). Qed.
Lemma lem8145488 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145489 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145488 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8145490 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (@lem8145489 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c f) a). Qed.
Lemma lem8145491 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (f : _144105 -> _144106) (a : P) : (c f a) = (term518 _144105 _144106 _144138 _144141 P c f a).
Proof. exact (TRANS (@lem8145486 _144105 _144106 _144138 _144141 P c f a) (@lem8145490 _144105 _144106 _144138 _144141 P c f a)). Qed.
Lemma lem8145492 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e f a) = (term516 _144105 _144106 _144141 P e f a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145493 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term519 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145491 _144105 _144106 _144138 _144141 P c f a) (@lem8145492 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145495 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145496 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145495 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8145497 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8145496 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c f a) (term516 _144105 _144106 _144141 P e f a)). Qed.
Lemma lem8145498 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8145493 _144105 _144106 _144138 _144141 P c e f a) (@lem8145497 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145499 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (TRANS (@lem8145480 _144105 _144106 _144138 _144141 P c e f a) (@lem8145498 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145509 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145510 {_144105 _144106 _144141 P : Type'} (f : type564 _144105 _144106 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141) f x).
Proof. exact (@lem8145509 (_144105 -> _144106) (P -> _144141) f x). Qed.
Lemma lem8145511 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (e g) = (@I ((_144105 -> _144106) -> P -> _144141) e g).
Proof. exact (@lem8145510 _144105 _144106 _144141 P e g). Qed.
Lemma lem8145512 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145513 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (@I ((_144105 -> _144106) -> P -> _144141) e g a).
Proof. exact (MK_COMB (@lem8145511 _144105 _144106 _144141 P e g) (@lem8145512 P a)). Qed.
Lemma lem8145515 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145516 {_144141 P : Type'} (f : P -> _144141) (x : P) : (f x) = (@I (P -> _144141) f x).
Proof. exact (@lem8145515 P _144141 f x). Qed.
Lemma lem8145517 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141) e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (@lem8145516 _144141 P (@I ((_144105 -> _144106) -> P -> _144141) e g) a). Qed.
Lemma lem8145519 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (TRANS (@lem8145513 _144105 _144106 _144141 P e g a) (@lem8145517 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145521 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (c g a).
Proof. exact (eq_refl (c g a)). Qed.
Lemma lem8145522 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term517 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8145521 _144105 _144106 _144138 _144141 P c g a) (@lem8145519 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145524 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145525 {_144105 _144106 _144138 _144141 P : Type'} (f : type566 _144105 _144106 _144138 _144141 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145524 (_144105 -> _144106) (type1517 _144138 _144141 P) f x). Qed.
Lemma lem8145526 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) : (c g) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g).
Proof. exact (@lem8145525 _144105 _144106 _144138 _144141 P c g). Qed.
Lemma lem8145527 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145528 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a).
Proof. exact (MK_COMB (@lem8145526 _144105 _144106 _144138 _144141 P c g) (@lem8145527 P a)). Qed.
Lemma lem8145530 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145531 {_144138 _144141 P : Type'} (f : type1517 _144138 _144141 P) (x : P) : (f x) = (@I (P -> _144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145530 P (type1470 _144138 _144141) f x). Qed.
Lemma lem8145532 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (@lem8145531 _144138 _144141 P (@I ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop) c g) a). Qed.
Lemma lem8145533 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) : (c g a) = (term518 _144105 _144106 _144138 _144141 P c g a).
Proof. exact (TRANS (@lem8145528 _144105 _144106 _144138 _144141 P c g a) (@lem8145532 _144105 _144106 _144138 _144141 P c g a)). Qed.
Lemma lem8145534 {_144105 _144106 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term516 _144105 _144106 _144141 P e g a) = (term516 _144105 _144106 _144141 P e g a).
Proof. exact (eq_refl (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145535 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term519 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8145533 _144105 _144106 _144138 _144141 P c g a) (@lem8145534 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145537 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145538 {_144138 _144141 : Type'} (f : type1470 _144138 _144141) (x : _144141) : (f x) = (@I (_144141 -> _144138 -> Prop) f x).
Proof. exact (@lem8145537 _144141 (_144138 -> Prop) f x). Qed.
Lemma lem8145539 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term519 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8145538 _144138 _144141 (term518 _144105 _144106 _144138 _144141 P c g a) (term516 _144105 _144106 _144141 P e g a)). Qed.
Lemma lem8145540 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term517 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8145535 _144105 _144106 _144138 _144141 P c e g a) (@lem8145539 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145541 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term34 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (TRANS (@lem8145522 _144105 _144106 _144138 _144141 P c e g a) (@lem8145540 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145542 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term39 _144105 _144106 _144138 _144141 P c e f a) = (term526 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (MK_COMB (@lem8145457 _144138) (@lem8145499 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8145543 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (MK_COMB (@lem8145542 _144105 _144106 _144138 _144141 P c e f a) (@lem8145541 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8145544 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8145545 {_144106 : Type'} : (@eq _144106) = (@eq _144106).
Proof. exact (eq_refl (@eq _144106)). Qed.
Lemma lem8145546 {_144105 _144106 : Type'} (f : _144105 -> _144106) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem8145555 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145556 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145555 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8145557 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8145556 _144105 _144106 P z f). Qed.
Lemma lem8145558 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8145559 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8145557 _144105 _144106 P z f) (@lem8145558 _144105 _144106 g)). Qed.
Lemma lem8145561 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145562 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145561 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8145563 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8145562 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8145564 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8145559 _144105 _144106 P z f g) (@lem8145563 _144105 _144106 P z f g)). Qed.
Lemma lem8145565 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145566 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145564 _144105 _144106 P z f g) (@lem8145565 P a)). Qed.
Lemma lem8145568 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145569 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8145568 P _144105 f x). Qed.
Lemma lem8145570 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8145569 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8145572 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8145566 _144105 _144106 P z f g a) (@lem8145570 _144105 _144106 P z f g a)). Qed.
Lemma lem8145573 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term531 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145546 _144105 _144106 f) (@lem8145572 _144105 _144106 P z f g a)). Qed.
Lemma lem8145575 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145576 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8145575 _144105 _144106 f x). Qed.
Lemma lem8145577 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term531 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (@lem8145576 _144105 _144106 f (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8145578 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term530 _144105 _144106 P z f g a) = (term532 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8145573 _144105 _144106 P z f g a) (@lem8145577 _144105 _144106 P z f g a)). Qed.
Lemma lem8145579 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8145588 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145589 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145588 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8145590 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8145589 _144105 _144106 P z f). Qed.
Lemma lem8145591 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8145592 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8145590 _144105 _144106 P z f) (@lem8145591 _144105 _144106 g)). Qed.
Lemma lem8145594 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145595 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145594 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8145596 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8145595 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8145597 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8145592 _144105 _144106 P z f g) (@lem8145596 _144105 _144106 P z f g)). Qed.
Lemma lem8145598 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145599 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145597 _144105 _144106 P z f g) (@lem8145598 P a)). Qed.
Lemma lem8145601 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145602 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8145601 P _144105 f x). Qed.
Lemma lem8145603 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8145602 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8145605 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8145599 _144105 _144106 P z f g a) (@lem8145603 _144105 _144106 P z f g a)). Qed.
Lemma lem8145606 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term534 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145579 _144105 _144106 g) (@lem8145605 _144105 _144106 P z f g a)). Qed.
Lemma lem8145608 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145609 {_144105 _144106 : Type'} (f : _144105 -> _144106) (x : _144105) : (f x) = (@I (_144105 -> _144106) f x).
Proof. exact (@lem8145608 _144105 _144106 f x). Qed.
Lemma lem8145610 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term534 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8145609 _144105 _144106 g (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8145611 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term533 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8145606 _144105 _144106 P z f g a) (@lem8145610 _144105 _144106 P z f g a)). Qed.
Lemma lem8145612 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term536 _144105 _144106 P z f g a) = (term537 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145545 _144106) (@lem8145578 _144105 _144106 P z f g a)). Qed.
Lemma lem8145613 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : ((term530 _144105 _144106 P z f g a) = (term533 _144105 _144106 P z f g a)) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (MK_COMB (@lem8145612 _144105 _144106 P z f g a) (@lem8145611 _144105 _144106 P z f g a)). Qed.
Lemma lem8145614 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term538 _144105 _144106 P z f g a) = (term539 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145544) (@lem8145613 _144105 _144106 P z f g a)). Qed.
Lemma lem8145615 {_144104 _144105 : Type'} (lt2 : type1470 _144104 _144105) : lt2 = lt2.
Proof. exact (eq_refl lt2). Qed.
Lemma lem8145624 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145625 {_144105 _144106 P : Type'} (f : type518 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145624 (_144105 -> _144106) (type557 _144105 _144106 P) f x). Qed.
Lemma lem8145626 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f).
Proof. exact (@lem8145625 _144105 _144106 P z f). Qed.
Lemma lem8145627 {_144105 _144106 : Type'} (g : _144105 -> _144106) : g = g.
Proof. exact (eq_refl g). Qed.
Lemma lem8145628 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g).
Proof. exact (MK_COMB (@lem8145626 _144105 _144106 P z f) (@lem8145627 _144105 _144106 g)). Qed.
Lemma lem8145630 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145631 {_144105 _144106 P : Type'} (f : type557 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> _144105) f x).
Proof. exact (@lem8145630 (_144105 -> _144106) (P -> _144105) f x). Qed.
Lemma lem8145632 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (@lem8145631 _144105 _144106 P (@I ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105) z f) g). Qed.
Lemma lem8145633 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (z f g) = (term527 _144105 _144106 P z f g).
Proof. exact (TRANS (@lem8145628 _144105 _144106 P z f g) (@lem8145632 _144105 _144106 P z f g)). Qed.
Lemma lem8145634 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145635 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term528 _144105 _144106 P z f g a).
Proof. exact (MK_COMB (@lem8145633 _144105 _144106 P z f g) (@lem8145634 P a)). Qed.
Lemma lem8145637 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145638 {_144105 P : Type'} (f : P -> _144105) (x : P) : (f x) = (@I (P -> _144105) f x).
Proof. exact (@lem8145637 P _144105 f x). Qed.
Lemma lem8145639 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term528 _144105 _144106 P z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (@lem8145638 _144105 P (term527 _144105 _144106 P z f g) a). Qed.
Lemma lem8145641 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (z f g a) = (term529 _144105 _144106 P z f g a).
Proof. exact (TRANS (@lem8145635 _144105 _144106 P z f g a) (@lem8145639 _144105 _144106 P z f g a)). Qed.
Lemma lem8145646 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145647 {_144104 P : Type'} (f : P -> _144104) (x : P) : (f x) = (@I (P -> _144104) f x).
Proof. exact (@lem8145646 P _144104 f x). Qed.
Lemma lem8145649 {_144104 P : Type'} (s : P -> _144104) (a : P) : (s a) = (@I (P -> _144104) s a).
Proof. exact (@lem8145647 _144104 P s a). Qed.
Lemma lem8145650 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term540 _144104 _144105 _144106 P lt2 z f g a) = (term541 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (MK_COMB (@lem8145615 _144104 _144105 lt2) (@lem8145641 _144105 _144106 P z f g a)). Qed.
Lemma lem8145651 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term543 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8145650 _144104 _144105 _144106 P lt2 z f g a) (@lem8145649 _144104 P s a)). Qed.
Lemma lem8145653 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145654 {_144104 _144105 : Type'} (f : type1470 _144104 _144105) (x : _144105) : (f x) = (@I (_144105 -> _144104 -> Prop) f x).
Proof. exact (@lem8145653 _144105 (_144104 -> Prop) f x). Qed.
Lemma lem8145655 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term541 _144104 _144105 _144106 P lt2 z f g a) = (term544 _144104 _144105 _144106 P lt2 z f g a).
Proof. exact (@lem8145654 _144104 _144105 lt2 (term529 _144105 _144106 P z f g a)). Qed.
Lemma lem8145656 {_144104 P : Type'} (s : P -> _144104) (a : P) : (@I (P -> _144104) s a) = (@I (P -> _144104) s a).
Proof. exact (eq_refl (@I (P -> _144104) s a)). Qed.
Lemma lem8145657 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term545 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8145655 _144104 _144105 _144106 P lt2 z f g a) (@lem8145656 _144104 P s a)). Qed.
Lemma lem8145659 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145660 {_144104 : Type'} (f : _144104 -> Prop) (x : _144104) : (f x) = (@I (_144104 -> Prop) f x).
Proof. exact (@lem8145659 _144104 Prop f x). Qed.
Lemma lem8145661 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term545 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8145660 _144104 (term544 _144104 _144105 _144106 P lt2 z f g a) (@I (P -> _144104) s a)). Qed.
Lemma lem8145662 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term543 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8145657 _144104 _144105 _144106 P lt2 z f g s a) (@lem8145661 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8145663 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term542 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (TRANS (@lem8145651 _144104 _144105 _144106 P lt2 z f g s a) (@lem8145662 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8145664 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8145665 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term547 _144104 _144105 _144106 P lt2 z f g s a) = (term548 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (MK_COMB (@lem8145664) (@lem8145663 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8145666 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term549 _144104 _144105 _144106 P lt2 s z f g a) = (term550 _144104 _144105 _144106 P lt2 s z f g a).
Proof. exact (MK_COMB (@lem8145665 _144104 _144105 _144106 P lt2 z f g s a) (@lem8145614 _144105 _144106 P z f g a)). Qed.
Lemma lem8145667 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8145674 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145675 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8145674 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8145676 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) : (p g) = (@I ((_144105 -> _144106) -> P -> Prop) p g).
Proof. exact (@lem8145675 _144105 _144106 P p g). Qed.
Lemma lem8145677 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145678 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (@I ((_144105 -> _144106) -> P -> Prop) p g a).
Proof. exact (MK_COMB (@lem8145676 _144105 _144106 P p g) (@lem8145677 P a)). Qed.
Lemma lem8145680 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145681 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8145680 P Prop f x). Qed.
Lemma lem8145682 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8145681 P (@I ((_144105 -> _144106) -> P -> Prop) p g) a). Qed.
Lemma lem8145684 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (TRANS (@lem8145678 _144105 _144106 P p g a) (@lem8145682 _144105 _144106 P p g a)). Qed.
Lemma lem8145685 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p g a) = (term551 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8145667) (@lem8145684 _144105 _144106 P p g a)). Qed.
Lemma lem8145686 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8145687 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term552 _144105 _144106 P p g a).
Proof. exact (MK_COMB (@lem8145686) (@lem8145685 _144105 _144106 P p g a)). Qed.
Lemma lem8145688 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term553 _144104 _144105 _144106 P p lt2 s z f g a) = (term554 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8145687 _144105 _144106 P p g a) (@lem8145666 _144104 _144105 _144106 P lt2 s z f g a)). Qed.
Lemma lem8145689 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8145696 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145697 {_144105 _144106 P : Type'} (f : type560 _144105 _144106 P) (x : _144105 -> _144106) : (f x) = (@I ((_144105 -> _144106) -> P -> Prop) f x).
Proof. exact (@lem8145696 (_144105 -> _144106) (P -> Prop) f x). Qed.
Lemma lem8145698 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) : (p f) = (@I ((_144105 -> _144106) -> P -> Prop) p f).
Proof. exact (@lem8145697 _144105 _144106 P p f). Qed.
Lemma lem8145699 {P : Type'} (a : P) : a = a.
Proof. exact (eq_refl a). Qed.
Lemma lem8145700 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (@I ((_144105 -> _144106) -> P -> Prop) p f a).
Proof. exact (MK_COMB (@lem8145698 _144105 _144106 P p f) (@lem8145699 P a)). Qed.
Lemma lem8145702 {A B : Type'} (f : A -> B) (x : A) : (f x) = (@I (A -> B) f x).
Proof. exact (EQ_MP (@lem20662 A B f x) (@lem20661 A B f x)). Qed.
Lemma lem8145703 {P : Type'} (f : P -> Prop) (x : P) : (f x) = (@I (P -> Prop) f x).
Proof. exact (@lem8145702 P Prop f x). Qed.
Lemma lem8145704 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (@I ((_144105 -> _144106) -> P -> Prop) p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8145703 P (@I ((_144105 -> _144106) -> P -> Prop) p f) a). Qed.
Lemma lem8145706 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (TRANS (@lem8145700 _144105 _144106 P p f a) (@lem8145704 _144105 _144106 P p f a)). Qed.
Lemma lem8145707 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term293 _144105 _144106 P p f a) = (term551 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8145689) (@lem8145706 _144105 _144106 P p f a)). Qed.
Lemma lem8145708 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8145709 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (MK_COMB (@lem8145708) (@lem8145707 _144105 _144106 P p f a)). Qed.
Lemma lem8145710 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term555 _144104 _144105 _144106 P p lt2 s z f g a) = (term556 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8145709 _144105 _144106 P p f a) (@lem8145688 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8145711 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8145712 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term557 _144104 _144105 _144106 P p lt2 s z f g a) = (term558 _144104 _144105 _144106 P p lt2 s z f g a).
Proof. exact (MK_COMB (@lem8145711) (@lem8145710 _144104 _144105 _144106 P p lt2 s z f g a)). Qed.
Lemma lem8145713 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term559 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8145712 _144104 _144105 _144106 P p lt2 s z f g a) (@lem8145543 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8145714 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term561 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8145713 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8145715 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8145716 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term563 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8145715 P) (@lem8145714 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145717 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term565 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8145716 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8145718 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145719 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8145718 _144105 _144106) (@lem8145717 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145720 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8145719 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8145721 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8145722 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8145721 _144105 _144106) (@lem8145720 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8145723 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e.
Proof. exact (EQ_MP (@lem8145722 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (@lem8145209 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8145956 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term513 _144104 _144105 _144106 P lt2 s a f g z) = (term513 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term513 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8145957 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term514 _144104 _144105 _144106 P lt2 s a f g) = (term514 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8145956 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8145958 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8145960 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term515 _144104 _144105 _144106 P lt2 s a f g) = (term515 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8145958 _144105) (@lem8145957 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8145961 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term515 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (EQ_MP (@lem8145960 _144104 _144105 _144106 P lt2 s a f g) (@lem8145298 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8145975 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8145992 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term554 _144104 _144105 _144106 P p lt2 s z f g a) = (term570 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term546 _144104 _144105 _144106 P lt2 z f g s a) (term551 _144105 _144106 P p g a) (term539 _144105 _144106 P z f g a)). Qed.
Lemma lem8145995 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term552 _144105 _144106 P p f a) = (term552 _144105 _144106 P p f a).
Proof. exact (eq_refl (term552 _144105 _144106 P p f a)). Qed.
Lemma lem8145996 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term571 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8145995 _144105 _144106 P p f a) (@lem8145992 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8146003 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term571 _144104 _144105 _144106 P lt2 s p z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (@lem19490 (term573 _144104 _144105 _144106 P p lt2 z f g s a) (term551 _144105 _144106 P p f a) (term574 _144105 _144106 P p z f g a)). Qed.
Lemma lem8146004 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term556 _144104 _144105 _144106 P p lt2 s z f g a) = (term572 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (TRANS (@lem8145996 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8146003 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8146005 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8146006 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term558 _144104 _144105 _144106 P p lt2 s z f g a) = (term575 _144104 _144105 _144106 P lt2 s p z f g a).
Proof. exact (MK_COMB (@lem8146005) (@lem8146004 _144104 _144105 _144106 P lt2 s p z f g a)). Qed.
Lemma lem8146007 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (MK_COMB (@lem8146006 _144104 _144105 _144106 P lt2 s p z f g a) (@lem8145975 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8146014 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term576 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (@lem19699 (term578 _144104 _144105 _144106 P p lt2 z f g s a) (term579 _144105 _144106 P p z f g a) ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8146015 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term560 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a).
Proof. exact (TRANS (@lem8146007 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a) (@lem8146014 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8146016 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term562 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term580 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8146015 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g a)). Qed.
Lemma lem8146017 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8146018 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term564 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g).
Proof. exact (MK_COMB (@lem8146017 P) (@lem8146016 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8146019 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term566 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term582 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8146018 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e g)). Qed.
Lemma lem8146020 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8146021 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term567 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e).
Proof. exact (MK_COMB (@lem8146020 _144105 _144106) (@lem8146019 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8146022 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term568 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term584 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8146021 _144104 _144105 _144106 _144138 _144141 P lt2 s p z f c e)). Qed.
Lemma lem8146023 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8146025 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term569 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) = (term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e).
Proof. exact (MK_COMB (@lem8146023 _144105 _144106) (@lem8146022 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e)). Qed.
Lemma lem8146026 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term585 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e.
Proof. exact (EQ_MP (@lem8146025 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e) (@lem8145723 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1)). Qed.
Lemma lem8146080 {_144104 _144105 _144106 P : Type'} (_107926 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term586 _144104 _144105 _144106 P lt2 s a f g _107926.
Proof. exact (@lem8145961 _144104 _144105 _144106 P lt2 s a f g h1 _107926). Qed.
Lemma lem8146081 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107926 : _144105) : (term586 _144104 _144105 _144106 P lt2 s a f g _107926) = (term513 _144104 _144105 _144106 P lt2 s a f g _107926).
Proof. exact (eq_refl (term586 _144104 _144105 _144106 P lt2 s a f g _107926)). Qed.
Lemma lem8146083 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107927.
Proof. exact (@lem8146026 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e h1 _107927). Qed.
Lemma lem8146084 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107927) = (term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e).
Proof. exact (eq_refl (term587 _144104 _144105 _144106 _144138 _144141 P lt2 s p z c e _107927)). Qed.
Lemma lem8146085 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term583 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e.
Proof. exact (EQ_MP (@lem8146084 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e) (@lem8146083 _144104 _144105 _144106 _144138 _144141 P _107927 p lt2 s z c e h1)). Qed.
Lemma lem8146086 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928.
Proof. exact (@lem8146085 _144104 _144105 _144106 _144138 _144141 P _107927 p lt2 s z c e h1 _107928). Qed.
Lemma lem8146087 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) : (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928) = (term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928).
Proof. exact (eq_refl (term588 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928)). Qed.
Lemma lem8146088 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term581 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928.
Proof. exact (EQ_MP (@lem8146087 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928) (@lem8146086 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 p lt2 s z c e h1)). Qed.
Lemma lem8146089 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929.
Proof. exact (@lem8146088 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 p lt2 s z c e h1 _107929). Qed.
Lemma lem8146090 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929) = (term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929).
Proof. exact (eq_refl (term589 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929)). Qed.
Lemma lem8146091 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term577 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929.
Proof. exact (EQ_MP (@lem8146090 _144104 _144105 _144106 _144138 _144141 P lt2 s p z _107927 c e _107928 _107929) (@lem8146089 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146103 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term590 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929.
Proof. exact (proj2 (@lem8146091 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146104 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929.
Proof. exact (proj1 (@lem8146091 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146114 {_144104 _144105 _144106 P : Type'} (_107926 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term513 _144104 _144105 _144106 P lt2 s a f g _107926.
Proof. exact (EQ_MP (@lem8146081 _144104 _144105 _144106 P lt2 s a f g _107926) (@lem8146080 _144104 _144105 _144106 P _107926 lt2 s a f g h1)). Qed.
Lemma lem8146116 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e f a) : term812 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8145349 _144105 _144106 _144138 _144141 P c e f a) (@lem8145196 _144105 _144106 _144138 _144141 P c e f a h1)). Qed.
Lemma lem8146160 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107927 _107929) (term573 _144104 _144105 _144106 P p lt2 z _107927 _107928 s _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146167 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term593 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107928 _107929) (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146168 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146171 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term592 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8146168 _144105 _144106 P p _107927 _107929) (@lem8146167 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929)). Qed.
Lemma lem8146173 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term591 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929).
Proof. exact (TRANS (@lem8146160 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) (@lem8146171 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929)). Qed.
Lemma lem8146174 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929.
Proof. exact (EQ_MP (@lem8146173 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) (@lem8146104 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146178 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term596 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107927 _107929) (term574 _144105 _144106 P p z _107927 _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146185 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term597 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term598 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (@lem8136196 (term551 _144105 _144106 P p _107928 _107929) (term539 _144105 _144106 P z _107927 _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146186 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146189 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term596 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8146186 _144105 _144106 P p _107927 _107929) (@lem8146185 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929)). Qed.
Lemma lem8146191 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term590 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (TRANS (@lem8146178 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) (@lem8146189 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929)). Qed.
Lemma lem8146192 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929.
Proof. exact (EQ_MP (@lem8146191 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) (@lem8146103 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146193 {_144138 : Type'} : (@I ((_144138 -> Prop) -> Prop)) = (@I ((_144138 -> Prop) -> Prop)).
Proof. exact (eq_refl (@I ((_144138 -> Prop) -> Prop))). Qed.
Lemma lem8146194 {_144138 : Type'} (_107933 : type686 _144138) (_107935 : type686 _144138) (h1 : _107933 = _107935) : _107933 = _107935.
Proof. exact (h1). Qed.
Lemma lem8146195 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) (h1 : _107934 = _107936) : _107934 = _107936.
Proof. exact (h1). Qed.
Lemma lem8146196 {_144138 : Type'} (_107933 : type686 _144138) (_107935 : type686 _144138) (h1 : _107933 = _107935) : (@I ((_144138 -> Prop) -> Prop) _107933) = (@I ((_144138 -> Prop) -> Prop) _107935).
Proof. exact (MK_COMB (@lem8146193 _144138) (@lem8146194 _144138 _107933 _107935 h1)). Qed.
Lemma lem8146197 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107935 : type686 _144138) (h1 : _107934 = _107936) (h2 : _107933 = _107935) : (@I ((_144138 -> Prop) -> Prop) _107933 _107934) = (@I ((_144138 -> Prop) -> Prop) _107935 _107936).
Proof. exact (MK_COMB (@lem8146196 _144138 _107933 _107935 h2) (@lem8146195 _144138 _107934 _107936 h1)). Qed.
Lemma lem8146199 (b : Prop) (a : Prop) : term813 b a.
Proof. exact (EQ_MP (@lem21501 b a) (@lem21598 b a)). Qed.
Lemma lem8146200 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : term814 _144138 _107935 _107936 _107933 _107934.
Proof. exact (@lem8146199 (@I ((_144138 -> Prop) -> Prop) _107935 _107936) (@I ((_144138 -> Prop) -> Prop) _107933 _107934)). Qed.
Lemma lem8146201 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107935 : type686 _144138) (h1 : _107934 = _107936) (h2 : _107933 = _107935) : term815 _144138 _107935 _107936 _107933 _107934.
Proof. exact (@lem8146200 _144138 _107935 _107936 _107933 _107934 (@lem8146197 _144138 _107934 _107936 _107933 _107935 h1 h2)). Qed.
Lemma lem8146202 {_144138 : Type'} (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) (h1 : _107934 = _107936) : term816 _144138 _107935 _107936 _107933 _107934.
Proof. exact (fun h0 : _107933 = _107935 => @lem8146201 _144138 _107934 _107936 _107933 _107935 h1 h0). Qed.
Lemma lem8146204 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8146205 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term816 _144138 _107935 _107936 _107933 _107934) = (term817 _144138 _107935 _107936 _107933 _107934).
Proof. exact (@lem8146204 (_107933 = _107935) (term815 _144138 _107935 _107936 _107933 _107934)). Qed.
Lemma lem8146206 {_144138 : Type'} (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) (h1 : _107934 = _107936) : term817 _144138 _107935 _107936 _107933 _107934.
Proof. exact (EQ_MP (@lem8146205 _144138 _107935 _107936 _107933 _107934) (@lem8146202 _144138 _107935 _107933 _107934 _107936 h1)). Qed.
Lemma lem8146207 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : term818 _144138 _107935 _107936 _107933 _107934.
Proof. exact (fun h0 : _107934 = _107936 => @lem8146206 _144138 _107935 _107933 _107934 _107936 h0). Qed.
Lemma lem8146209 (a : Prop) (b : Prop) : (a -> b) = (term601 a b).
Proof. exact (EQ_MP (@lem21394 a b) (@lem21490 a b)). Qed.
Lemma lem8146210 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term818 _144138 _107935 _107936 _107933 _107934) = (term819 _144138 _107935 _107936 _107933 _107934).
Proof. exact (@lem8146209 (_107934 = _107936) (term817 _144138 _107935 _107936 _107933 _107934)). Qed.
Lemma lem8146211 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : term819 _144138 _107935 _107936 _107933 _107934.
Proof. exact (EQ_MP (@lem8146210 _144138 _107935 _107936 _107933 _107934) (@lem8146207 _144138 _107935 _107936 _107933 _107934)). Qed.
Lemma lem8146466 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : term938 _144138 x y z.
Proof. exact (@lem21385 (_144138 -> Prop) x y z). Qed.
Lemma lem8146492 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8145227 _144105 _144106 P p f a) (@lem8145121 _144105 _144106 P p f a h1)). Qed.
Lemma lem8146493 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8146492 _144105 _144106 P p f a h1). Qed.
Lemma lem8146495 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146496 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8146495 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8146497 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8146496 _144105 _144106 P p f a) (@lem8146493 _144105 _144106 P p f a h1)). Qed.
Lemma lem8146499 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8145245 _144105 _144106 P p g a) (@lem8145127 _144105 _144106 P p g a h1)). Qed.
Lemma lem8146500 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8146499 _144105 _144106 P p g a h1). Qed.
Lemma lem8146502 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146503 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8146502 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8146504 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8146503 _144105 _144106 P p g a) (@lem8146500 _144105 _144106 P p g a h1)). Qed.
Lemma lem8146506 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8145227 _144105 _144106 P p f a) (@lem8145121 _144105 _144106 P p f a h1)). Qed.
Lemma lem8146507 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term605 _144105 _144106 P p f a.
Proof. exact (fun h0 : term551 _144105 _144106 P p f a => @lem8146506 _144105 _144106 P p f a h1). Qed.
Lemma lem8146509 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146510 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p f a) = (term503 _144105 _144106 P p f a).
Proof. exact (@lem8146509 (term503 _144105 _144106 P p f a)). Qed.
Lemma lem8146511 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : p f a) : term503 _144105 _144106 P p f a.
Proof. exact (EQ_MP (@lem8146510 _144105 _144106 P p f a) (@lem8146507 _144105 _144106 P p f a h1)). Qed.
Lemma lem8146513 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8145245 _144105 _144106 P p g a) (@lem8145127 _144105 _144106 P p g a h1)). Qed.
Lemma lem8146514 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term605 _144105 _144106 P p g a.
Proof. exact (fun h0 : term551 _144105 _144106 P p g a => @lem8146513 _144105 _144106 P p g a h1). Qed.
Lemma lem8146516 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146517 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term605 _144105 _144106 P p g a) = (term503 _144105 _144106 P p g a).
Proof. exact (@lem8146516 (term503 _144105 _144106 P p g a)). Qed.
Lemma lem8146518 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : p g a) : term503 _144105 _144106 P p g a.
Proof. exact (EQ_MP (@lem8146517 _144105 _144106 P p g a) (@lem8146514 _144105 _144106 P p g a h1)). Qed.
Lemma lem8146521 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (h1). Qed.
Lemma lem8146522 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term608 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a) => @lem8146521 _144105 _144106 _144138 _144141 P f c e g a h1). Qed.
Lemma lem8146524 (p : Prop) : (term609 p) = (~ p).
Proof. exact (EQ_MP (@lem21028 p) (@lem21107 p)). Qed.
Lemma lem8146525 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term608 _144105 _144106 _144138 _144141 P f c e g a) = (term607 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (@lem8146524 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8146526 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) : term607 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8146525 _144105 _144106 _144138 _144141 P f c e g a) (@lem8146522 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8146542 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146543 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929).
Proof. exact (@lem8146542 (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (term551 _144105 _144106 P p _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146557 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8146558 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term611 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term612 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929).
Proof. exact (@lem8146557 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146566 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) = (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146567 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107927 c e p _107928 _107929).
Proof. exact (MK_COMB (@lem8146566 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (@lem8146558 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929)). Qed.
Lemma lem8146571 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146572 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term614 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107927 c e p _107928 _107929) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929).
Proof. exact (@lem8146571 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146590 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term610 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929).
Proof. exact (TRANS (@lem8146567 _144104 _144105 _144106 _144138 _144141 P lt2 z s _107927 c e p _107928 _107929) (@lem8146572 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929)). Qed.
Lemma lem8146591 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term594 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term615 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929).
Proof. exact (TRANS (@lem8146543 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) (@lem8146590 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929)). Qed.
Lemma lem8146592 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146593 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929).
Proof. exact (MK_COMB (@lem8146592 _144105 _144106 P p _107927 _107929) (@lem8146591 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929)). Qed.
Lemma lem8146597 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146598 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929) = (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929).
Proof. exact (@lem8146597 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107927 _107929) (term618 _144104 _144105 _144106 P lt2 z _107927 s p _107928 _107929)). Qed.
Lemma lem8146614 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146615 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term619 _144104 _144105 _144106 P lt2 z _107927 s p _107928 _107929) = (term620 _144104 _144105 _144106 P lt2 z s _107927 p _107928 _107929).
Proof. exact (@lem8146614 (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (term551 _144105 _144106 P p _107927 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146631 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) = (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8146632 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term617 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146631 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) (@lem8146615 _144104 _144105 _144106 P lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146643 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term616 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146598 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929) (@lem8146632 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146644 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146593 _144104 _144105 _144106 _144138 _144141 P c e lt2 z _107927 s p _107928 _107929) (@lem8146643 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146645 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8146646 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term623 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term624 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146645) (@lem8146644 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146670 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8146671 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term611 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term612 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929).
Proof. exact (@lem8146670 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146679 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146680 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term625 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term626 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929).
Proof. exact (MK_COMB (@lem8146679 _144105 _144106 P p _107927 _107929) (@lem8146671 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929)). Qed.
Lemma lem8146684 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146685 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term626 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929) = (term627 _144105 _144106 _144138 _144141 P c e _107927 p _107928 _107929).
Proof. exact (@lem8146684 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107927 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146703 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term625 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term627 _144105 _144106 _144138 _144141 P c e _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146680 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929) (@lem8146685 _144105 _144106 _144138 _144141 P c e _107927 p _107928 _107929)). Qed.
Lemma lem8146704 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) = (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929).
Proof. exact (eq_refl (term613 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146705 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146704 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (@lem8146703 _144105 _144106 _144138 _144141 P c e _107927 p _107928 _107929)). Qed.
Lemma lem8146709 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146710 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term629 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107927 p _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (@lem8146709 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) (term630 _144105 _144106 P _107927 p _107928 _107929)). Qed.
Lemma lem8146738 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146705 _144104 _144105 _144106 _144138 _144141 P lt2 z s c e _107927 p _107928 _107929) (@lem8146710 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146739 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929)) = ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)).
Proof. exact (MK_COMB (@lem8146646 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929) (@lem8146738 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146741 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8146742 (x : Prop) : (x = x) = True.
Proof. exact (@lem8146741 Prop x). Qed.
Lemma lem8146743 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929) = (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)) = True.
Proof. exact (@lem8146742 (term622 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146744 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929)) = True.
Proof. exact (TRANS (@lem8146739 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929) (@lem8146743 _144104 _144105 _144106 _144138 _144141 P c e lt2 z s _107927 p _107928 _107929)). Qed.
Lemma lem8146745 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : True = ((term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929)).
Proof. exact (SYM (@lem8146744 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929)). Qed.
Lemma lem8146746 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (s : P -> _144104) (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term595 _144104 _144105 _144106 _144138 _144141 P p lt2 z s _107927 c e _107928 _107929) = (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929).
Proof. exact (EQ_MP (@lem8146745 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) (@lem0)). Qed.
Lemma lem8146747 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929.
Proof. exact (EQ_MP (@lem8146746 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) (@lem8146174 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146749 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8146750 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929).
Proof. exact (@lem8146749 (term625 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146752 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8146753 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term635 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term636 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (@lem8146752 (term551 _144105 _144106 P p _107927 _107929) (term611 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929)). Qed.
Lemma lem8146755 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8146756 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term637 _144105 _144106 P p _107927 _107929) = (term503 _144105 _144106 P p _107927 _107929).
Proof. exact (@lem8146755 (term503 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146757 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8146758 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term638 _144105 _144106 P p _107927 _107929) = (term639 _144105 _144106 P p _107927 _107929).
Proof. exact (MK_COMB (@lem8146757) (@lem8146756 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146760 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8146761 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term640 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term641 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (@lem8146760 (term551 _144105 _144106 P p _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146763 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8146764 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term637 _144105 _144106 P p _107928 _107929) = (term503 _144105 _144106 P p _107928 _107929).
Proof. exact (@lem8146763 (term503 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146765 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8146766 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term638 _144105 _144106 P p _107928 _107929) = (term639 _144105 _144106 P p _107928 _107929).
Proof. exact (MK_COMB (@lem8146765) (@lem8146764 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146767 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term607 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) = (term607 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929).
Proof. exact (eq_refl (term607 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8146768 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term641 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term642 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8146766 _144105 _144106 P p _107928 _107929) (@lem8146767 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8146769 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term640 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term642 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (TRANS (@lem8146761 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) (@lem8146768 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929)). Qed.
Lemma lem8146770 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term636 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term643 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8146758 _144105 _144106 P p _107927 _107929) (@lem8146769 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929)). Qed.
Lemma lem8146771 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term635 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term643 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (TRANS (@lem8146753 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) (@lem8146770 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929)). Qed.
Lemma lem8146772 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8146773 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term644 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term645 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8146772) (@lem8146771 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929)). Qed.
Lemma lem8146774 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929) = (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929).
Proof. exact (eq_refl (term546 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146775 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term632 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929).
Proof. exact (MK_COMB (@lem8146773 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) (@lem8146774 _144104 _144105 _144106 P lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146776 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (s : P -> _144104) (_107929 : P) : (term628 _144104 _144105 _144106 _144138 _144141 P lt2 z s p _107927 c e _107928 _107929) = (term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929).
Proof. exact (TRANS (@lem8146750 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929) (@lem8146775 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929)). Qed.
Lemma lem8146778 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p g a) : term642 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8146518 _144105 _144106 P p g a h2) (@lem8146526 _144105 _144106 _144138 _144141 P f c e g a h1)). Qed.
Lemma lem8146779 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h2 : p f a) (h3 : p g a) : term643 _144105 _144106 _144138 _144141 P p f c e g a.
Proof. exact (conj (@lem8146511 _144105 _144106 P p f a h2) (@lem8146778 _144105 _144106 _144138 _144141 P f c e p g a h1 h3)). Qed.
Lemma lem8146781 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929.
Proof. exact (EQ_MP (@lem8146776 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929) (@lem8146747 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8146782 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z _107927 _107928 s _107929.
Proof. exact (@lem8146781 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1). Qed.
Lemma lem8146783 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term646 _144104 _144105 _144106 _144138 _144141 P p c e lt2 z f g s a.
Proof. exact (@lem8146782 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8146786 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (@lem8146783 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1 (@lem8146779 _144105 _144106 _144138 _144141 P c e f p g a h2 h3 h4)). Qed.
Lemma lem8146787 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term647 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (fun h0 : term648 _144104 _144105 _144106 P lt2 z f g s a => @lem8146786 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4). Qed.
Lemma lem8146789 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146790 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (s : P -> _144104) (a : P) : (term647 _144104 _144105 _144106 P lt2 z f g s a) = (term546 _144104 _144105 _144106 P lt2 z f g s a).
Proof. exact (@lem8146789 (term546 _144104 _144105 _144106 P lt2 z f g s a)). Qed.
Lemma lem8146791 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h2 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h3 : p f a) (h4 : p g a) : term546 _144104 _144105 _144106 P lt2 z f g s a.
Proof. exact (EQ_MP (@lem8146790 _144104 _144105 _144106 P lt2 z f g s a) (@lem8146787 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8146797 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8146798 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107926) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a).
Proof. exact (@lem8146797 ((@I (_144105 -> _144106) f _107926) = (@I (_144105 -> _144106) g _107926)) (term510 _144104 _144105 P lt2 _107926 s a)). Qed.
Lemma lem8146806 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8146807 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term650 _144104 _144105 _144106 P lt2 s a f g _107926) = (term651 _144104 _144105 _144106 P f g lt2 _107926 s a).
Proof. exact (MK_COMB (@lem8146806) (@lem8146798 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146815 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term649 _144104 _144105 _144106 P f g lt2 _107926 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a).
Proof. exact (eq_refl (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146816 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107926) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)) = ((term649 _144104 _144105 _144106 P f g lt2 _107926 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)).
Proof. exact (MK_COMB (@lem8146807 _144104 _144105 _144106 P f g lt2 _107926 s a) (@lem8146815 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146818 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8146819 (x : Prop) : (x = x) = True.
Proof. exact (@lem8146818 Prop x). Qed.
Lemma lem8146820 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : ((term649 _144104 _144105 _144106 P f g lt2 _107926 s a) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)) = True.
Proof. exact (@lem8146819 (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146821 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : ((term513 _144104 _144105 _144106 P lt2 s a f g _107926) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)) = True.
Proof. exact (TRANS (@lem8146816 _144104 _144105 _144106 P f g lt2 _107926 s a) (@lem8146820 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146822 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : True = ((term513 _144104 _144105 _144106 P lt2 s a f g _107926) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a)).
Proof. exact (SYM (@lem8146821 _144104 _144105 _144106 P f g lt2 _107926 s a)). Qed.
Lemma lem8146823 {_144104 _144105 _144106 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term513 _144104 _144105 _144106 P lt2 s a f g _107926) = (term649 _144104 _144105 _144106 P f g lt2 _107926 s a).
Proof. exact (EQ_MP (@lem8146822 _144104 _144105 _144106 P f g lt2 _107926 s a) (@lem0)). Qed.
Lemma lem8146824 {_144104 _144105 _144106 P : Type'} (_107926 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term649 _144104 _144105 _144106 P f g lt2 _107926 s a.
Proof. exact (EQ_MP (@lem8146823 _144104 _144105 _144106 P f g lt2 _107926 s a) (@lem8146114 _144104 _144105 _144106 P _107926 lt2 s a f g h1)). Qed.
Lemma lem8146826 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8146827 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107926 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107926 s a) = (term652 _144104 _144105 _144106 P lt2 s a f g _107926).
Proof. exact (@lem8146826 (term510 _144104 _144105 P lt2 _107926 s a) ((@I (_144105 -> _144106) f _107926) = (@I (_144105 -> _144106) g _107926))). Qed.
Lemma lem8146829 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8146830 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term653 _144104 _144105 P lt2 _107926 s a) = (term508 _144104 _144105 P lt2 _107926 s a).
Proof. exact (@lem8146829 (term508 _144104 _144105 P lt2 _107926 s a)). Qed.
Lemma lem8146831 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8146832 {_144104 _144105 P : Type'} (lt2 : type1470 _144104 _144105) (_107926 : _144105) (s : P -> _144104) (a : P) : (term654 _144104 _144105 P lt2 _107926 s a) = (term655 _144104 _144105 P lt2 _107926 s a).
Proof. exact (MK_COMB (@lem8146831) (@lem8146830 _144104 _144105 P lt2 _107926 s a)). Qed.
Lemma lem8146833 {_144105 _144106 : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (_107926 : _144105) : ((@I (_144105 -> _144106) f _107926) = (@I (_144105 -> _144106) g _107926)) = ((@I (_144105 -> _144106) f _107926) = (@I (_144105 -> _144106) g _107926)).
Proof. exact (eq_refl ((@I (_144105 -> _144106) f _107926) = (@I (_144105 -> _144106) g _107926))). Qed.
Lemma lem8146834 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107926 : _144105) : (term652 _144104 _144105 _144106 P lt2 s a f g _107926) = (term656 _144104 _144105 _144106 P lt2 s a f g _107926).
Proof. exact (MK_COMB (@lem8146832 _144104 _144105 P lt2 _107926 s a) (@lem8146833 _144105 _144106 f g _107926)). Qed.
Lemma lem8146835 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (_107926 : _144105) : (term649 _144104 _144105 _144106 P f g lt2 _107926 s a) = (term656 _144104 _144105 _144106 P lt2 s a f g _107926).
Proof. exact (TRANS (@lem8146827 _144104 _144105 _144106 P lt2 s a f g _107926) (@lem8146834 _144104 _144105 _144106 P lt2 s a f g _107926)). Qed.
Lemma lem8146838 {_144104 _144105 _144106 P : Type'} (_107926 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107926.
Proof. exact (EQ_MP (@lem8146835 _144104 _144105 _144106 P lt2 s a f g _107926) (@lem8146824 _144104 _144105 _144106 P _107926 lt2 s a f g h1)). Qed.
Lemma lem8146839 {_144104 _144105 _144106 P : Type'} (_107926 : _144105) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term656 _144104 _144105 _144106 P lt2 s a f g _107926.
Proof. exact (@lem8146838 _144104 _144105 _144106 P _107926 lt2 s a f g h1). Qed.
Lemma lem8146840 {_144104 _144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) : term657 _144104 _144105 _144106 P lt2 s z f g a.
Proof. exact (@lem8146839 _144104 _144105 _144106 P (term529 _144105 _144106 P z f g a) lt2 s a f g h1). Qed.
Lemma lem8146843 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (@lem8146840 _144104 _144105 _144106 P z lt2 s a f g h1 (@lem8146791 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h2 h3 h4 h5)). Qed.
Lemma lem8146844 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term658 _144105 _144106 P z f g a.
Proof. exact (fun h0 : term539 _144105 _144106 P z f g a => @lem8146843 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8146846 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8146847 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) : (term658 _144105 _144106 P z f g a) = ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a)).
Proof. exact (@lem8146846 ((term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a))). Qed.
Lemma lem8146848 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term532 _144105 _144106 P z f g a) = (term535 _144105 _144106 P z f g a).
Proof. exact (EQ_MP (@lem8146847 _144105 _144106 P z f g a) (@lem8146844 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8146864 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146865 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term659 _144105 _144106 _144138 _144141 P z p _107927 c e _107928 _107929).
Proof. exact (@lem8146864 (term539 _144105 _144106 P z _107927 _107928 _107929) (term551 _144105 _144106 P p _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8146881 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8146882 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term611 _144105 _144106 _144138 _144141 P p _107927 c e _107928 _107929) = (term612 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929).
Proof. exact (@lem8146881 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146890 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term660 _144105 _144106 P z _107927 _107928 _107929) = (term660 _144105 _144106 P z _107927 _107928 _107929).
Proof. exact (eq_refl (term660 _144105 _144106 P z _107927 _107928 _107929)). Qed.
Lemma lem8146891 {_144105 _144106 _144138 _144141 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107927 c e _107928 _107929) = (term661 _144105 _144106 _144138 _144141 P z _107927 c e p _107928 _107929).
Proof. exact (MK_COMB (@lem8146890 _144105 _144106 P z _107927 _107928 _107929) (@lem8146882 _144105 _144106 _144138 _144141 P _107927 c e p _107928 _107929)). Qed.
Lemma lem8146895 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146896 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term661 _144105 _144106 _144138 _144141 P z _107927 c e p _107928 _107929) = (term662 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (@lem8146895 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term539 _144105 _144106 P z _107927 _107928 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146916 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term659 _144105 _144106 _144138 _144141 P z p _107927 c e _107928 _107929) = (term662 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146891 _144105 _144106 _144138 _144141 P z _107927 c e p _107928 _107929) (@lem8146896 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8146917 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term598 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term662 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146865 _144105 _144106 _144138 _144141 P z p _107927 c e _107928 _107929) (@lem8146916 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8146918 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8146919 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term663 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146918 _144105 _144106 P p _107927 _107929) (@lem8146917 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8146923 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146924 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) = (term664 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (@lem8146923 ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) (term551 _144105 _144106 P p _107927 _107929) (term665 _144105 _144106 P z _107927 p _107928 _107929)). Qed.
Lemma lem8146940 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8146941 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term666 _144105 _144106 P z _107927 p _107928 _107929) = (term667 _144105 _144106 P z _107927 p _107928 _107929).
Proof. exact (@lem8146940 (term539 _144105 _144106 P z _107927 _107928 _107929) (term551 _144105 _144106 P p _107927 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8146959 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) = (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8146960 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term664 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146959 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) (@lem8146941 _144105 _144106 P z _107927 p _107928 _107929)). Qed.
Lemma lem8146971 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term663 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146924 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) (@lem8146960 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8146972 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8146919 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) (@lem8146971 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8146973 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8146974 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term669 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term670 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8146973) (@lem8146972 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8147000 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8147001 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term574 _144105 _144106 P p z _107927 _107928 _107929) = (term665 _144105 _144106 P z _107927 p _107928 _107929).
Proof. exact (@lem8147000 (term539 _144105 _144106 P z _107927 _107928 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8147009 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term552 _144105 _144106 P p _107927 _107929) = (term552 _144105 _144106 P p _107927 _107929).
Proof. exact (eq_refl (term552 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8147010 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term579 _144105 _144106 P p z _107927 _107928 _107929) = (term666 _144105 _144106 P z _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8147009 _144105 _144106 P p _107927 _107929) (@lem8147001 _144105 _144106 P z _107927 p _107928 _107929)). Qed.
Lemma lem8147014 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8147015 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term666 _144105 _144106 P z _107927 p _107928 _107929) = (term667 _144105 _144106 P z _107927 p _107928 _107929).
Proof. exact (@lem8147014 (term539 _144105 _144106 P z _107927 _107928 _107929) (term551 _144105 _144106 P p _107927 _107929) (term551 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8147033 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term579 _144105 _144106 P p z _107927 _107928 _107929) = (term667 _144105 _144106 P z _107927 p _107928 _107929).
Proof. exact (TRANS (@lem8147010 _144105 _144106 P z _107927 p _107928 _107929) (@lem8147015 _144105 _144106 P z _107927 p _107928 _107929)). Qed.
Lemma lem8147034 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) = (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929).
Proof. exact (eq_refl (term621 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8147035 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929).
Proof. exact (MK_COMB (@lem8147034 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929) (@lem8147033 _144105 _144106 P z _107927 p _107928 _107929)). Qed.
Lemma lem8147046 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929)) = ((term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)).
Proof. exact (MK_COMB (@lem8146974 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) (@lem8147035 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8147048 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8147049 (x : Prop) : (x = x) = True.
Proof. exact (@lem8147048 Prop x). Qed.
Lemma lem8147050 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) = (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)) = True.
Proof. exact (@lem8147049 (term668 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8147051 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : ((term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929)) = True.
Proof. exact (TRANS (@lem8147046 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929) (@lem8147050 _144105 _144106 _144138 _144141 P c e z _107927 p _107928 _107929)). Qed.
Lemma lem8147052 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : True = ((term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929)).
Proof. exact (SYM (@lem8147051 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929)). Qed.
Lemma lem8147053 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term599 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929).
Proof. exact (EQ_MP (@lem8147052 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929) (@lem0)). Qed.
Lemma lem8147054 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929.
Proof. exact (EQ_MP (@lem8147053 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929) (@lem8146192 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8147056 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8147057 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929) = (term672 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (@lem8147056 (term579 _144105 _144106 P p z _107927 _107928 _107929) ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8147059 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8147060 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term673 _144105 _144106 P p z _107927 _107928 _107929) = (term674 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (@lem8147059 (term551 _144105 _144106 P p _107927 _107929) (term574 _144105 _144106 P p z _107927 _107928 _107929)). Qed.
Lemma lem8147062 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147063 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term637 _144105 _144106 P p _107927 _107929) = (term503 _144105 _144106 P p _107927 _107929).
Proof. exact (@lem8147062 (term503 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8147064 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8147065 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107929 : P) : (term638 _144105 _144106 P p _107927 _107929) = (term639 _144105 _144106 P p _107927 _107929).
Proof. exact (MK_COMB (@lem8147064) (@lem8147063 _144105 _144106 P p _107927 _107929)). Qed.
Lemma lem8147067 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8147068 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term675 _144105 _144106 P p z _107927 _107928 _107929) = (term676 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (@lem8147067 (term551 _144105 _144106 P p _107928 _107929) (term539 _144105 _144106 P z _107927 _107928 _107929)). Qed.
Lemma lem8147070 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147071 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term637 _144105 _144106 P p _107928 _107929) = (term503 _144105 _144106 P p _107928 _107929).
Proof. exact (@lem8147070 (term503 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8147072 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8147073 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term638 _144105 _144106 P p _107928 _107929) = (term639 _144105 _144106 P p _107928 _107929).
Proof. exact (MK_COMB (@lem8147072) (@lem8147071 _144105 _144106 P p _107928 _107929)). Qed.
Lemma lem8147075 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147076 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term677 _144105 _144106 P z _107927 _107928 _107929) = ((term532 _144105 _144106 P z _107927 _107928 _107929) = (term535 _144105 _144106 P z _107927 _107928 _107929)).
Proof. exact (@lem8147075 ((term532 _144105 _144106 P z _107927 _107928 _107929) = (term535 _144105 _144106 P z _107927 _107928 _107929))). Qed.
Lemma lem8147077 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term676 _144105 _144106 P p z _107927 _107928 _107929) = (term678 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (MK_COMB (@lem8147073 _144105 _144106 P p _107928 _107929) (@lem8147076 _144105 _144106 P z _107927 _107928 _107929)). Qed.
Lemma lem8147078 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term675 _144105 _144106 P p z _107927 _107928 _107929) = (term678 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (TRANS (@lem8147068 _144105 _144106 P p z _107927 _107928 _107929) (@lem8147077 _144105 _144106 P p z _107927 _107928 _107929)). Qed.
Lemma lem8147079 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term674 _144105 _144106 P p z _107927 _107928 _107929) = (term679 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (MK_COMB (@lem8147065 _144105 _144106 P p _107927 _107929) (@lem8147078 _144105 _144106 P p z _107927 _107928 _107929)). Qed.
Lemma lem8147080 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term673 _144105 _144106 P p z _107927 _107928 _107929) = (term679 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (TRANS (@lem8147060 _144105 _144106 P p z _107927 _107928 _107929) (@lem8147079 _144105 _144106 P p z _107927 _107928 _107929)). Qed.
Lemma lem8147081 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147082 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) : (term680 _144105 _144106 P p z _107927 _107928 _107929) = (term681 _144105 _144106 P p z _107927 _107928 _107929).
Proof. exact (MK_COMB (@lem8147081) (@lem8147080 _144105 _144106 P p z _107927 _107928 _107929)). Qed.
Lemma lem8147083 {_144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)) = ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929)).
Proof. exact (eq_refl ((term520 _144105 _144106 _144138 _144141 P c e _107927 _107929) = (term520 _144105 _144106 _144138 _144141 P c e _107928 _107929))). Qed.
Lemma lem8147084 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term672 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) = (term682 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (MK_COMB (@lem8147082 _144105 _144106 P p z _107927 _107928 _107929) (@lem8147083 _144105 _144106 _144138 _144141 P _107927 c e _107928 _107929)). Qed.
Lemma lem8147085 {_144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (z : type518 _144105 _144106 P) (_107927 : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107928 : _144105 -> _144106) (_107929 : P) : (term671 _144105 _144106 _144138 _144141 P c e p z _107927 _107928 _107929) = (term682 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929).
Proof. exact (TRANS (@lem8147057 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) (@lem8147084 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929)). Qed.
Lemma lem8147087 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term678 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8146504 _144105 _144106 P p g a h5) (@lem8146848 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8147088 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : term679 _144105 _144106 P p z f g a.
Proof. exact (conj (@lem8146497 _144105 _144106 P p f a h4) (@lem8147087 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8147090 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929.
Proof. exact (EQ_MP (@lem8147085 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929) (@lem8147054 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1)). Qed.
Lemma lem8147091 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107927 : _144105 -> _144106) (_107928 : _144105 -> _144106) (_107929 : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z _107927 c e _107928 _107929.
Proof. exact (@lem8147090 _144104 _144105 _144106 _144138 _144141 P _107927 _107928 _107929 p lt2 s z c e h1). Qed.
Lemma lem8147092 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) : term682 _144105 _144106 _144138 _144141 P p z f c e g a.
Proof. exact (@lem8147091 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h1). Qed.
Lemma lem8147095 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term607 _144105 _144106 _144138 _144141 P f c e g a) (h4 : p f a) (h5 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8147092 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s z c e h2 (@lem8147088 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8147096 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term683 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term607 _144105 _144106 _144138 _144141 P f c e g a => @lem8147095 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h3 h4). Qed.
Lemma lem8147098 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147099 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term683 _144105 _144106 _144138 _144141 P f c e g a) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (@lem8147098 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8147100 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8147099 _144105 _144106 _144138 _144141 P f c e g a) (@lem8147096 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8147102 {_144138 : Type'} (x : _144138 -> Prop) : x = x.
Proof. exact (@lem21386 (_144138 -> Prop) x). Qed.
Lemma lem8147103 {_144138 : Type'} (x : _144138 -> Prop) : x = x.
Proof. exact (@lem8147102 _144138 x). Qed.
Lemma lem8147104 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8147103 _144138 (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147105 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term939 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (fun h0 : term940 _144105 _144106 _144138 _144141 P c e f a => @lem8147104 _144105 _144106 _144138 _144141 P c e f a). Qed.
Lemma lem8147107 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147108 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term939 _144105 _144106 _144138 _144141 P c e f a) = ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a)).
Proof. exact (@lem8147107 ((term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a))). Qed.
Lemma lem8147109 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term520 _144105 _144106 _144138 _144141 P c e f a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (EQ_MP (@lem8147108 _144105 _144106 _144138 _144141 P c e f a) (@lem8147105 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147127 (q : Prop) (p : Prop) : (p \/ q) = (q \/ p).
Proof. exact (proj1 (@lem827 (@el Prop) p q)). Qed.
Lemma lem8147128 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term941 _144138 x y z) = (term942 _144138 y x z).
Proof. exact (@lem8147127 (y = z) (term691 _144138 x z)). Qed.
Lemma lem8147138 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) : (term688 _144138 x y) = (term688 _144138 x y).
Proof. exact (eq_refl (term688 _144138 x y)). Qed.
Lemma lem8147139 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term938 _144138 x y z) = (term943 _144138 y x z).
Proof. exact (MK_COMB (@lem8147138 _144138 x y) (@lem8147128 _144138 y x z)). Qed.
Lemma lem8147143 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8147144 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term943 _144138 y x z) = (term944 _144138 y x z).
Proof. exact (@lem8147143 (y = z) (term691 _144138 x y) (term691 _144138 x z)). Qed.
Lemma lem8147166 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term938 _144138 x y z) = (term944 _144138 y x z).
Proof. exact (TRANS (@lem8147139 _144138 y x z) (@lem8147144 _144138 y x z)). Qed.
Lemma lem8147167 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8147168 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term945 _144138 x y z) = (term946 _144138 y x z).
Proof. exact (MK_COMB (@lem8147167) (@lem8147166 _144138 y x z)). Qed.
Lemma lem8147190 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term944 _144138 y x z) = (term944 _144138 y x z).
Proof. exact (eq_refl (term944 _144138 y x z)). Qed.
Lemma lem8147191 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : ((term938 _144138 x y z) = (term944 _144138 y x z)) = ((term944 _144138 y x z) = (term944 _144138 y x z)).
Proof. exact (MK_COMB (@lem8147168 _144138 y x z) (@lem8147190 _144138 y x z)). Qed.
Lemma lem8147193 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8147194 (x : Prop) : (x = x) = True.
Proof. exact (@lem8147193 Prop x). Qed.
Lemma lem8147195 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : ((term944 _144138 y x z) = (term944 _144138 y x z)) = True.
Proof. exact (@lem8147194 (term944 _144138 y x z)). Qed.
Lemma lem8147196 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : ((term938 _144138 x y z) = (term944 _144138 y x z)) = True.
Proof. exact (TRANS (@lem8147191 _144138 y x z) (@lem8147195 _144138 y x z)). Qed.
Lemma lem8147197 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : True = ((term938 _144138 x y z) = (term944 _144138 y x z)).
Proof. exact (SYM (@lem8147196 _144138 y x z)). Qed.
Lemma lem8147198 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term938 _144138 x y z) = (term944 _144138 y x z).
Proof. exact (EQ_MP (@lem8147197 _144138 y x z) (@lem0)). Qed.
Lemma lem8147199 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : term944 _144138 y x z.
Proof. exact (EQ_MP (@lem8147198 _144138 y x z) (@lem8146466 _144138 x y z)). Qed.
Lemma lem8147201 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8147202 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : (term944 _144138 y x z) = (term947 _144138 x y z).
Proof. exact (@lem8147201 (term948 _144138 y x z) (y = z)). Qed.
Lemma lem8147204 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8147205 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term949 _144138 y x z) = (term950 _144138 y x z).
Proof. exact (@lem8147204 (term691 _144138 x y) (term691 _144138 x z)). Qed.
Lemma lem8147207 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147208 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) : (term698 _144138 x y) = (x = y).
Proof. exact (@lem8147207 (x = y)). Qed.
Lemma lem8147209 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8147210 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) : (term699 _144138 x y) = (term700 _144138 x y).
Proof. exact (MK_COMB (@lem8147209) (@lem8147208 _144138 x y)). Qed.
Lemma lem8147212 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147213 {_144138 : Type'} (x : _144138 -> Prop) (z : _144138 -> Prop) : (term698 _144138 x z) = (x = z).
Proof. exact (@lem8147212 (x = z)). Qed.
Lemma lem8147214 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term950 _144138 y x z) = (term951 _144138 y x z).
Proof. exact (MK_COMB (@lem8147210 _144138 x y) (@lem8147213 _144138 x z)). Qed.
Lemma lem8147215 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term949 _144138 y x z) = (term951 _144138 y x z).
Proof. exact (TRANS (@lem8147205 _144138 y x z) (@lem8147214 _144138 y x z)). Qed.
Lemma lem8147216 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147217 {_144138 : Type'} (y : _144138 -> Prop) (x : _144138 -> Prop) (z : _144138 -> Prop) : (term952 _144138 y x z) = (term953 _144138 y x z).
Proof. exact (MK_COMB (@lem8147216) (@lem8147215 _144138 y x z)). Qed.
Lemma lem8147218 {_144138 : Type'} (y : _144138 -> Prop) (z : _144138 -> Prop) : (y = z) = (y = z).
Proof. exact (eq_refl (y = z)). Qed.
Lemma lem8147219 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : (term947 _144138 x y z) = (term954 _144138 x y z).
Proof. exact (MK_COMB (@lem8147217 _144138 y x z) (@lem8147218 _144138 y z)). Qed.
Lemma lem8147220 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : (term944 _144138 y x z) = (term954 _144138 x y z).
Proof. exact (TRANS (@lem8147202 _144138 x y z) (@lem8147219 _144138 x y z)). Qed.
Lemma lem8147222 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term955 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (conj (@lem8147100 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4) (@lem8147109 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147224 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : term954 _144138 x y z.
Proof. exact (EQ_MP (@lem8147220 _144138 x y z) (@lem8147199 _144138 y x z)). Qed.
Lemma lem8147225 {_144138 : Type'} (x : _144138 -> Prop) (y : _144138 -> Prop) (z : _144138 -> Prop) : term954 _144138 x y z.
Proof. exact (@lem8147224 _144138 x y z). Qed.
Lemma lem8147226 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term956 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (@lem8147225 _144138 (term520 _144105 _144106 _144138 _144141 P c e f a) (term520 _144105 _144106 _144138 _144141 P c e g a) (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147229 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8147226 _144105 _144106 _144138 _144141 P g c e f a (@lem8147222 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8147230 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : term683 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (fun h0 : term607 _144105 _144106 _144138 _144141 P g c e f a => @lem8147229 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4). Qed.
Lemma lem8147232 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147233 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term683 _144105 _144106 _144138 _144141 P g c e f a) = ((term520 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e f a)).
Proof. exact (@lem8147232 ((term520 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e f a))). Qed.
Lemma lem8147234 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : p f a) (h4 : p g a) : (term520 _144105 _144106 _144138 _144141 P c e g a) = (term520 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (EQ_MP (@lem8147233 _144105 _144106 _144138 _144141 P g c e f a) (@lem8147230 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4)). Qed.
Lemma lem8147236 {_144138 : Type'} (x : type686 _144138) : x = x.
Proof. exact (@lem21386 (type686 _144138) x). Qed.
Lemma lem8147237 {_144138 : Type'} (x : type686 _144138) : x = x.
Proof. exact (@lem8147236 _144138 x). Qed.
Lemma lem8147238 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (@lem8147237 _144138 (@ex1 _144138)). Qed.
Lemma lem8147239 {_144138 : Type'} : term820 _144138.
Proof. exact (fun h0 : term821 _144138 => @lem8147238 _144138). Qed.
Lemma lem8147241 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147242 {_144138 : Type'} : (term820 _144138) = ((@ex1 _144138) = (@ex1 _144138)).
Proof. exact (@lem8147241 ((@ex1 _144138) = (@ex1 _144138))). Qed.
Lemma lem8147243 {_144138 : Type'} : (@ex1 _144138) = (@ex1 _144138).
Proof. exact (EQ_MP (@lem8147242 _144138) (@lem8147239 _144138)). Qed.
Lemma lem8147245 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term811 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8145399 _144105 _144106 _144138 _144141 P c e g a) (@lem8145202 _144105 _144106 _144138 _144141 P c e g a h1)). Qed.
Lemma lem8147246 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term822 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun h0 : term812 _144105 _144106 _144138 _144141 P c e g a => @lem8147245 _144105 _144106 _144138 _144141 P c e g a h1). Qed.
Lemma lem8147248 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147249 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term822 _144105 _144106 _144138 _144141 P c e g a) = (term811 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (@lem8147248 (term811 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8147250 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term811 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8147249 _144105 _144106 _144138 _144141 P c e g a) (@lem8147246 _144105 _144106 _144138 _144141 P c e g a h1)). Qed.
Lemma lem8147268 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8147269 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term817 _144138 _107935 _107936 _107933 _107934) = (term823 _144138 _107936 _107935 _107933 _107934).
Proof. exact (@lem8147268 (@I ((_144138 -> Prop) -> Prop) _107935 _107936) (term824 _144138 _107933 _107935) (term825 _144138 _107933 _107934)). Qed.
Lemma lem8147287 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) : (term688 _144138 _107934 _107936) = (term688 _144138 _107934 _107936).
Proof. exact (eq_refl (term688 _144138 _107934 _107936)). Qed.
Lemma lem8147288 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term819 _144138 _107935 _107936 _107933 _107934) = (term826 _144138 _107936 _107935 _107933 _107934).
Proof. exact (MK_COMB (@lem8147287 _144138 _107934 _107936) (@lem8147269 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147292 (q : Prop) (p : Prop) (r : Prop) : (term5 p q r) = (term5 q p r).
Proof. exact (proj1 (@lem20668 r p q)). Qed.
Lemma lem8147293 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term826 _144138 _107936 _107935 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934).
Proof. exact (@lem8147292 (@I ((_144138 -> Prop) -> Prop) _107935 _107936) (term691 _144138 _107934 _107936) (term828 _144138 _107935 _107933 _107934)). Qed.
Lemma lem8147323 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term819 _144138 _107935 _107936 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934).
Proof. exact (TRANS (@lem8147288 _144138 _107936 _107935 _107933 _107934) (@lem8147293 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147324 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8147325 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term829 _144138 _107935 _107936 _107933 _107934) = (term830 _144138 _107936 _107935 _107933 _107934).
Proof. exact (MK_COMB (@lem8147324) (@lem8147323 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147355 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term827 _144138 _107936 _107935 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934).
Proof. exact (eq_refl (term827 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147356 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : ((term819 _144138 _107935 _107936 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934)) = ((term827 _144138 _107936 _107935 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934)).
Proof. exact (MK_COMB (@lem8147325 _144138 _107936 _107935 _107933 _107934) (@lem8147355 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147358 {A : Type'} (x : A) : (x = x) = True.
Proof. exact (EQ_MP (@lem20665 A x) (@lem20664 A x)). Qed.
Lemma lem8147359 (x : Prop) : (x = x) = True.
Proof. exact (@lem8147358 Prop x). Qed.
Lemma lem8147360 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : ((term827 _144138 _107936 _107935 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934)) = True.
Proof. exact (@lem8147359 (term827 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147361 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : ((term819 _144138 _107935 _107936 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934)) = True.
Proof. exact (TRANS (@lem8147356 _144138 _107936 _107935 _107933 _107934) (@lem8147360 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147362 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : True = ((term819 _144138 _107935 _107936 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934)).
Proof. exact (SYM (@lem8147361 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147363 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term819 _144138 _107935 _107936 _107933 _107934) = (term827 _144138 _107936 _107935 _107933 _107934).
Proof. exact (EQ_MP (@lem8147362 _144138 _107936 _107935 _107933 _107934) (@lem0)). Qed.
Lemma lem8147364 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : term827 _144138 _107936 _107935 _107933 _107934.
Proof. exact (EQ_MP (@lem8147363 _144138 _107936 _107935 _107933 _107934) (@lem8146211 _144138 _107935 _107936 _107933 _107934)). Qed.
Lemma lem8147366 (b : Prop) (a : Prop) : (a \/ b) = (term631 b a).
Proof. exact (EQ_MP (@lem20682 b a) (@lem20764 b a)). Qed.
Lemma lem8147367 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : (term827 _144138 _107936 _107935 _107933 _107934) = (term831 _144138 _107933 _107934 _107935 _107936).
Proof. exact (@lem8147366 (term832 _144138 _107936 _107935 _107933 _107934) (@I ((_144138 -> Prop) -> Prop) _107935 _107936)). Qed.
Lemma lem8147369 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8147370 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term833 _144138 _107936 _107935 _107933 _107934) = (term834 _144138 _107936 _107935 _107933 _107934).
Proof. exact (@lem8147369 (term691 _144138 _107934 _107936) (term828 _144138 _107935 _107933 _107934)). Qed.
Lemma lem8147372 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147373 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) : (term698 _144138 _107934 _107936) = (_107934 = _107936).
Proof. exact (@lem8147372 (_107934 = _107936)). Qed.
Lemma lem8147374 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8147375 {_144138 : Type'} (_107934 : _144138 -> Prop) (_107936 : _144138 -> Prop) : (term699 _144138 _107934 _107936) = (term700 _144138 _107934 _107936).
Proof. exact (MK_COMB (@lem8147374) (@lem8147373 _144138 _107934 _107936)). Qed.
Lemma lem8147377 (a : Prop) (b : Prop) : (term633 a b) = (term634 a b).
Proof. exact (EQ_MP (@lem20789 a b) (@lem20895 a b)). Qed.
Lemma lem8147378 {_144138 : Type'} (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term835 _144138 _107935 _107933 _107934) = (term836 _144138 _107935 _107933 _107934).
Proof. exact (@lem8147377 (term824 _144138 _107933 _107935) (term825 _144138 _107933 _107934)). Qed.
Lemma lem8147380 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147381 {_144138 : Type'} (_107933 : type686 _144138) (_107935 : type686 _144138) : (term837 _144138 _107933 _107935) = (_107933 = _107935).
Proof. exact (@lem8147380 (_107933 = _107935)). Qed.
Lemma lem8147382 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem8147383 {_144138 : Type'} (_107933 : type686 _144138) (_107935 : type686 _144138) : (term838 _144138 _107933 _107935) = (term839 _144138 _107933 _107935).
Proof. exact (MK_COMB (@lem8147382) (@lem8147381 _144138 _107933 _107935)). Qed.
Lemma lem8147385 (a : Prop) : (term202 a) = a.
Proof. exact (EQ_MP (@lem20780 a) (@lem0)). Qed.
Lemma lem8147386 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term840 _144138 _107933 _107934) = (@I ((_144138 -> Prop) -> Prop) _107933 _107934).
Proof. exact (@lem8147385 (@I ((_144138 -> Prop) -> Prop) _107933 _107934)). Qed.
Lemma lem8147387 {_144138 : Type'} (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term836 _144138 _107935 _107933 _107934) = (term841 _144138 _107935 _107933 _107934).
Proof. exact (MK_COMB (@lem8147383 _144138 _107933 _107935) (@lem8147386 _144138 _107933 _107934)). Qed.
Lemma lem8147388 {_144138 : Type'} (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term835 _144138 _107935 _107933 _107934) = (term841 _144138 _107935 _107933 _107934).
Proof. exact (TRANS (@lem8147378 _144138 _107935 _107933 _107934) (@lem8147387 _144138 _107935 _107933 _107934)). Qed.
Lemma lem8147389 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term834 _144138 _107936 _107935 _107933 _107934) = (term842 _144138 _107936 _107935 _107933 _107934).
Proof. exact (MK_COMB (@lem8147375 _144138 _107934 _107936) (@lem8147388 _144138 _107935 _107933 _107934)). Qed.
Lemma lem8147390 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term833 _144138 _107936 _107935 _107933 _107934) = (term842 _144138 _107936 _107935 _107933 _107934).
Proof. exact (TRANS (@lem8147370 _144138 _107936 _107935 _107933 _107934) (@lem8147389 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147391 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147392 {_144138 : Type'} (_107936 : _144138 -> Prop) (_107935 : type686 _144138) (_107933 : type686 _144138) (_107934 : _144138 -> Prop) : (term843 _144138 _107936 _107935 _107933 _107934) = (term844 _144138 _107936 _107935 _107933 _107934).
Proof. exact (MK_COMB (@lem8147391) (@lem8147390 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147393 {_144138 : Type'} (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : (@I ((_144138 -> Prop) -> Prop) _107935 _107936) = (@I ((_144138 -> Prop) -> Prop) _107935 _107936).
Proof. exact (eq_refl (@I ((_144138 -> Prop) -> Prop) _107935 _107936)). Qed.
Lemma lem8147394 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : (term831 _144138 _107933 _107934 _107935 _107936) = (term845 _144138 _107933 _107934 _107935 _107936).
Proof. exact (MK_COMB (@lem8147392 _144138 _107936 _107935 _107933 _107934) (@lem8147393 _144138 _107935 _107936)). Qed.
Lemma lem8147395 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : (term827 _144138 _107936 _107935 _107933 _107934) = (term845 _144138 _107933 _107934 _107935 _107936).
Proof. exact (TRANS (@lem8147367 _144138 _107933 _107934 _107935 _107936) (@lem8147394 _144138 _107933 _107934 _107935 _107936)). Qed.
Lemma lem8147397 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term146 _144105 _144106 _144138 _144141 P c e g a) : term846 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (conj (@lem8147243 _144138) (@lem8147250 _144105 _144106 _144138 _144141 P c e g a h1)). Qed.
Lemma lem8147398 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : p f a) (h5 : p g a) : term847 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (conj (@lem8147234 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h4 h5) (@lem8147397 _144105 _144106 _144138 _144141 P c e g a h3)). Qed.
Lemma lem8147400 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : term845 _144138 _107933 _107934 _107935 _107936.
Proof. exact (EQ_MP (@lem8147395 _144138 _107933 _107934 _107935 _107936) (@lem8147364 _144138 _107936 _107935 _107933 _107934)). Qed.
Lemma lem8147401 {_144138 : Type'} (_107933 : type686 _144138) (_107934 : _144138 -> Prop) (_107935 : type686 _144138) (_107936 : _144138 -> Prop) : term845 _144138 _107933 _107934 _107935 _107936.
Proof. exact (@lem8147400 _144138 _107933 _107934 _107935 _107936). Qed.
Lemma lem8147402 {_144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : term848 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (@lem8147401 _144138 (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e g a) (@ex1 _144138) (term520 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147405 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : p f a) (h5 : p g a) : term811 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (@lem8147402 _144105 _144106 _144138 _144141 P g c e f a (@lem8147398 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8147406 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : p f a) (h5 : p g a) : term822 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (fun h0 : term812 _144105 _144106 _144138 _144141 P c e f a => @lem8147405 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5). Qed.
Lemma lem8147408 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147409 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term822 _144105 _144106 _144138 _144141 P c e f a) = (term811 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8147408 (term811 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147410 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : p f a) (h5 : p g a) : term811 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8147409 _144105 _144106 _144138 _144141 P c e f a) (@lem8147406 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8147413 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8147415 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term812 _144105 _144106 _144138 _144141 P c e f a) = (term849 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (@lem8147413 (term811 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147418 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) (h1 : term161 _144105 _144106 _144138 _144141 P c e f a) : term849 _144105 _144106 _144138 _144141 P c e f a.
Proof. exact (EQ_MP (@lem8147415 _144105 _144106 _144138 _144141 P c e f a) (@lem8146116 _144105 _144106 _144138 _144141 P c e f a h1)). Qed.
Lemma lem8147421 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (@lem8147418 _144105 _144106 _144138 _144141 P c e f a h4 (@lem8147410 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h5 h6)). Qed.
Lemma lem8147422 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term710.
Proof. exact (fun h0 : ~ False => @lem8147421 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5 h6). Qed.
Lemma lem8147424 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8147425 : term710 = False.
Proof. exact (@lem8147424 False). Qed.
Lemma lem8147426 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h3 : term146 _144105 _144106 _144138 _144141 P c e g a) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : False.
Proof. exact (EQ_MP (@lem8147425) (@lem8147422 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8147427 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (ex_elim (@lem8144789 _144104 _144105 _144106 _144141 P p lt2 s e h2) (fun z' : type518 _144105 _144106 P => fun h0 : term411 _144104 _144105 _144106 _144141 P p lt2 s e z' => @lem8147426 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h3 h4 h5 h6 h7)). Qed.
Lemma lem8147428 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (ex_elim (@lem8145115 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h3) (fun z : type518 _144105 _144106 P => fun h0 : term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z => @lem8147427 _144104 _144105 _144106 _144138 _144141 P lt2 s z c e f p g a h1 h2 h0 h4 h5 h6 h7)). Qed.
Lemma lem8147429 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (term146 _144105 _144106 _144138 _144141 P c e g a) = False.
Proof. exact (prop_ext (fun h8 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8147428 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8145202 _144105 _144106 _144138 _144141 P c e g a h4)). Qed.
Lemma lem8147430 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8147429 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8145202 _144105 _144106 _144138 _144141 P c e g a h4)). Qed.
Lemma lem8147431 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (term161 _144105 _144106 _144138 _144141 P c e f a) = False.
Proof. exact (prop_ext (fun h8 : term161 _144105 _144106 _144138 _144141 P c e f a => @lem8147430 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8145196 _144105 _144106 _144138 _144141 P c e f a h5)). Qed.
Lemma lem8147432 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8147431 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8145196 _144105 _144106 _144138 _144141 P c e f a h5)). Qed.
Lemma lem8147433 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (p g a) = False.
Proof. exact (prop_ext (fun h8 : p g a => @lem8147432 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8145127 _144105 _144106 P p g a h7)). Qed.
Lemma lem8147434 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8147433 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8145127 _144105 _144106 P p g a h7)). Qed.
Lemma lem8147435 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (p f a) = False.
Proof. exact (prop_ext (fun h8 : p f a => @lem8147434 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : False => @lem8145121 _144105 _144106 P p f a h6)). Qed.
Lemma lem8147436 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : False.
Proof. exact (EQ_MP (@lem8147435 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8145121 _144105 _144106 P p f a h6)). Qed.
Lemma lem8147437 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : term867 _144105 _144106 _144138 _144141 P _107925 c e g a.
Proof. exact (fun h0 : term864 _144105 _144106 _144138 _144141 P _107925 c e g a => @lem8147436 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7). Qed.
Lemma lem8147438 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : _107925 = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8144462 _144105 _144106 _144138 _144141 P _107925 c e g a) (@lem8147437 _144104 _144105 _144106 _144138 _144141 P _107925 lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8147439 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term895 _144105 _144106 _144138 _144141 P _107925 c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8147438 _144104 _144105 _144106 _144138 _144141 P _107925 lt2 s c e f p g a h1 h2 h3 h0 h4 h5 h6). Qed.
Lemma lem8147440 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term896 _144105 _144106 _144138 _144141 P f _107925 c e g a.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e f a => @lem8147439 _144104 _144105 _144106 _144138 _144141 P _107925 lt2 s c e f p g a h1 h2 h3 h0 h4 h5). Qed.
Lemma lem8147441 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term897 _144104 _144105 _144106 _144138 _144141 P lt2 s f _107925 c e g a.
Proof. exact (fun h0 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8147440 _144104 _144105 _144106 _144138 _144141 P _107925 lt2 s c e f p g a h0 h1 h2 h3 h4). Qed.
Lemma lem8147442 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107925 : _144138) (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term898 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a.
Proof. exact (fun h0 : p g a => @lem8147441 _144104 _144105 _144106 _144138 _144141 P _107925 lt2 s c e f p g a h1 h2 h3 h0). Qed.
Lemma lem8147443 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (_107925 : _144138) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term899 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a.
Proof. exact (fun h0 : p f a => @lem8147442 _144104 _144105 _144106 _144138 _144141 P _107925 g lt2 s c e p f a h1 h2 h0). Qed.
Lemma lem8147444 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term900 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a.
Proof. exact (fun h0 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8147443 _144104 _144105 _144106 _144138 _144141 P f _107925 g a p lt2 s c e h1 h0). Qed.
Lemma lem8147445 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (_107925 : _144138) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term901 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a.
Proof. exact (fun h0 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8147444 _144104 _144105 _144106 _144138 _144141 P f _107925 c g a p lt2 s e h0). Qed.
Lemma lem8147450 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term905 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun _107925 : _144138 => @lem8147445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f _107925 c e g a). Qed.
Lemma lem8147455 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term909 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (fun p : type560 _144105 _144106 P => @lem8147450 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8147460 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term913 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (fun lt2 : type1470 _144104 _144105 => @lem8147455 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a). Qed.
Lemma lem8147465 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term917 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun s : P -> _144104 => @lem8147460 _144104 _144105 _144106 _144138 _144141 P s f c e g a). Qed.
Lemma lem8147470 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term921 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun f : _144105 -> _144106 => @lem8147465 _144104 _144105 _144106 _144138 _144141 P f c e g a). Qed.
Lemma lem8147475 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term925 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8147470 _144104 _144105 _144106 _144138 _144141 P c e g a). Qed.
Lemma lem8147480 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term929 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (fun e : type564 _144105 _144106 _144141 P => @lem8147475 _144104 _144105 _144106 _144138 _144141 P e g a). Qed.
Lemma lem8147485 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term933 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (fun g : _144105 -> _144106 => @lem8147480 _144104 _144105 _144106 _144138 _144141 P g a). Qed.
Lemma lem8147490 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term937 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (fun a : P => @lem8147485 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8147491 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term936 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (EQ_MP (@lem8144451 _144104 _144105 _144106 _144138 _144141 P) (@lem8147490 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8147492 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term957 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (@lem8147491 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8147493 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term957 _144104 _144105 _144106 _144138 _144141 P a) = (term932 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (eq_refl (term957 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8147494 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term932 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (EQ_MP (@lem8147493 _144104 _144105 _144106 _144138 _144141 P a) (@lem8147492 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8147495 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) (g : _144105 -> _144106) : term958 _144104 _144105 _144106 _144138 _144141 P a g.
Proof. exact (@lem8147494 _144104 _144105 _144106 _144138 _144141 P a g). Qed.
Lemma lem8147496 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term958 _144104 _144105 _144106 _144138 _144141 P a g) = (term928 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (eq_refl (term958 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8147497 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term928 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (EQ_MP (@lem8147496 _144104 _144105 _144106 _144138 _144141 P g a) (@lem8147495 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8147498 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) (e : type564 _144105 _144106 _144141 P) : term959 _144104 _144105 _144106 _144138 _144141 P g a e.
Proof. exact (@lem8147497 _144104 _144105 _144106 _144138 _144141 P g a e). Qed.
Lemma lem8147499 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term959 _144104 _144105 _144106 _144138 _144141 P g a e) = (term924 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (eq_refl (term959 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8147500 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term924 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (EQ_MP (@lem8147499 _144104 _144105 _144106 _144138 _144141 P e g a) (@lem8147498 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8147501 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (c : type566 _144105 _144106 _144138 _144141 P) : term960 _144104 _144105 _144106 _144138 _144141 P e g a c.
Proof. exact (@lem8147500 _144104 _144105 _144106 _144138 _144141 P e g a c). Qed.
Lemma lem8147502 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term960 _144104 _144105 _144106 _144138 _144141 P e g a c) = (term920 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term960 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8147503 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term920 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8147502 _144104 _144105 _144106 _144138 _144141 P c e g a) (@lem8147501 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8147504 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (f : _144105 -> _144106) : term961 _144104 _144105 _144106 _144138 _144141 P c e g a f.
Proof. exact (@lem8147503 _144104 _144105 _144106 _144138 _144141 P c e g a f). Qed.
Lemma lem8147505 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term961 _144104 _144105 _144106 _144138 _144141 P c e g a f) = (term916 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (eq_refl (term961 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8147506 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term916 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8147505 _144104 _144105 _144106 _144138 _144141 P f c e g a) (@lem8147504 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8147507 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (s : P -> _144104) : term962 _144104 _144105 _144106 _144138 _144141 P f c e g a s.
Proof. exact (@lem8147506 _144104 _144105 _144106 _144138 _144141 P f c e g a s). Qed.
Lemma lem8147508 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term962 _144104 _144105 _144106 _144138 _144141 P f c e g a s) = (term912 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (eq_refl (term962 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8147509 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term912 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (EQ_MP (@lem8147508 _144104 _144105 _144106 _144138 _144141 P s f c e g a) (@lem8147507 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8147510 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (lt2 : type1470 _144104 _144105) : term963 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2.
Proof. exact (@lem8147509 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2). Qed.
Lemma lem8147511 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term963 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2) = (term908 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (eq_refl (term963 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8147512 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term908 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8147511 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) (@lem8147510 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8147513 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) : term964 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p.
Proof. exact (@lem8147512 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p). Qed.
Lemma lem8147514 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term964 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p) = (term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term964 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8147515 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term882 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8147514 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8147513 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8147517 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term861 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8143895 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147515 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147518 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term878 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147517 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8147519 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term876 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147518 _144104 _144105 _144106 _144138 _144141 P f c g a p lt2 s e h1 (@lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8147520 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term874 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147519 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s c e h1 h2 (@lem8136632 _144105 _144106 P p f a h3)). Qed.
Lemma lem8147521 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term872 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (@lem8147520 _144104 _144105 _144106 _144138 _144141 P g lt2 s c e p f a h1 h2 h3 (@lem8136634 _144105 _144106 P p g a h4)). Qed.
Lemma lem8147522 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term870 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8147521 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h2 h3 h4 h5 (@lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8147523 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term868 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (@lem8147522 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h5 h6 (@lem8136670 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8147524 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : term858 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (@lem8147523 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h5 h6 h7 (@lem8136757 _144105 _144106 _144138 _144141 P c e g a h4)). Qed.
Lemma lem8147525 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : term859 _144105 _144106 _144138 _144141 P c e g a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (@lem8147524 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h7 h8 (@lem8143803 _144105 _144106 _144138 _144141 P c e g a h6)). Qed.
Lemma lem8147526 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : term859 _144105 _144106 _144138 _144141 P c e g a) (h7 : p f a) (h8 : p g a) : (term859 _144105 _144106 _144138 _144141 P c e g a) = False.
Proof. exact (prop_ext (fun h9 : term859 _144105 _144106 _144138 _144141 P c e g a => @lem8147525 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (fun h9 : False => @lem8143803 _144105 _144106 _144138 _144141 P c e g a h6)). Qed.
Lemma lem8147527 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : term859 _144105 _144106 _144138 _144141 P c e g a) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (EQ_MP (@lem8147526 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (@lem8143803 _144105 _144106 _144138 _144141 P c e g a h6)). Qed.
Lemma lem8147528 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : term858 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun h0 : term859 _144105 _144106 _144138 _144141 P c e g a => @lem8147527 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h0 h6 h7). Qed.
Lemma lem8147531 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8147532 {_144138 : Type'} : ((term147 _144138) = (term147 _144138)) = (term965 _144138).
Proof. exact (@lem8147531 ((term147 _144138) = (term147 _144138))). Qed.
Lemma lem8147533 {_144138 : Type'} : (term965 _144138) = ((term147 _144138) = (term147 _144138)).
Proof. exact (SYM (@lem8147532 _144138)). Qed.
Lemma lem8147534 {_144138 : Type'} (h1 : term966 _144138) : term966 _144138.
Proof. exact (h1). Qed.
Lemma lem8147553 {_144138 : Type'} (P : _144138 -> Prop) : term721 _144138 P.
Proof. exact (@lem19732 _144138 P). Qed.
Lemma lem8147554 {_144138 : Type'} : term722 _144138.
Proof. exact (@lem8147553 _144138 (term723 _144138)). Qed.
Lemma lem8147555 {_144138 : Type'} : (term724 _144138) = False.
Proof. exact (eq_refl (term724 _144138)). Qed.
Lemma lem8147556 {_144138 : Type'} (x : _144138) : (term725 _144138 x) = False.
Proof. exact (eq_refl (term725 _144138 x)). Qed.
Lemma lem8147557 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147558 {_144138 : Type'} (x : _144138) : (term726 _144138 x) = (imp False).
Proof. exact (MK_COMB (@lem8147557) (@lem8147556 _144138 x)). Qed.
Lemma lem8147559 {_144138 : Type'} (x : _144138) : (term727 _144138 x) = (False -> False).
Proof. exact (MK_COMB (@lem8147558 _144138 x) (@lem8147555 _144138)). Qed.
Lemma lem8147560 {_144138 : Type'} : (term728 _144138) = (term729 _144138).
Proof. exact (fun_ext (fun x : _144138 => @lem8147559 _144138 x)). Qed.
Lemma lem8147561 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8147562 {_144138 : Type'} : (term722 _144138) = (term730 _144138).
Proof. exact (MK_COMB (@lem8147561 _144138) (@lem8147560 _144138)). Qed.
Lemma lem8147563 {_144138 : Type'} : term730 _144138.
Proof. exact (EQ_MP (@lem8147562 _144138) (@lem8147554 _144138)). Qed.
Lemma lem8147564 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147565 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147564 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 (@lem8147563 _144138)). Qed.
Lemma lem8147566 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term969 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147565 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8147567 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : _107997 = (term147 _144138).
Proof. exact (h1). Qed.
Lemma lem8147570 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term147 _144138) = _107997.
Proof. exact (SYM (@lem8147567 _144138 _107997 h1)). Qed.
Lemma lem8147571 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term147 _144138) = _107997.
Proof. exact (@lem8147570 _144138 _107997 h1). Qed.
Lemma lem8147572 {_144138 : Type'} : (@eq _144138) = (@eq _144138).
Proof. exact (eq_refl (@eq _144138)). Qed.
Lemma lem8147573 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term863 _144138) = (@eq _144138 _107997).
Proof. exact (MK_COMB (@lem8147572 _144138) (@lem8147571 _144138 _107997 h1)). Qed.
Lemma lem8147575 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term147 _144138) = _107997.
Proof. exact (SYM (@lem8147567 _144138 _107997 h1)). Qed.
Lemma lem8147576 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term147 _144138) = _107997.
Proof. exact (@lem8147575 _144138 _107997 h1). Qed.
Lemma lem8147577 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : ((term147 _144138) = (term147 _144138)) = (_107997 = _107997).
Proof. exact (MK_COMB (@lem8147573 _144138 _107997 h1) (@lem8147576 _144138 _107997 h1)). Qed.
Lemma lem8147578 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8147579 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term966 _144138) = (term970 _144138 _107997).
Proof. exact (MK_COMB (@lem8147578) (@lem8147577 _144138 _107997 h1)). Qed.
Lemma lem8147580 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147581 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term971 _144138) = (term972 _144138 _107997).
Proof. exact (MK_COMB (@lem8147580) (@lem8147579 _144138 _107997 h1)). Qed.
Lemma lem8147582 : False = False.
Proof. exact (eq_refl False). Qed.
Lemma lem8147583 {_144138 : Type'} (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term965 _144138) = (term973 _144138 _107997).
Proof. exact (MK_COMB (@lem8147581 _144138 _107997 h1) (@lem8147582)). Qed.
Lemma lem8147584 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8147585 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term974 _144105 _144106 _144138 _144141 P c e g a) = (term975 _144105 _144106 _144138 _144141 P c e g a _107997).
Proof. exact (MK_COMB (@lem8147584 _144105 _144106 _144138 _144141 P c e g a) (@lem8147583 _144138 _107997 h1)). Qed.
Lemma lem8147586 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e f a) = (term149 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147587 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term976 _144105 _144106 _144138 _144141 P f c e g a) = (term977 _144105 _144106 _144138 _144141 P f c e g a _107997).
Proof. exact (MK_COMB (@lem8147586 _144105 _144106 _144138 _144141 P c e f a) (@lem8147585 _144105 _144106 _144138 _144141 P c e g a _107997 h1)). Qed.
Lemma lem8147588 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147589 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term978 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term979 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147588 _144104 _144105 _144106 P lt2 s a f g) (@lem8147587 _144105 _144106 _144138 _144141 P f c e g a _107997 h1)). Qed.
Lemma lem8147590 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8147591 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term980 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term981 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147590 _144105 _144106 P p g a) (@lem8147589 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147592 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8147593 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term982 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term983 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147592 _144105 _144106 P p f a) (@lem8147591 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147594 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8147595 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term984 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term985 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147594 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8147593 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147596 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8147597 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term986 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147596 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8147595 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147598 {_144138 : Type'} : (term751 _144138) = (term751 _144138).
Proof. exact (eq_refl (term751 _144138)). Qed.
Lemma lem8147599 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147598 _144138) (@lem8147597 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147600 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147601 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term989 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (@lem8147600 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 _107997). Qed.
Lemma lem8147602 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term989 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (eq_refl (term989 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147603 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (EQ_MP (@lem8147602 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) (@lem8147601 _144104 _144105 _144106 _144138 _144141 P _107997 p lt2 s f c e g a h1)). Qed.
Lemma lem8147604 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : (term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (SYM (@lem8147599 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147605 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : _107997 = (term147 _144138)) : term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8147604 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h2) (@lem8147603 _144104 _144105 _144106 _144138 _144141 P _107997 p lt2 s f c e g a h1)). Qed.
Lemma lem8147606 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : term990 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147605 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h0 h1). Qed.
Lemma lem8147607 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term991 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem51 (term967 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147608 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : term992 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147607 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147606 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1)). Qed.
Lemma lem8147609 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (h1 : _107997 = (term147 _144138)) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147608 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h1 (@lem8147566 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147610 {_144138 : Type'} : (term147 _144138) = (term147 _144138).
Proof. exact (eq_refl (term147 _144138)). Qed.
Lemma lem8147611 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term994 _144104 _144105 _144106 _144138 _144141 P _107997 p lt2 s f c e g a.
Proof. exact (fun h0 : _107997 = (term147 _144138) => @lem8147609 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997 h0). Qed.
Lemma lem8147612 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term995 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147611 _144104 _144105 _144106 _144138 _144141 P (term147 _144138) p lt2 s f c e g a). Qed.
Lemma lem8147613 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147612 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147610 _144138)). Qed.
Lemma lem8147614 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147615 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term996 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147614 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8147616 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term997 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem51 (term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147617 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term998 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147616 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147615 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147618 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147617 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147613 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147619 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147620 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147621 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147619 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2 (@lem8147620 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1)). Qed.
Lemma lem8147622 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term999 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147621 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 h0). Qed.
Lemma lem8147623 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (h1). Qed.
Lemma lem8147624 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (h2 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147622 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h1 (@lem8147623 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h2)). Qed.
Lemma lem8147625 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (h1 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147624 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0 h1). Qed.
Lemma lem8147626 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term998 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a => @lem8147625 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a h0). Qed.
Lemma lem8147629 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147626 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8147618 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147630 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term993 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147629 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8147670 {A : Type'} (t : Prop) : (term765 A t) = t.
Proof. exact (EQ_MP (@lem16458 A t) (@lem16457 A t)). Qed.
Lemma lem8147671 {_144138 : Type'} (t : Prop) : (term765 _144138 t) = t.
Proof. exact (@lem8147670 _144138 t). Qed.
Lemma lem8147672 {_144138 : Type'} : (term730 _144138) = (False -> False).
Proof. exact (@lem8147671 _144138 (False -> False)). Qed.
Lemma lem8147674 (t : Prop) : (False -> t) = True.
Proof. exact (proj1 (@lem16473 t)). Qed.
Lemma lem8147675 : (False -> False) = True.
Proof. exact (@lem8147674 False). Qed.
Lemma lem8147676 {_144138 : Type'} : (term730 _144138) = True.
Proof. exact (TRANS (@lem8147672 _144138) (@lem8147675)). Qed.
Lemma lem8147677 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147678 {_144138 : Type'} : (term751 _144138) = (imp True).
Proof. exact (MK_COMB (@lem8147677) (@lem8147676 _144138)). Qed.
Lemma lem8147748 (t : Prop) : (t -> False) = (~ t).
Proof. exact (proj2 (@lem16474 t)). Qed.
Lemma lem8147749 {_144138 : Type'} (_107997 : _144138) : (term973 _144138 _107997) = (term1000 _144138 _107997).
Proof. exact (@lem8147748 (term970 _144138 _107997)). Qed.
Lemma lem8147751 (t : Prop) : (term202 t) = t.
Proof. exact (EQ_MP (@lem16507 t) (@lem16506 t)). Qed.
Lemma lem8147752 {_144138 : Type'} (_107997 : _144138) : (term1000 _144138 _107997) = (_107997 = _107997).
Proof. exact (@lem8147751 (_107997 = _107997)). Qed.
Lemma lem8147753 {_144138 : Type'} (_107997 : _144138) : (term973 _144138 _107997) = (_107997 = _107997).
Proof. exact (TRANS (@lem8147749 _144138 _107997) (@lem8147752 _144138 _107997)). Qed.
Lemma lem8147754 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e g a) = (term149 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8147755 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term975 _144105 _144106 _144138 _144141 P c e g a _107997) = (term1001 _144105 _144106 _144138 _144141 P c e g a _107997).
Proof. exact (MK_COMB (@lem8147754 _144105 _144106 _144138 _144141 P c e g a) (@lem8147753 _144138 _107997)). Qed.
Lemma lem8147758 {_144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (a : P) : (term149 _144105 _144106 _144138 _144141 P c e f a) = (term149 _144105 _144106 _144138 _144141 P c e f a).
Proof. exact (eq_refl (term149 _144105 _144106 _144138 _144141 P c e f a)). Qed.
Lemma lem8147759 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term977 _144105 _144106 _144138 _144141 P f c e g a _107997) = (term1002 _144105 _144106 _144138 _144141 P f c e g a _107997).
Proof. exact (MK_COMB (@lem8147758 _144105 _144106 _144138 _144141 P c e f a) (@lem8147755 _144105 _144106 _144138 _144141 P c e g a _107997)). Qed.
Lemma lem8147762 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (eq_refl (term206 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147763 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term979 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997) = (term1003 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147762 _144104 _144105 _144106 P lt2 s a f g) (@lem8147759 _144105 _144106 _144138 _144141 P f c e g a _107997)). Qed.
Lemma lem8147766 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8147767 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term981 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1004 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147766 _144105 _144106 P p g a) (@lem8147763 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997)). Qed.
Lemma lem8147770 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8147771 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term983 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1005 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147770 _144105 _144106 P p f a) (@lem8147767 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147774 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (eq_refl (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8147775 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term985 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1006 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147774 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8147771 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147778 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (eq_refl (term217 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8147779 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term986 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147778 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8147775 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147782 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1008 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147678 _144138) (@lem8147779 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147784 (t : Prop) : (True -> t) = t.
Proof. exact (proj1 (@lem16471 t)). Qed.
Lemma lem8147785 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1008 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (@lem8147784 (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147854 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term987 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (TRANS (@lem8147782 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) (@lem8147785 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147855 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1009 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term1010 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun _107997 : _144138 => @lem8147854 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147856 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8147857 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term1011 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8147856 _144138) (@lem8147855 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147862 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1012 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term1013 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8147857 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147863 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8147864 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1014 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term1015 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8147863 _144105 _144106 P) (@lem8147862 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8147869 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1016 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term1017 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8147864 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8147870 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8147871 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1018 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term1019 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8147870 _144104 _144105) (@lem8147869 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8147876 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1020 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term1021 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8147871 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8147877 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8147878 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1022 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term1023 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8147877 _144104 P) (@lem8147876 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8147883 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1024 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term1025 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8147878 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8147884 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8147885 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1026 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term1027 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8147884 _144105 _144106) (@lem8147883 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8147890 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1028 _144104 _144105 _144106 _144138 _144141 P e g a) = (term1029 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8147885 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8147891 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8147892 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1030 _144104 _144105 _144106 _144138 _144141 P e g a) = (term1031 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8147891 _144105 _144106 _144138 _144141 P) (@lem8147890 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8147897 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term1032 _144104 _144105 _144106 _144138 _144141 P g a) = (term1033 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8147892 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8147898 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8147899 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term1034 _144104 _144105 _144106 _144138 _144141 P g a) = (term1035 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8147898 _144105 _144106 _144141 P) (@lem8147897 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8147904 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term1036 _144104 _144105 _144106 _144138 _144141 P a) = (term1037 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8147899 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8147905 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8147906 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term1038 _144104 _144105 _144106 _144138 _144141 P a) = (term1039 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8147905 _144105 _144106) (@lem8147904 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8147911 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1040 _144104 _144105 _144106 _144138 _144141 P) = (term1041 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8147906 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8147912 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8147921 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1042 _144104 _144105 _144106 _144138 _144141 P) = (term1043 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8147912 P) (@lem8147911 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8147934 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1002 _144105 _144106 _144138 _144141 P f c e g a _107997) = (term1002 _144105 _144106 _144138 _144141 P f c e g a _107997).
Proof. exact (eq_refl (term1002 _144105 _144106 _144138 _144141 P f c e g a _107997)). Qed.
Lemma lem8147939 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147940 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8147939 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147941 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8147942 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8147941 _144105) (@lem8147940 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147943 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147944 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term206 _144104 _144105 _144106 P lt2 s a f g) = (term206 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8147943) (@lem8147942 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147945 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1003 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997) = (term1003 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147944 _144104 _144105 _144106 P lt2 s a f g) (@lem8147934 _144105 _144106 _144138 _144141 P f c e g a _107997)). Qed.
Lemma lem8147948 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p g a) = (term209 _144105 _144106 P p g a).
Proof. exact (eq_refl (term209 _144105 _144106 P p g a)). Qed.
Lemma lem8147949 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1004 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1004 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147948 _144105 _144106 P p g a) (@lem8147945 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997)). Qed.
Lemma lem8147952 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term209 _144105 _144106 P p f a) = (term209 _144105 _144106 P p f a).
Proof. exact (eq_refl (term209 _144105 _144106 P p f a)). Qed.
Lemma lem8147953 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1005 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1005 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147952 _144105 _144106 P p f a) (@lem8147949 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147954 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8147959 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147960 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8147959 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147961 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8147962 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8147961 _144105) (@lem8147960 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147965 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8147966 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8147965 _144105 _144106 P p g a) (@lem8147962 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147969 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8147970 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8147969 _144105 _144106 P p f a) (@lem8147966 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8147971 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147972 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8147971) (@lem8147970 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8147973 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8147972 _144104 _144105 _144106 P p lt2 s a f g) (@lem8147954 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8147974 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8147973 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8147975 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8147976 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8147975 P) (@lem8147974 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8147977 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8147976 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8147978 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8147979 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8147978 _144105 _144106) (@lem8147977 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8147980 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8147979 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8147981 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8147982 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8147981 _144105 _144106) (@lem8147980 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8147983 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8147984 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term214 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8147983) (@lem8147982 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8147985 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1006 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1006 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8147984 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8147953 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8147986 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8147991 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term251 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term251 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147992 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term252 _144104 _144105 _144106 P lt2 s a f g) = (term252 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8147991 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8147993 {_144105 : Type'} : (@all _144105) = (@all _144105).
Proof. exact (eq_refl (@all _144105)). Qed.
Lemma lem8147994 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term137 _144104 _144105 _144106 P lt2 s a f g) = (term137 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8147993 _144105) (@lem8147992 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8147997 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p g a) = (term253 _144105 _144106 P p g a).
Proof. exact (eq_refl (term253 _144105 _144106 P p g a)). Qed.
Lemma lem8147998 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = (term136 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8147997 _144105 _144106 P p g a) (@lem8147994 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148001 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term253 _144105 _144106 P p f a) = (term253 _144105 _144106 P p f a).
Proof. exact (eq_refl (term253 _144105 _144106 P p f a)). Qed.
Lemma lem8148002 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term135 _144104 _144105 _144106 P p lt2 s a f g) = (term135 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148001 _144105 _144106 P p f a) (@lem8147998 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148003 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8148004 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term40 _144104 _144105 _144106 P p lt2 s a f g) = (term40 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148003) (@lem8148002 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148005 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148004 _144104 _144105 _144106 P p lt2 s a f g) (@lem8147986 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8148006 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8148005 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148007 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148008 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148007 P) (@lem8148006 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148009 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term257 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148008 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148010 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148011 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term258 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148010 _144105 _144106) (@lem8148009 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148012 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term259 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148011 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148013 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148014 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term15 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148013 _144105 _144106) (@lem8148012 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148015 : imp = imp.
Proof. exact (eq_refl imp). Qed.
Lemma lem8148016 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term217 _144104 _144105 _144106 _144141 P p lt2 s e) = (term217 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148015) (@lem8148014 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148017 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997) = (term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997).
Proof. exact (MK_COMB (@lem8148016 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8147985 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8148018 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1010 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term1010 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun _107997 : _144138 => @lem8148017 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997)). Qed.
Lemma lem8148019 {_144138 : Type'} : (@all _144138) = (@all _144138).
Proof. exact (eq_refl (@all _144138)). Qed.
Lemma lem8148020 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1011 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term1011 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148019 _144138) (@lem8148018 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148021 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1013 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term1013 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (fun_ext (fun p : type560 _144105 _144106 P => @lem8148020 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148022 {_144105 _144106 P : Type'} : (@all ((_144105 -> _144106) -> P -> Prop)) = (@all ((_144105 -> _144106) -> P -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> Prop))). Qed.
Lemma lem8148023 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1015 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) = (term1015 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148022 _144105 _144106 P) (@lem8148021 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8148024 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1017 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term1017 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (fun_ext (fun lt2 : type1470 _144104 _144105 => @lem8148023 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a)). Qed.
Lemma lem8148025 {_144104 _144105 : Type'} : (@all (_144105 -> _144104 -> Prop)) = (@all (_144105 -> _144104 -> Prop)).
Proof. exact (eq_refl (@all (_144105 -> _144104 -> Prop))). Qed.
Lemma lem8148026 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1019 _144104 _144105 _144106 _144138 _144141 P s f c e g a) = (term1019 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (MK_COMB (@lem8148025 _144104 _144105) (@lem8148024 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8148027 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1021 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term1021 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (fun_ext (fun s : P -> _144104 => @lem8148026 _144104 _144105 _144106 _144138 _144141 P s f c e g a)). Qed.
Lemma lem8148028 {_144104 P : Type'} : (@all (P -> _144104)) = (@all (P -> _144104)).
Proof. exact (eq_refl (@all (P -> _144104))). Qed.
Lemma lem8148029 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1023 _144104 _144105 _144106 _144138 _144141 P f c e g a) = (term1023 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (MK_COMB (@lem8148028 _144104 P) (@lem8148027 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148030 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1025 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term1025 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148029 _144104 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148031 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148032 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1027 _144104 _144105 _144106 _144138 _144141 P c e g a) = (term1027 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (MK_COMB (@lem8148031 _144105 _144106) (@lem8148030 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8148033 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1029 _144104 _144105 _144106 _144138 _144141 P e g a) = (term1029 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (fun_ext (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8148032 _144104 _144105 _144106 _144138 _144141 P c e g a)). Qed.
Lemma lem8148034 {_144105 _144106 _144138 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)) = (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141 -> _144138 -> Prop))). Qed.
Lemma lem8148035 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1031 _144104 _144105 _144106 _144138 _144141 P e g a) = (term1031 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (MK_COMB (@lem8148034 _144105 _144106 _144138 _144141 P) (@lem8148033 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8148036 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term1033 _144104 _144105 _144106 _144138 _144141 P g a) = (term1033 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (fun_ext (fun e : type564 _144105 _144106 _144141 P => @lem8148035 _144104 _144105 _144106 _144138 _144141 P e g a)). Qed.
Lemma lem8148037 {_144105 _144106 _144141 P : Type'} : (@all ((_144105 -> _144106) -> P -> _144141)) = (@all ((_144105 -> _144106) -> P -> _144141)).
Proof. exact (eq_refl (@all ((_144105 -> _144106) -> P -> _144141))). Qed.
Lemma lem8148038 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term1035 _144104 _144105 _144106 _144138 _144141 P g a) = (term1035 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (MK_COMB (@lem8148037 _144105 _144106 _144141 P) (@lem8148036 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8148039 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term1037 _144104 _144105 _144106 _144138 _144141 P a) = (term1037 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148038 _144104 _144105 _144106 _144138 _144141 P g a)). Qed.
Lemma lem8148040 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148041 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term1039 _144104 _144105 _144106 _144138 _144141 P a) = (term1039 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (MK_COMB (@lem8148040 _144105 _144106) (@lem8148039 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8148042 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1041 _144104 _144105 _144106 _144138 _144141 P) = (term1041 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (fun_ext (fun a : P => @lem8148041 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8148043 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148044 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1043 _144104 _144105 _144106 _144138 _144141 P) = (term1043 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (MK_COMB (@lem8148043 P) (@lem8148042 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8148187 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1042 _144104 _144105 _144106 _144138 _144141 P) = (term1043 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (TRANS (@lem8147921 _144104 _144105 _144106 _144138 _144141 P) (@lem8148044 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8148188 {_144104 _144105 _144106 _144138 _144141 P : Type'} : (term1043 _144104 _144105 _144106 _144138 _144141 P) = (term1042 _144104 _144105 _144106 _144138 _144141 P).
Proof. exact (SYM (@lem8148187 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8148189 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (h1). Qed.
Lemma lem8148190 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (h1). Qed.
Lemma lem8148197 (p : Prop) : p = (term194 p).
Proof. exact (EQ_MP (@lem10578 p) (@lem10597 p)). Qed.
Lemma lem8148198 {_144138 : Type'} (_107997 : _144138) : (_107997 = _107997) = (term973 _144138 _107997).
Proof. exact (@lem8148197 (_107997 = _107997)). Qed.
Lemma lem8148199 {_144138 : Type'} (_107997 : _144138) : (term973 _144138 _107997) = (_107997 = _107997).
Proof. exact (SYM (@lem8148198 _144138 _107997)). Qed.
Lemma lem8148200 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term970 _144138 _107997.
Proof. exact (h1). Qed.
Lemma lem8148209 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8148210 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8148211 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8148210 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148212 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148213 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8148214 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148213) (@lem8148212 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148215 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8148214 _144104 _144105 _144106 P lt2 s a f g z) (@lem8148209 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148216 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148215 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148217 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148218 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8148217 _144105) (@lem8148216 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148219 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8148211 _144104 _144105 _144106 P lt2 s a f g) (@lem8148218 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148221 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148222 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148221 _144105 _144106 P p g a) (@lem8148219 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148223 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148224 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148223 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148222 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148226 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148227 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148226 _144105 _144106 P p f a) (@lem8148224 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148228 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148229 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148228 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148227 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148230 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8148231 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148232 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148231) (@lem8148229 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148233 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148232 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148230 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8148234 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term281 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8148235 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term254 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8148234 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148233 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148236 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term255 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8148235 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148237 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148238 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term256 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148237 P) (@lem8148236 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148239 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term257 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term285 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148238 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148240 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148241 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term258 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term286 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148240 _144105 _144106) (@lem8148239 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148242 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term259 _144104 _144105 _144106 _144141 P p lt2 s e) = (term287 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148241 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148243 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148244 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term288 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148243 _144105 _144106) (@lem8148242 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148351 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8148352 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8148351 _144105 P Q). Qed.
Lemma lem8148353 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8148352 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148354 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148355 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148354 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148356 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148357 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8148356 _144105) (@lem8148355 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148358 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148359 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148358 _144105 _144106 P p g a) (@lem8148357 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148360 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148361 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148360) (@lem8148359 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148362 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148363 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148364 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148363 _144105 _144106 P p g a) (@lem8148362 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148365 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148364 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148366 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148367 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148366 _144105) (@lem8148365 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148368 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8148361 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148367 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148369 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8148368 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148353 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148370 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148371 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148370 _144105 _144106 P p f a) (@lem8148369 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148373 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8148374 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8148373 _144105 P Q). Qed.
Lemma lem8148375 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8148374 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148376 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148377 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148376 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148378 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148379 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148378 _144105) (@lem8148377 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148380 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148381 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148380 _144105 _144106 P p f a) (@lem8148379 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148382 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148383 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148382) (@lem8148381 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148384 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148385 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148386 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148385 _144105 _144106 P p f a) (@lem8148384 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148387 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148386 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148388 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148389 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148388 _144105) (@lem8148387 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148390 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8148383 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148389 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148391 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8148390 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148375 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148392 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148371 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148391 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148393 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148394 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148393) (@lem8148392 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148395 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8148396 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148394 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148395 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8148398 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8148399 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8148398 _144105 P Q). Qed.
Lemma lem8148400 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (@lem8148399 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((e f a) = (e g a))). Qed.
Lemma lem8148401 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148402 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148401 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148403 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148404 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148403 _144105) (@lem8148402 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148405 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148406 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148405) (@lem8148404 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148407 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8148408 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148406 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148407 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8148409 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148410 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term327 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term328 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148409) (@lem8148408 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148411 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148412 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148413 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148412) (@lem8148411 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148414 {_144105 _144106 _144141 P : Type'} (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((e f a) = (e g a)) = ((e f a) = (e g a)).
Proof. exact (eq_refl ((e f a) = (e g a))). Qed.
Lemma lem8148415 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term331 _144104 _144105 _144106 _144141 P p lt2 s z f e g a) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (MK_COMB (@lem8148413 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8148414 _144105 _144106 _144141 P f e g a)). Qed.
Lemma lem8148416 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term333 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8148415 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8148417 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148418 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148417 _144105) (@lem8148416 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148419 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term321 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term322 _144104 _144105 _144106 _144141 P p lt2 s f e g a)) = ((term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a)).
Proof. exact (MK_COMB (@lem8148410 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148418 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148420 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term318 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (EQ_MP (@lem8148419 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148400 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148421 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term282 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (TRANS (@lem8148396 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148420 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148422 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term283 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8148421 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148423 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148424 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148423 P) (@lem8148422 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148426 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148427 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8148426 P _144105 P'). Qed.
Lemma lem8148428 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (@lem8148427 _144105 P (term344 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148429 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148430 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148431 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z).
Proof. exact (MK_COMB (@lem8148429 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148430 _144105 z)). Qed.
Lemma lem8148432 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term347 _144104 _144105 _144106 _144141 P p lt2 s f e g a z)). Qed.
Lemma lem8148433 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term346 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) = (term332 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8148431 _144104 _144105 _144106 _144141 P p lt2 s f e g a z) (@lem8148432 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8148434 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term348 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8148433 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8148435 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148436 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term349 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term335 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (MK_COMB (@lem8148435 _144105) (@lem8148434 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148437 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term350 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term336 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun a : P => @lem8148436 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148438 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148439 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148438 P) (@lem8148437 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148440 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148441 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term351 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term352 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148440) (@lem8148439 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148442 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a) = (term334 _144104 _144105 _144106 _144141 P p lt2 s f e g a).
Proof. exact (eq_refl (term345 _144104 _144105 _144106 _144141 P p lt2 s f e g a)). Qed.
Lemma lem8148443 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8148444 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a).
Proof. exact (MK_COMB (@lem8148442 _144104 _144105 _144106 _144141 P p lt2 s f e g a) (@lem8148443 _144105 P z a)). Qed.
Lemma lem8148445 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (eq_refl (term354 _144104 _144105 _144106 _144141 P p lt2 s f e g z a)). Qed.
Lemma lem8148446 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term353 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) = (term355 _144104 _144105 _144106 _144141 P p lt2 s z f e g a).
Proof. exact (TRANS (@lem8148444 _144104 _144105 _144106 _144141 P p lt2 s f e g z a) (@lem8148445 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8148447 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term356 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term357 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (fun_ext (fun a : P => @lem8148446 _144104 _144105 _144106 _144141 P p lt2 s z f e g a)). Qed.
Lemma lem8148448 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148449 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term358 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (MK_COMB (@lem8148448 P) (@lem8148447 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148450 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term360 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8148449 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148451 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8148452 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148451 _144105 P) (@lem8148450 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148453 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term342 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term343 _144104 _144105 _144106 _144141 P p lt2 s f e g)) = ((term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g)).
Proof. exact (MK_COMB (@lem8148441 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8148452 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148454 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term337 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (EQ_MP (@lem8148453 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8148428 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148455 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term284 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (TRANS (@lem8148424 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8148454 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148456 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term285 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148455 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148457 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148458 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148457 _144105 _144106) (@lem8148456 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148460 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148461 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8148460 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8148462 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (@lem8148461 _144105 _144106 P (term369 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148463 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148464 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148465 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z).
Proof. exact (MK_COMB (@lem8148463 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8148464 _144105 P z)). Qed.
Lemma lem8148466 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term372 _144104 _144105 _144106 _144141 P p lt2 s f e g z)). Qed.
Lemma lem8148467 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term371 _144104 _144105 _144106 _144141 P p lt2 s f e g z) = (term359 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8148465 _144104 _144105 _144106 _144141 P p lt2 s f e g z) (@lem8148466 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148468 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term373 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8148467 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148469 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8148470 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term374 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term362 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (MK_COMB (@lem8148469 _144105 P) (@lem8148468 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148471 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term375 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term363 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148470 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148472 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148473 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term364 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148472 _144105 _144106) (@lem8148471 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148474 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148475 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term376 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term377 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148474) (@lem8148473 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148476 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g) = (term361 _144104 _144105 _144106 _144141 P p lt2 s f e g).
Proof. exact (eq_refl (term370 _144104 _144105 _144106 _144141 P p lt2 s f e g)). Qed.
Lemma lem8148477 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8148478 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g).
Proof. exact (MK_COMB (@lem8148476 _144104 _144105 _144106 _144141 P p lt2 s f e g) (@lem8148477 _144105 _144106 P z g)). Qed.
Lemma lem8148479 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (eq_refl (term379 _144104 _144105 _144106 _144141 P p lt2 s f e z g)). Qed.
Lemma lem8148480 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term378 _144104 _144105 _144106 _144141 P p lt2 s f e z g) = (term380 _144104 _144105 _144106 _144141 P p lt2 s z f e g).
Proof. exact (TRANS (@lem8148478 _144104 _144105 _144106 _144141 P p lt2 s f e z g) (@lem8148479 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148481 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term381 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term382 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148480 _144104 _144105 _144106 _144141 P p lt2 s z f e g)). Qed.
Lemma lem8148482 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148483 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term383 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (MK_COMB (@lem8148482 _144105 _144106) (@lem8148481 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148484 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term385 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8148483 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148485 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148486 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term368 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148485 _144105 _144106 P) (@lem8148484 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148487 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : ((term367 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term368 _144104 _144105 _144106 _144141 P p lt2 s f e)) = ((term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e)).
Proof. exact (MK_COMB (@lem8148475 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8148486 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148488 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term364 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (EQ_MP (@lem8148487 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8148462 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148489 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term286 _144104 _144105 _144106 _144141 P p lt2 s f e) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (TRANS (@lem8148458 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8148488 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148490 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term287 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148489 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148491 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148492 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148491 _144105 _144106) (@lem8148490 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148494 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148495 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8148494 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8148496 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (@lem8148495 _144105 _144106 P (term394 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148497 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8148498 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148499 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z).
Proof. exact (MK_COMB (@lem8148497 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8148498 _144105 _144106 P z)). Qed.
Lemma lem8148500 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term397 _144104 _144105 _144106 _144141 P p lt2 s f e z)). Qed.
Lemma lem8148501 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term396 _144104 _144105 _144106 _144141 P p lt2 s e f z) = (term384 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8148499 _144104 _144105 _144106 _144141 P p lt2 s f e z) (@lem8148500 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148502 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term398 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8148501 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148503 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148504 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term399 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term387 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (MK_COMB (@lem8148503 _144105 _144106 P) (@lem8148502 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148505 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term400 _144104 _144105 _144106 _144141 P p lt2 s e) = (term388 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148504 _144104 _144105 _144106 _144141 P p lt2 s f e)). Qed.
Lemma lem8148506 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148507 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term389 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148506 _144105 _144106) (@lem8148505 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148508 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148509 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term401 _144104 _144105 _144106 _144141 P p lt2 s e) = (term402 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148508) (@lem8148507 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148510 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term395 _144104 _144105 _144106 _144141 P p lt2 s e f) = (term386 _144104 _144105 _144106 _144141 P p lt2 s f e).
Proof. exact (eq_refl (term395 _144104 _144105 _144106 _144141 P p lt2 s e f)). Qed.
Lemma lem8148511 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8148512 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f).
Proof. exact (MK_COMB (@lem8148510 _144104 _144105 _144106 _144141 P p lt2 s f e) (@lem8148511 _144105 _144106 P z f)). Qed.
Lemma lem8148513 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (eq_refl (term404 _144104 _144105 _144106 _144141 P p lt2 s e z f)). Qed.
Lemma lem8148514 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (e : type564 _144105 _144106 _144141 P) : (term403 _144104 _144105 _144106 _144141 P p lt2 s e z f) = (term405 _144104 _144105 _144106 _144141 P p lt2 s z f e).
Proof. exact (TRANS (@lem8148512 _144104 _144105 _144106 _144141 P p lt2 s e z f) (@lem8148513 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148515 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term406 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term407 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148514 _144104 _144105 _144106 _144141 P p lt2 s z f e)). Qed.
Lemma lem8148516 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148517 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (e : type564 _144105 _144106 _144141 P) : (term408 _144104 _144105 _144106 _144141 P p lt2 s e z) = (term409 _144104 _144105 _144106 _144141 P p lt2 s z e).
Proof. exact (MK_COMB (@lem8148516 _144105 _144106) (@lem8148515 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8148518 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term410 _144104 _144105 _144106 _144141 P p lt2 s e) = (term411 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8148517 _144104 _144105 _144106 _144141 P p lt2 s z e)). Qed.
Lemma lem8148519 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148520 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term393 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (MK_COMB (@lem8148519 _144105 _144106 P) (@lem8148518 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148521 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : ((term392 _144104 _144105 _144106 _144141 P p lt2 s e) = (term393 _144104 _144105 _144106 _144141 P p lt2 s e)) = ((term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e)).
Proof. exact (MK_COMB (@lem8148509 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8148520 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148522 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term389 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (EQ_MP (@lem8148521 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8148496 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148524 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term288 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8148492 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8148522 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148525 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term412 _144104 _144105 _144106 _144141 P p lt2 s e).
Proof. exact (TRANS (@lem8148244 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8148524 _144104 _144105 _144106 _144141 P p lt2 s e)). Qed.
Lemma lem8148526 {_144104 _144105 _144106 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term412 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (EQ_MP (@lem8148525 _144104 _144105 _144106 _144141 P p lt2 s e) (@lem8148189 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8148535 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term260 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (@lem17362 (term262 _144104 _144105 P lt2 z s a) ((f z) = (g z))). Qed.
Lemma lem8148536 {_144105 : Type'} (P : _144105 -> Prop) : (term263 _144105 P) = (term264 _144105 P).
Proof. exact (@lem18392 _144105 P). Qed.
Lemma lem8148537 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term266 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (@lem8148536 _144105 (term252 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148538 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term267 _144104 _144105 _144106 P lt2 s a f g z) = (term251 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term267 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148539 : not = not.
Proof. exact (eq_refl not). Qed.
Lemma lem8148540 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term260 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148539) (@lem8148538 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148541 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term268 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (TRANS (@lem8148540 _144104 _144105 _144106 P lt2 s a f g z) (@lem8148535 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148542 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term269 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148541 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148543 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148544 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term266 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8148543 _144105) (@lem8148542 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148545 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term265 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (TRANS (@lem8148537 _144104 _144105 _144106 P lt2 s a f g) (@lem8148544 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148547 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148548 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term273 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148547 _144105 _144106 P p g a) (@lem8148545 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148549 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term273 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p g a) (term137 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148550 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term275 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148549 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148548 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148552 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148553 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term276 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148552 _144105 _144106 P p f a) (@lem8148550 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148554 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term276 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem17045 (p f a) (term136 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148555 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term278 _144104 _144105 _144106 P p lt2 s a f g) = (term277 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148554 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148553 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148556 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148557 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148558 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term279 _144104 _144105 _144106 P p lt2 s a f g) = (term280 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148557) (@lem8148555 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148559 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148558 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148556 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148560 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term413 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem17265 (term135 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148561 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term42 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8148560 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148559 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148562 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term44 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8148561 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148563 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148564 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term46 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148563 P) (@lem8148562 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148565 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term48 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148564 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148566 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148567 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term50 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148566 _144105 _144106) (@lem8148565 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148568 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term52 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148567 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148569 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148570 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8148569 _144105 _144106) (@lem8148568 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148677 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8148678 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8148677 _144105 P Q). Qed.
Lemma lem8148679 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8148678 _144105 (term293 _144105 _144106 P p g a) (term270 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148680 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148681 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term295 _144104 _144105 _144106 P lt2 s a f g) = (term270 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148680 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148682 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148683 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term296 _144104 _144105 _144106 P lt2 s a f g) = (term271 _144104 _144105 _144106 P lt2 s a f g).
Proof. exact (MK_COMB (@lem8148682 _144105) (@lem8148681 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148684 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148685 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term291 _144104 _144105 _144106 P p lt2 s a f g) = (term274 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148684 _144105 _144106 P p g a) (@lem8148683 _144104 _144105 _144106 P lt2 s a f g)). Qed.
Lemma lem8148686 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148687 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term297 _144104 _144105 _144106 P p lt2 s a f g) = (term298 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148686) (@lem8148685 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148688 {_144104 _144105 _144106 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term294 _144104 _144105 _144106 P lt2 s a f g z) = (term261 _144104 _144105 _144106 P lt2 s a f g z).
Proof. exact (eq_refl (term294 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148689 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p g a) = (term272 _144105 _144106 P p g a).
Proof. exact (eq_refl (term272 _144105 _144106 P p g a)). Qed.
Lemma lem8148690 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term299 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148689 _144105 _144106 P p g a) (@lem8148688 _144104 _144105 _144106 P lt2 s a f g z)). Qed.
Lemma lem8148691 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term301 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148690 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148692 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148693 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term292 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148692 _144105) (@lem8148691 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148694 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term291 _144104 _144105 _144106 P p lt2 s a f g) = (term292 _144104 _144105 _144106 P p lt2 s a f g)) = ((term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8148687 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148693 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148695 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term274 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8148694 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148679 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148696 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148697 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148696 _144105 _144106 P p f a) (@lem8148695 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148699 {A : Type'} (P : Prop) (Q : A -> Prop) : (term289 A P Q) = (term290 A P Q).
Proof. exact (EQ_MP (@lem18911 A P Q) (@lem18910 A P Q)). Qed.
Lemma lem8148700 {_144105 : Type'} (P : Prop) (Q : _144105 -> Prop) : (term289 _144105 P Q) = (term290 _144105 P Q).
Proof. exact (@lem8148699 _144105 P Q). Qed.
Lemma lem8148701 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (@lem8148700 _144105 (term293 _144105 _144106 P p f a) (term302 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148702 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148703 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term308 _144104 _144105 _144106 P p lt2 s a f g) = (term302 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148702 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148704 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148705 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term309 _144104 _144105 _144106 P p lt2 s a f g) = (term303 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148704 _144105) (@lem8148703 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148706 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148707 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term305 _144104 _144105 _144106 P p lt2 s a f g) = (term304 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148706 _144105 _144106 P p f a) (@lem8148705 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148708 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148709 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term310 _144104 _144105 _144106 P p lt2 s a f g) = (term311 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148708) (@lem8148707 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148710 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term307 _144104 _144105 _144106 P p lt2 s a f g z) = (term300 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term307 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148711 {_144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) : (term272 _144105 _144106 P p f a) = (term272 _144105 _144106 P p f a).
Proof. exact (eq_refl (term272 _144105 _144106 P p f a)). Qed.
Lemma lem8148712 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term312 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148711 _144105 _144106 P p f a) (@lem8148710 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148713 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term314 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148712 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148714 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148715 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term306 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148714 _144105) (@lem8148713 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148716 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : ((term305 _144104 _144105 _144106 P p lt2 s a f g) = (term306 _144104 _144105 _144106 P p lt2 s a f g)) = ((term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g)).
Proof. exact (MK_COMB (@lem8148709 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148715 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148717 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term304 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (EQ_MP (@lem8148716 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148701 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148718 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term277 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (TRANS (@lem8148697 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148717 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148719 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148720 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term280 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148719) (@lem8148718 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148721 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148722 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148720 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148721 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148724 {A : Type'} (P : A -> Prop) (Q : Prop) : (term319 A P Q) = (term320 A P Q).
Proof. exact (EQ_MP (@lem18905 A P Q) (@lem18904 A P Q)). Qed.
Lemma lem8148725 {_144105 : Type'} (P : _144105 -> Prop) (Q : Prop) : (term319 _144105 P Q) = (term320 _144105 P Q).
Proof. exact (@lem8148724 _144105 P Q). Qed.
Lemma lem8148726 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (@lem8148725 _144105 (term315 _144104 _144105 _144106 P p lt2 s a f g) ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148727 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148728 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term324 _144104 _144105 _144106 P p lt2 s a f g) = (term315 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (fun_ext (fun z : _144105 => @lem8148727 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148729 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148730 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term325 _144104 _144105 _144106 P p lt2 s a f g) = (term316 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148729 _144105) (@lem8148728 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148731 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148732 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) : (term326 _144104 _144105 _144106 P p lt2 s a f g) = (term317 _144104 _144105 _144106 P p lt2 s a f g).
Proof. exact (MK_COMB (@lem8148731) (@lem8148730 _144104 _144105 _144106 P p lt2 s a f g)). Qed.
Lemma lem8148733 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148734 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148732 _144104 _144105 _144106 P p lt2 s a f g) (@lem8148733 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148735 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148736 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term424 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term425 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148735) (@lem8148734 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148737 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term323 _144104 _144105 _144106 P p lt2 s a f g z) = (term313 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (eq_refl (term323 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148738 : or = or.
Proof. exact (eq_refl or). Qed.
Lemma lem8148739 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (z : _144105) : (term329 _144104 _144105 _144106 P p lt2 s a f g z) = (term330 _144104 _144105 _144106 P p lt2 s a f g z).
Proof. exact (MK_COMB (@lem8148738) (@lem8148737 _144104 _144105 _144106 P p lt2 s a f g z)). Qed.
Lemma lem8148740 {_144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)) = ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (eq_refl ((term34 _144105 _144106 _144138 _144141 P c e f a) = (term34 _144105 _144106 _144138 _144141 P c e g a))). Qed.
Lemma lem8148741 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term426 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (MK_COMB (@lem8148739 _144104 _144105 _144106 P p lt2 s a f g z) (@lem8148740 _144105 _144106 _144138 _144141 P f c e g a)). Qed.
Lemma lem8148742 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term428 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8148741 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8148743 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148744 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148743 _144105) (@lem8148742 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148745 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : ((term422 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term423 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)) = ((term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)).
Proof. exact (MK_COMB (@lem8148736 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148744 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148746 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term421 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (EQ_MP (@lem8148745 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148726 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148747 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term414 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (TRANS (@lem8148722 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148746 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148748 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term415 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8148747 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148749 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148750 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148749 P) (@lem8148748 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148752 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148753 {_144105 P : Type'} (P' : type1470 _144105 P) : (term340 _144105 P P') = (term341 _144105 P P').
Proof. exact (@lem8148752 P _144105 P'). Qed.
Lemma lem8148754 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (@lem8148753 _144105 P (term435 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148755 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148756 {_144105 : Type'} (z : _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148757 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (z : _144105) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z).
Proof. exact (MK_COMB (@lem8148755 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148756 _144105 z)). Qed.
Lemma lem8148758 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term438 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z)). Qed.
Lemma lem8148759 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term437 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) = (term427 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8148757 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a z) (@lem8148758 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8148760 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term439 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (fun_ext (fun z : _144105 => @lem8148759 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8148761 {_144105 : Type'} : (@ex _144105) = (@ex _144105).
Proof. exact (eq_refl (@ex _144105)). Qed.
Lemma lem8148762 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term440 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term430 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (MK_COMB (@lem8148761 _144105) (@lem8148760 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148763 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term441 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term431 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun a : P => @lem8148762 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148764 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148765 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148764 P) (@lem8148763 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148766 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148767 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term442 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term443 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148766) (@lem8148765 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148768 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) = (term429 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term436 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8148769 {_144105 P : Type'} (z : P -> _144105) (a : P) : (z a) = (z a).
Proof. exact (eq_refl (z a)). Qed.
Lemma lem8148770 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a).
Proof. exact (MK_COMB (@lem8148768 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8148769 _144105 P z a)). Qed.
Lemma lem8148771 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (eq_refl (term445 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a)). Qed.
Lemma lem8148772 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term444 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) = (term446 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a).
Proof. exact (TRANS (@lem8148770 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z a) (@lem8148771 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8148773 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term447 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term448 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (fun_ext (fun a : P => @lem8148772 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g a)). Qed.
Lemma lem8148774 {P : Type'} : (@all P) = (@all P).
Proof. exact (eq_refl (@all P)). Qed.
Lemma lem8148775 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term449 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (MK_COMB (@lem8148774 P) (@lem8148773 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148776 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term451 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8148775 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148777 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8148778 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148777 _144105 P) (@lem8148776 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148779 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : ((term433 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term434 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)) = ((term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)).
Proof. exact (MK_COMB (@lem8148767 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8148778 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148780 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term432 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (EQ_MP (@lem8148779 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8148754 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148781 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term416 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (TRANS (@lem8148750 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8148780 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148782 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term417 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148781 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148783 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148784 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148783 _144105 _144106) (@lem8148782 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148786 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148787 {_144105 _144106 P : Type'} (P' : type537 _144105 _144106 P) : (term365 _144105 _144106 P P') = (term366 _144105 _144106 P P').
Proof. exact (@lem8148786 (_144105 -> _144106) (P -> _144105) P'). Qed.
Lemma lem8148788 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (@lem8148787 _144105 _144106 P (term458 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148789 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148790 {_144105 P : Type'} (z : P -> _144105) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148791 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (z : P -> _144105) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z).
Proof. exact (MK_COMB (@lem8148789 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8148790 _144105 P z)). Qed.
Lemma lem8148792 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term461 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z)). Qed.
Lemma lem8148793 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : P -> _144105) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term460 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) = (term450 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8148791 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g z) (@lem8148792 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148794 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term462 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (fun_ext (fun z : P -> _144105 => @lem8148793 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148795 {_144105 P : Type'} : (@ex (P -> _144105)) = (@ex (P -> _144105)).
Proof. exact (eq_refl (@ex (P -> _144105))). Qed.
Lemma lem8148796 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term463 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term453 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (MK_COMB (@lem8148795 _144105 P) (@lem8148794 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148797 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term464 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term454 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148796 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148798 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148799 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148798 _144105 _144106) (@lem8148797 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148800 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148801 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term465 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term466 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148800) (@lem8148799 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148802 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) = (term452 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g).
Proof. exact (eq_refl (term459 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g)). Qed.
Lemma lem8148803 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (z g) = (z g).
Proof. exact (eq_refl (z g)). Qed.
Lemma lem8148804 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g).
Proof. exact (MK_COMB (@lem8148802 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g) (@lem8148803 _144105 _144106 P z g)). Qed.
Lemma lem8148805 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (eq_refl (term468 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g)). Qed.
Lemma lem8148806 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) : (term467 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) = (term469 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g).
Proof. exact (TRANS (@lem8148804 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z g) (@lem8148805 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148807 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term470 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term471 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (fun_ext (fun g : _144105 -> _144106 => @lem8148806 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e g)). Qed.
Lemma lem8148808 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148809 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term472 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (MK_COMB (@lem8148808 _144105 _144106) (@lem8148807 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148810 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term474 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8148809 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148811 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148812 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148811 _144105 _144106 P) (@lem8148810 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148813 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term456 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term457 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)) = ((term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)).
Proof. exact (MK_COMB (@lem8148801 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8148812 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148814 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term455 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (EQ_MP (@lem8148813 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8148788 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148815 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term418 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (TRANS (@lem8148784 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8148814 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148816 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term419 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148815 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148817 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148818 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8148817 _144105 _144106) (@lem8148816 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148820 {A B : Type'} (P : type1413 A B) : (term338 A B P) = (term339 A B P).
Proof. exact (EQ_MP (@lem18899 A B P) (@lem18898 A B P)). Qed.
Lemma lem8148821 {_144105 _144106 P : Type'} (P' : type495 _144105 _144106 P) : (term390 _144105 _144106 P P') = (term391 _144105 _144106 P P').
Proof. exact (@lem8148820 (_144105 -> _144106) (type557 _144105 _144106 P) P'). Qed.
Lemma lem8148822 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (@lem8148821 _144105 _144106 P (term481 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148823 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8148824 {_144105 _144106 P : Type'} (z : type557 _144105 _144106 P) : z = z.
Proof. exact (eq_refl z). Qed.
Lemma lem8148825 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type557 _144105 _144106 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z).
Proof. exact (MK_COMB (@lem8148823 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8148824 _144105 _144106 P z)). Qed.
Lemma lem8148826 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term484 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z)). Qed.
Lemma lem8148827 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type557 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term483 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f z) = (term473 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8148825 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e z) (@lem8148826 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148828 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term485 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (fun_ext (fun z : type557 _144105 _144106 P => @lem8148827 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148829 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148830 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term486 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term476 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (MK_COMB (@lem8148829 _144105 _144106 P) (@lem8148828 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148831 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term487 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term477 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148830 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e)). Qed.
Lemma lem8148832 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148833 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8148832 _144105 _144106) (@lem8148831 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148834 : (@eq Prop) = (@eq Prop).
Proof. exact (eq_refl (@eq Prop)). Qed.
Lemma lem8148835 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term488 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term489 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8148834) (@lem8148833 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148836 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f) = (term475 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e).
Proof. exact (eq_refl (term482 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e f)). Qed.
Lemma lem8148837 {_144105 _144106 P : Type'} (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (z f) = (z f).
Proof. exact (eq_refl (z f)). Qed.
Lemma lem8148838 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f).
Proof. exact (MK_COMB (@lem8148836 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e) (@lem8148837 _144105 _144106 P z f)). Qed.
Lemma lem8148839 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (eq_refl (term491 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f)). Qed.
Lemma lem8148840 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term490 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) = (term492 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e).
Proof. exact (TRANS (@lem8148838 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z f) (@lem8148839 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148841 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term493 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term494 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (fun_ext (fun f : _144105 -> _144106 => @lem8148840 _144104 _144105 _144106 _144138 _144141 P p lt2 s z f c e)). Qed.
Lemma lem8148842 {_144105 _144106 : Type'} : (@all (_144105 -> _144106)) = (@all (_144105 -> _144106)).
Proof. exact (eq_refl (@all (_144105 -> _144106))). Qed.
Lemma lem8148843 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (z : type518 _144105 _144106 P) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term495 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z) = (term496 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e).
Proof. exact (MK_COMB (@lem8148842 _144105 _144106) (@lem8148841 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8148844 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term497 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (fun_ext (fun z : type518 _144105 _144106 P => @lem8148843 _144104 _144105 _144106 _144138 _144141 P p lt2 s z c e)). Qed.
Lemma lem8148845 {_144105 _144106 P : Type'} : (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)) = (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105)).
Proof. exact (eq_refl (@ex ((_144105 -> _144106) -> (_144105 -> _144106) -> P -> _144105))). Qed.
Lemma lem8148846 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (MK_COMB (@lem8148845 _144105 _144106 P) (@lem8148844 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148847 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : ((term479 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term480 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)) = ((term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)).
Proof. exact (MK_COMB (@lem8148835 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8148846 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148848 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term478 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (EQ_MP (@lem8148847 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8148822 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148850 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term420 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8148818 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8148848 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148851 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (TRANS (@lem8148570 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8148850 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e)). Qed.
Lemma lem8148852 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term499 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8148851 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (@lem8148190 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8148945 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term970 _144138 _107997.
Proof. exact (h1). Qed.
Lemma lem8149147 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term970 _144138 _107997.
Proof. exact (h1). Qed.
Lemma lem8149664 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term970 _144138 _107997.
Proof. exact (h1). Qed.
Lemma lem8149811 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term970 _144138 _107997.
Proof. exact (h1). Qed.
Lemma lem8150166 {_144138 : Type'} (x : _144138) : x = x.
Proof. exact (@lem21386 _144138 x). Qed.
Lemma lem8150167 {_144138 : Type'} (x : _144138) : x = x.
Proof. exact (@lem8150166 _144138 x). Qed.
Lemma lem8150168 {_144138 : Type'} (_107997 : _144138) : _107997 = _107997.
Proof. exact (@lem8150167 _144138 _107997). Qed.
Lemma lem8150169 {_144138 : Type'} (_107997 : _144138) : term1044 _144138 _107997.
Proof. exact (fun h0 : term970 _144138 _107997 => @lem8150168 _144138 _107997). Qed.
Lemma lem8150171 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8150172 {_144138 : Type'} (_107997 : _144138) : (term1044 _144138 _107997) = (_107997 = _107997).
Proof. exact (@lem8150171 (_107997 = _107997)). Qed.
Lemma lem8150173 {_144138 : Type'} (_107997 : _144138) : _107997 = _107997.
Proof. exact (EQ_MP (@lem8150172 _144138 _107997) (@lem8150169 _144138 _107997)). Qed.
Lemma lem8150176 (p : Prop) : (~ p) = (p -> False).
Proof. exact (EQ_MP (@lem21021 p) (@lem0)). Qed.
Lemma lem8150178 {_144138 : Type'} (_107997 : _144138) : (term970 _144138 _107997) = (term1045 _144138 _107997).
Proof. exact (@lem8150176 (_107997 = _107997)). Qed.
Lemma lem8150181 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term1045 _144138 _107997.
Proof. exact (EQ_MP (@lem8150178 _144138 _107997) (@lem8149811 _144138 _107997 h1)). Qed.
Lemma lem8150184 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (@lem8150181 _144138 _107997 h1 (@lem8150173 _144138 _107997)). Qed.
Lemma lem8150185 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : term710.
Proof. exact (fun h0 : ~ False => @lem8150184 _144138 _107997 h1). Qed.
Lemma lem8150187 (p : Prop) : (term606 p) = p.
Proof. exact (EQ_MP (@lem21114 p) (@lem21182 p)). Qed.
Lemma lem8150188 : term710 = False.
Proof. exact (@lem8150187 False). Qed.
Lemma lem8150189 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150188) (@lem8150185 _144138 _107997 h1)). Qed.
Lemma lem8150190 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h2 : term970 _144138 _107997 => @lem8150189 _144138 _107997 h1) (fun h2 : False => @lem8149811 _144138 _107997 h1)). Qed.
Lemma lem8150191 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150190 _144138 _107997 h1) (@lem8149811 _144138 _107997 h1)). Qed.
Lemma lem8150192 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h2 : term970 _144138 _107997 => @lem8150191 _144138 _107997 h1) (fun h2 : False => @lem8149664 _144138 _107997 h1)). Qed.
Lemma lem8150193 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150192 _144138 _107997 h1) (@lem8149664 _144138 _107997 h1)). Qed.
Lemma lem8150194 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h2 : term970 _144138 _107997 => @lem8150193 _144138 _107997 h1) (fun h2 : False => @lem8149664 _144138 _107997 h1)). Qed.
Lemma lem8150195 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150194 _144138 _107997 h1) (@lem8149664 _144138 _107997 h1)). Qed.
Lemma lem8150196 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h2 : term970 _144138 _107997 => @lem8150195 _144138 _107997 h1) (fun h2 : False => @lem8149147 _144138 _107997 h1)). Qed.
Lemma lem8150197 {_144138 : Type'} (_107997 : _144138) (h1 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150196 _144138 _107997 h1) (@lem8149147 _144138 _107997 h1)). Qed.
Lemma lem8150198 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term970 _144138 _107997) : False.
Proof. exact (ex_elim (@lem8148526 _144104 _144105 _144106 _144141 P p lt2 s e h1) (fun z' : type518 _144105 _144106 P => fun h0 : term411 _144104 _144105 _144106 _144141 P p lt2 s e z' => @lem8150197 _144138 _107997 h2)). Qed.
Lemma lem8150199 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term970 _144138 _107997) : False.
Proof. exact (ex_elim (@lem8148852 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2) (fun z : type518 _144105 _144106 P => fun h0 : term498 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e z => @lem8150198 _144104 _144105 _144106 _144138 _144141 P p lt2 s e _107997 h1 h3)). Qed.
Lemma lem8150200 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h4 : term970 _144138 _107997 => @lem8150199 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e _107997 h1 h2 h3) (fun h4 : False => @lem8148945 _144138 _107997 h3)). Qed.
Lemma lem8150201 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150200 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e _107997 h1 h2 h3) (@lem8148945 _144138 _107997 h3)). Qed.
Lemma lem8150202 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term970 _144138 _107997) : (term970 _144138 _107997) = False.
Proof. exact (prop_ext (fun h4 : term970 _144138 _107997 => @lem8150201 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e _107997 h1 h2 h3) (fun h4 : False => @lem8148200 _144138 _107997 h3)). Qed.
Lemma lem8150203 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (_107997 : _144138) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term970 _144138 _107997) : False.
Proof. exact (EQ_MP (@lem8150202 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e _107997 h1 h2 h3) (@lem8148200 _144138 _107997 h3)). Qed.
Lemma lem8150204 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term973 _144138 _107997.
Proof. exact (fun h0 : term970 _144138 _107997 => @lem8150203 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e _107997 h1 h2 h0). Qed.
Lemma lem8150205 {_144104 _144105 _144106 _144138 _144141 P : Type'} (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : _107997 = _107997.
Proof. exact (EQ_MP (@lem8148199 _144138 _107997) (@lem8150204 _144104 _144105 _144106 _144138 _144141 P _107997 p lt2 s c e h1 h2)). Qed.
Lemma lem8150206 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term1001 _144105 _144106 _144138 _144141 P c e g a _107997.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8150205 _144104 _144105 _144106 _144138 _144141 P _107997 p lt2 s c e h1 h2). Qed.
Lemma lem8150207 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term1002 _144105 _144106 _144138 _144141 P f c e g a _107997.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e f a => @lem8150206 _144104 _144105 _144106 _144138 _144141 P g a _107997 p lt2 s c e h1 h2). Qed.
Lemma lem8150208 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term1003 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a _107997.
Proof. exact (fun h0 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8150207 _144104 _144105 _144106 _144138 _144141 P f g a _107997 p lt2 s c e h1 h2). Qed.
Lemma lem8150209 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term1004 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (fun h0 : p g a => @lem8150208 _144104 _144105 _144106 _144138 _144141 P f g a _107997 p lt2 s c e h1 h2). Qed.
Lemma lem8150210 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term1005 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (fun h0 : p f a => @lem8150209 _144104 _144105 _144106 _144138 _144141 P f g a _107997 p lt2 s c e h1 h2). Qed.
Lemma lem8150211 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term1006 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (fun h0 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150210 _144104 _144105 _144106 _144138 _144141 P f g a _107997 p lt2 s c e h1 h0). Qed.
Lemma lem8150212 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (_107997 : _144138) : term1007 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997.
Proof. exact (fun h0 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8150211 _144104 _144105 _144106 _144138 _144141 P f c g a _107997 p lt2 s e h0). Qed.
Lemma lem8150217 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1011 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun _107997 : _144138 => @lem8150212 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a _107997). Qed.
Lemma lem8150222 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1015 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (fun p : type560 _144105 _144106 P => @lem8150217 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a). Qed.
Lemma lem8150227 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1019 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (fun lt2 : type1470 _144104 _144105 => @lem8150222 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a). Qed.
Lemma lem8150232 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1023 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun s : P -> _144104 => @lem8150227 _144104 _144105 _144106 _144138 _144141 P s f c e g a). Qed.
Lemma lem8150237 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1027 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun f : _144105 -> _144106 => @lem8150232 _144104 _144105 _144106 _144138 _144141 P f c e g a). Qed.
Lemma lem8150242 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1031 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8150237 _144104 _144105 _144106 _144138 _144141 P c e g a). Qed.
Lemma lem8150247 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term1035 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (fun e : type564 _144105 _144106 _144141 P => @lem8150242 _144104 _144105 _144106 _144138 _144141 P e g a). Qed.
Lemma lem8150252 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term1039 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (fun g : _144105 -> _144106 => @lem8150247 _144104 _144105 _144106 _144138 _144141 P g a). Qed.
Lemma lem8150257 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term1043 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (fun a : P => @lem8150252 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8150258 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term1042 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (EQ_MP (@lem8148188 _144104 _144105 _144106 _144138 _144141 P) (@lem8150257 _144104 _144105 _144106 _144138 _144141 P)). Qed.
Lemma lem8150259 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term1046 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (@lem8150258 _144104 _144105 _144106 _144138 _144141 P a). Qed.
Lemma lem8150260 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : (term1046 _144104 _144105 _144106 _144138 _144141 P a) = (term1038 _144104 _144105 _144106 _144138 _144141 P a).
Proof. exact (eq_refl (term1046 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8150261 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) : term1038 _144104 _144105 _144106 _144138 _144141 P a.
Proof. exact (EQ_MP (@lem8150260 _144104 _144105 _144106 _144138 _144141 P a) (@lem8150259 _144104 _144105 _144106 _144138 _144141 P a)). Qed.
Lemma lem8150262 {_144104 _144105 _144106 _144138 _144141 P : Type'} (a : P) (g : _144105 -> _144106) : term1047 _144104 _144105 _144106 _144138 _144141 P a g.
Proof. exact (@lem8150261 _144104 _144105 _144106 _144138 _144141 P a g). Qed.
Lemma lem8150263 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : (term1047 _144104 _144105 _144106 _144138 _144141 P a g) = (term1034 _144104 _144105 _144106 _144138 _144141 P g a).
Proof. exact (eq_refl (term1047 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8150264 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) : term1034 _144104 _144105 _144106 _144138 _144141 P g a.
Proof. exact (EQ_MP (@lem8150263 _144104 _144105 _144106 _144138 _144141 P g a) (@lem8150262 _144104 _144105 _144106 _144138 _144141 P a g)). Qed.
Lemma lem8150265 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (a : P) (e : type564 _144105 _144106 _144141 P) : term1048 _144104 _144105 _144106 _144138 _144141 P g a e.
Proof. exact (@lem8150264 _144104 _144105 _144106 _144138 _144141 P g a e). Qed.
Lemma lem8150266 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1048 _144104 _144105 _144106 _144138 _144141 P g a e) = (term1030 _144104 _144105 _144106 _144138 _144141 P e g a).
Proof. exact (eq_refl (term1048 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8150267 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1030 _144104 _144105 _144106 _144138 _144141 P e g a.
Proof. exact (EQ_MP (@lem8150266 _144104 _144105 _144106 _144138 _144141 P e g a) (@lem8150265 _144104 _144105 _144106 _144138 _144141 P g a e)). Qed.
Lemma lem8150268 {_144104 _144105 _144106 _144138 _144141 P : Type'} (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (c : type566 _144105 _144106 _144138 _144141 P) : term1049 _144104 _144105 _144106 _144138 _144141 P e g a c.
Proof. exact (@lem8150267 _144104 _144105 _144106 _144138 _144141 P e g a c). Qed.
Lemma lem8150269 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1049 _144104 _144105 _144106 _144138 _144141 P e g a c) = (term1026 _144104 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (eq_refl (term1049 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8150270 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1026 _144104 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (EQ_MP (@lem8150269 _144104 _144105 _144106 _144138 _144141 P c e g a) (@lem8150268 _144104 _144105 _144106 _144138 _144141 P e g a c)). Qed.
Lemma lem8150271 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (f : _144105 -> _144106) : term1050 _144104 _144105 _144106 _144138 _144141 P c e g a f.
Proof. exact (@lem8150270 _144104 _144105 _144106 _144138 _144141 P c e g a f). Qed.
Lemma lem8150272 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1050 _144104 _144105 _144106 _144138 _144141 P c e g a f) = (term1022 _144104 _144105 _144106 _144138 _144141 P f c e g a).
Proof. exact (eq_refl (term1050 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8150273 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1022 _144104 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (EQ_MP (@lem8150272 _144104 _144105 _144106 _144138 _144141 P f c e g a) (@lem8150271 _144104 _144105 _144106 _144138 _144141 P c e g a f)). Qed.
Lemma lem8150274 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (s : P -> _144104) : term1051 _144104 _144105 _144106 _144138 _144141 P f c e g a s.
Proof. exact (@lem8150273 _144104 _144105 _144106 _144138 _144141 P f c e g a s). Qed.
Lemma lem8150275 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1051 _144104 _144105 _144106 _144138 _144141 P f c e g a s) = (term1018 _144104 _144105 _144106 _144138 _144141 P s f c e g a).
Proof. exact (eq_refl (term1051 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8150276 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1018 _144104 _144105 _144106 _144138 _144141 P s f c e g a.
Proof. exact (EQ_MP (@lem8150275 _144104 _144105 _144106 _144138 _144141 P s f c e g a) (@lem8150274 _144104 _144105 _144106 _144138 _144141 P f c e g a s)). Qed.
Lemma lem8150277 {_144104 _144105 _144106 _144138 _144141 P : Type'} (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (lt2 : type1470 _144104 _144105) : term1052 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2.
Proof. exact (@lem8150276 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2). Qed.
Lemma lem8150278 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1052 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2) = (term1014 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a).
Proof. exact (eq_refl (term1052 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8150279 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term1014 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8150278 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a) (@lem8150277 _144104 _144105 _144106 _144138 _144141 P s f c e g a lt2)). Qed.
Lemma lem8150280 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) : term1053 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p.
Proof. exact (@lem8150279 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p). Qed.
Lemma lem8150281 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : (term1053 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p) = (term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a).
Proof. exact (eq_refl (term1053 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8150282 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term988 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (EQ_MP (@lem8150281 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a) (@lem8150280 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a p)). Qed.
Lemma lem8150284 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (g : _144105 -> _144106) (a : P) : term968 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8147630 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8150282 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a)). Qed.
Lemma lem8150285 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (c : type566 _144105 _144106 _144138 _144141 P) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) : term984 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8150284 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a (@lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8150286 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term982 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8150285 _144104 _144105 _144106 _144138 _144141 P f c g a p lt2 s e h1 (@lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8150287 {_144104 _144105 _144106 _144138 _144141 P : Type'} (g : _144105 -> _144106) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) : term980 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (@lem8150286 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s c e h1 h2 (@lem8136632 _144105 _144106 P p f a h3)). Qed.
Lemma lem8150288 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : p f a) (h4 : p g a) : term978 _144104 _144105 _144106 _144138 _144141 P lt2 s f c e g a.
Proof. exact (@lem8150287 _144104 _144105 _144106 _144138 _144141 P g lt2 s c e p f a h1 h2 h3 (@lem8136634 _144105 _144106 P p g a h4)). Qed.
Lemma lem8150289 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term976 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (@lem8150288 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h2 h3 h4 h5 (@lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8150290 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term974 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (@lem8150289 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h5 h6 (@lem8136670 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8150291 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term965 _144138.
Proof. exact (@lem8150290 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h6 h7 (@lem8136774 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150292 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term966 _144138) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (@lem8150291 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h7 h8 (@lem8147534 _144138 h6)). Qed.
Lemma lem8150293 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term966 _144138) (h7 : p f a) (h8 : p g a) : (term966 _144138) = False.
Proof. exact (prop_ext (fun h9 : term966 _144138 => @lem8150292 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (fun h9 : False => @lem8147534 _144138 h6)). Qed.
Lemma lem8150294 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : term966 _144138) (h7 : p f a) (h8 : p g a) : False.
Proof. exact (EQ_MP (@lem8150293 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7 h8) (@lem8147534 _144138 h6)). Qed.
Lemma lem8150295 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : term965 _144138.
Proof. exact (fun h0 : term966 _144138 => @lem8150294 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h0 h6 h7). Qed.
Lemma lem8150297 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term147 _144138) = (term147 _144138).
Proof. exact (EQ_MP (@lem8147533 _144138) (@lem8150295 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8150298 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term161 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term147 _144138)).
Proof. exact (prop_ext (fun h8 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8150297 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : (term147 _144138) = (term147 _144138) => @lem8136774 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150299 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term147 _144138) = (term147 _144138).
Proof. exact (EQ_MP (@lem8150298 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8136774 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150300 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term185 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8150299 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h0 h5 h6). Qed.
Lemma lem8150301 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8143802 _144105 _144106 _144138 _144141 P c e g a) (@lem8147528 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8150302 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (term146 _144105 _144106 _144138 _144141 P c e g a) = ((term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h8 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8150301 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : (term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a) => @lem8136757 _144105 _144106 _144138 _144141 P c e g a h4)). Qed.
Lemma lem8150303 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e g a) (h5 : term161 _144105 _144106 _144138 _144141 P c e f a) (h6 : p f a) (h7 : p g a) : (term147 _144138) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150302 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8136757 _144105 _144106 _144138 _144141 P c e g a h4)). Qed.
Lemma lem8150304 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term188 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8150303 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h0 h4 h5 h6). Qed.
Lemma lem8150305 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term191 _144105 _144106 _144138 _144141 P c e g a.
Proof. exact (conj (@lem8150304 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8150300 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8150307 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138).
Proof. exact (EQ_MP (@lem8140207 _144105 _144106 _144138 _144141 P c e f a) (@lem8143797 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8150308 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term161 _144105 _144106 _144138 _144141 P c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138)).
Proof. exact (prop_ext (fun h8 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8150307 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138) => @lem8136722 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150309 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term161 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term147 _144138).
Proof. exact (EQ_MP (@lem8150308 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8136722 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150310 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term169 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e g a => @lem8150309 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h0 h5 h6). Qed.
Lemma lem8150311 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136794 _144105 _144106 _144138 _144141 P f c e g a) (@lem8140202 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7)). Qed.
Lemma lem8150312 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term146 _144105 _144106 _144138 _144141 P c e g a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h8 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8150311 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (fun h8 : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a) => @lem8136705 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150313 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : term146 _144105 _144106 _144138 _144141 P c e g a) (h6 : p f a) (h7 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term145 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150312 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6 h7) (@lem8136705 _144105 _144106 _144138 _144141 P c e g a h5)). Qed.
Lemma lem8150314 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term172 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e g a => @lem8150313 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h0 h5 h6). Qed.
Lemma lem8150315 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : term175 _144105 _144106 _144138 _144141 P g c e f a.
Proof. exact (conj (@lem8150314 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8150310 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8150317 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136756 _144105 _144106 _144138 _144141 P c e g a) (@lem8150305 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8150318 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term161 _144105 _144106 _144138 _144141 P c e f a) = ((term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h7 : term161 _144105 _144106 _144138 _144141 P c e f a => @lem8150317 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : (term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8136670 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8150319 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term161 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term147 _144138) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150318 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8136670 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8150320 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term151 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term161 _144105 _144106 _144138 _144141 P c e f a => @lem8150319 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h0 h4 h5). Qed.
Lemma lem8150321 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136704 _144105 _144106 _144138 _144141 P f c e g a) (@lem8150315 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6)). Qed.
Lemma lem8150322 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term146 _144105 _144106 _144138 _144141 P c e f a) = ((term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h7 : term146 _144105 _144106 _144138 _144141 P c e f a => @lem8150321 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (fun h7 : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8136653 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8150323 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : term146 _144105 _144106 _144138 _144141 P c e f a) (h5 : p f a) (h6 : p g a) : (term145 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150322 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5 h6) (@lem8136653 _144105 _144106 _144138 _144141 P c e f a h4)). Qed.
Lemma lem8150324 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term155 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (fun h0 : term146 _144105 _144106 _144138 _144141 P c e f a => @lem8150323 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h0 h4 h5). Qed.
Lemma lem8150325 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : term158 _144105 _144106 _144138 _144141 P f c e g a.
Proof. exact (conj (@lem8150324 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5) (@lem8150320 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8150326 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8136652 _144105 _144106 _144138 _144141 P f c e g a) (@lem8150325 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5)). Qed.
Lemma lem8150327 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term135 _144104 _144105 _144106 P p lt2 s a f g) : term136 _144104 _144105 _144106 P p lt2 s a f g.
Proof. exact (proj2 (@lem8136630 _144104 _144105 _144106 P p lt2 s a f g h1)). Qed.
Lemma lem8150328 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term135 _144104 _144105 _144106 P p lt2 s a f g) : p f a.
Proof. exact (proj1 (@lem8136630 _144104 _144105 _144106 P p lt2 s a f g h1)). Qed.
Lemma lem8150329 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term136 _144104 _144105 _144106 P p lt2 s a f g) : term137 _144104 _144105 _144106 P lt2 s a f g.
Proof. exact (proj2 (@lem8136631 _144104 _144105 _144106 P p lt2 s a f g h1)). Qed.
Lemma lem8150330 {_144104 _144105 _144106 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term136 _144104 _144105 _144106 P p lt2 s a f g) : p g a.
Proof. exact (proj1 (@lem8136631 _144104 _144105 _144106 P p lt2 s a f g h1)). Qed.
Lemma lem8150331 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (term137 _144104 _144105 _144106 P lt2 s a f g) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h6 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8150326 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5) (fun h6 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8150332 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150331 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5) (@lem8136633 _144104 _144105 _144106 P lt2 s a f g h1)). Qed.
Lemma lem8150333 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (p g a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h6 : p g a => @lem8150332 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5) (fun h6 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8136634 _144105 _144106 P p g a h5)). Qed.
Lemma lem8150334 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term137 _144104 _144105 _144106 P lt2 s a f g) (h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h4 : p f a) (h5 : p g a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150333 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h1 h2 h3 h4 h5) (@lem8136634 _144105 _144106 P p g a h5)). Qed.
Lemma lem8150335 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) (h5 : p g a) : (term137 _144104 _144105 _144106 P lt2 s a f g) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h6 : term137 _144104 _144105 _144106 P lt2 s a f g => @lem8150334 _144104 _144105 _144106 _144138 _144141 P lt2 s c e f p g a h6 h1 h2 h4 h5) (fun h6 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8150329 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150336 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (g : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) (h5 : p g a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150335 _144104 _144105 _144106 _144138 _144141 P c e lt2 s f p g a h1 h2 h3 h4 h5) (@lem8150329 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150337 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (p g a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h5 : p g a => @lem8150336 _144104 _144105 _144106 _144138 _144141 P c e lt2 s f p g a h1 h2 h3 h4 h5) (fun h5 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8150330 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150338 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150337 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h3 h4) (@lem8150330 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150339 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (p f a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h5 : p f a => @lem8150338 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h3 h4) (fun h5 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8136632 _144105 _144106 P p f a h4)). Qed.
Lemma lem8150340 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term136 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150339 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h3 h4) (@lem8136632 _144105 _144106 P p f a h4)). Qed.
Lemma lem8150341 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term135 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (term136 _144104 _144105 _144106 P p lt2 s a f g) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h5 : term136 _144104 _144105 _144106 P p lt2 s a f g => @lem8150340 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h5 h4) (fun h5 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8150327 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150342 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (f : _144105 -> _144106) (a : P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term135 _144104 _144105 _144106 P p lt2 s a f g) (h4 : p f a) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150341 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h3 h4) (@lem8150327 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150343 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term135 _144104 _144105 _144106 P p lt2 s a f g) : (p f a) = ((term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a)).
Proof. exact (prop_ext (fun h4 : p f a => @lem8150342 _144104 _144105 _144106 _144138 _144141 P c e lt2 s g p f a h1 h2 h3 h4) (fun h4 : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a) => @lem8150328 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150344 {_144104 _144105 _144106 _144138 _144141 P : Type'} (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (a : P) (f : _144105 -> _144106) (g : _144105 -> _144106) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) (h3 : term135 _144104 _144105 _144106 P p lt2 s a f g) : (term89 _144105 _144106 _144138 _144141 P c e f a) = (term89 _144105 _144106 _144138 _144141 P c e g a).
Proof. exact (EQ_MP (@lem8150343 _144104 _144105 _144106 _144138 _144141 P c e p lt2 s a f g h1 h2 h3) (@lem8150328 _144104 _144105 _144106 P p lt2 s a f g h3)). Qed.
Lemma lem8150345 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (a : P) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term101 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g a.
Proof. exact (fun h0 : term135 _144104 _144105 _144106 P p lt2 s a f g => @lem8150344 _144104 _144105 _144106 _144138 _144141 P c e p lt2 s a f g h1 h2 h0). Qed.
Lemma lem8150350 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (g : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term105 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e g.
Proof. exact (fun a : P => @lem8150345 _144104 _144105 _144106 _144138 _144141 P f g a p lt2 s c e h1 h2). Qed.
Lemma lem8150355 {_144104 _144105 _144106 _144138 _144141 P : Type'} (f : _144105 -> _144106) (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term109 _144104 _144105 _144106 _144138 _144141 P p lt2 s f c e.
Proof. exact (fun g : _144105 -> _144106 => @lem8150350 _144104 _144105 _144106 _144138 _144141 P f g p lt2 s c e h1 h2). Qed.
Lemma lem8150360 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (fun f : _144105 -> _144106 => @lem8150355 _144104 _144105 _144106 _144138 _144141 P f p lt2 s c e h1 h2). Qed.
Lemma lem8150361 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (proj2 (@lem8136627 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8150362 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term15 _144104 _144105 _144106 _144141 P p lt2 s e.
Proof. exact (proj1 (@lem8136627 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8150363 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (prop_ext (fun h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150360 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h2) (fun h3 : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8150364 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8150363 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h2) (@lem8136628 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8150365 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (prop_ext (fun h3 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8150364 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h2) (fun h3 : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8150366 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8150365 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h2) (@lem8136629 _144104 _144105 _144106 _144141 P p lt2 s e h1)). Qed.
Lemma lem8150367 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : (term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (prop_ext (fun h3 : term53 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150366 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h3) (fun h3 : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150361 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8150368 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term15 _144104 _144105 _144106 _144141 P p lt2 s e) (h2 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8150367 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1 h2) (@lem8150361 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2)). Qed.
Lemma lem8150369 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : (term15 _144104 _144105 _144106 _144141 P p lt2 s e) = (term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e).
Proof. exact (prop_ext (fun h2 : term15 _144104 _144105 _144106 _144141 P p lt2 s e => @lem8150368 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h2 h1) (fun h2 : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150362 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8150370 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) (h1 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e) : term112 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (EQ_MP (@lem8150369 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1) (@lem8150362 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h1)). Qed.
Lemma lem8150371 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (c : type566 _144105 _144106 _144138 _144141 P) (e : type564 _144105 _144106 _144141 P) : term114 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e.
Proof. exact (fun h0 : term55 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e => @lem8150370 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e h0). Qed.
Lemma lem8150376 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) (e : type564 _144105 _144106 _144141 P) : term118 _144104 _144105 _144106 _144138 _144141 P p lt2 s e.
Proof. exact (fun c : type566 _144105 _144106 _144138 _144141 P => @lem8150371 _144104 _144105 _144106 _144138 _144141 P p lt2 s c e). Qed.
Lemma lem8150381 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) (s : P -> _144104) : term122 _144104 _144105 _144106 _144138 _144141 P p lt2 s.
Proof. exact (fun e : type564 _144105 _144106 _144141 P => @lem8150376 _144104 _144105 _144106 _144138 _144141 P p lt2 s e). Qed.
Lemma lem8150386 {_144104 _144105 _144106 _144138 _144141 P : Type'} (p : type560 _144105 _144106 P) (lt2 : type1470 _144104 _144105) : term126 _144104 _144105 _144106 _144138 _144141 P p lt2.
Proof. exact (fun s : P -> _144104 => @lem8150381 _144104 _144105 _144106 _144138 _144141 P p lt2 s). Qed.
Lemma lem8150391 {_144104 _144105 _144106 _144138 _144141 P : Type'} (lt2 : type1470 _144104 _144105) : term130 _144104 _144105 _144106 _144138 _144141 P lt2.
Proof. exact (fun p : type560 _144105 _144106 P => @lem8150386 _144104 _144105 _144106 _144138 _144141 P p lt2). Qed.
Lemma lem8150396 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term134 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (fun lt2 : type1470 _144104 _144105 => @lem8150391 _144104 _144105 _144106 _144138 _144141 P lt2). Qed.
Lemma lem8150397 {_144104 _144105 _144106 _144138 _144141 P : Type'} : term133 _144104 _144105 _144106 _144138 _144141 P.
Proof. exact (EQ_MP (@lem8136626 _144104 _144105 _144106 _144138 _144141 P) (@lem8150396 _144104 _144105 _144106 _144138 _144141 P)). Qed.
