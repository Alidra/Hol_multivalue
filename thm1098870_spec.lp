require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1098870 [_25251] : Prf (= (@BUTLAST _25251) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251)))) (λ BUTLAST' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (list _25251) (list _25251))), (∀ (λ _17958 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∧ (= (BUTLAST' _17958 (@NIL _25251)) (@NIL _25251)) (∀ (λ h : El _25251, (∀ (λ t : El (list _25251), (= (BUTLAST' _17958 ((@CONS _25251) h t)) ((@COND (list _25251)) (= t (@NIL _25251)) (@NIL _25251) ((@CONS _25251) h (BUTLAST' _17958 t)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0))))))))))))))));
