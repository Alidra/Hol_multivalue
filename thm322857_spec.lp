require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem322857 [A B] (H : El (fun (fun A B) (fun A B))) (<< : El (fun A (fun A bool))) (R : El (fun A (fun B bool))) (h1 : Prf (∧ (∀ (λ f : El (fun A B), (∀ (λ x : El A, (⇒ (∀ (λ z : El A, (⇒ (<< z x) (R z (f z))))) (R x (H f x))))))) (∧ (∀ (λ R' : El (fun A (fun B bool)), (⇒ (∀ (λ f : El (fun A B), (∀ (λ x : El A, (⇒ (∀ (λ z : El A, (⇒ (<< z x) (R' z (f z))))) (R' x (H f x))))))) (∀ (λ a0 : El A, (∀ (λ a1 : El B, (⇒ (R a0 a1) (R' a0 a1))))))))) (∀ (λ a0 : El A, (∀ (λ a1 : El B, (= (R a0 a1) (∃ (λ f : El (fun A B), (∧ (= a1 (H f a0)) (∀ (λ z : El A, (⇒ (<< z a0) (R z (f z)))))))))))))))) : Prf (∧ (∀ (λ f : El (fun A B), (∀ (λ x : El A, (⇒ (∀ (λ z : El A, (⇒ (<< z x) (R z (f z))))) (R x (H f x))))))) (∧ (∀ (λ R' : El (fun A (fun B bool)), (⇒ (∀ (λ f : El (fun A B), (∀ (λ x : El A, (⇒ (∀ (λ z : El A, (⇒ (<< z x) (R' z (f z))))) (R' x (H f x))))))) (∀ (λ a0 : El A, (∀ (λ a1 : El B, (⇒ (R a0 a1) (R' a0 a1))))))))) (∀ (λ a0 : El A, (∀ (λ a1 : El B, (= (R a0 a1) (∃ (λ f : El (fun A B), (∧ (= a1 (H f a0)) (∀ (λ z : El A, (⇒ (<< z a0) (R z (f z)))))))))))))));
