Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term11 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (~ (x0 = (@EMPTY (a1 -> Prop)))) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))).
Definition term17 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := and ((x0 = (@EMPTY (a1 -> Prop))) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@CROSS a1 a0 x1 (@UNIV a1))).
Definition term19 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := ((x0 = (@EMPTY (a1 -> Prop))) -> (@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@CROSS a1 a0 x1 (@UNIV a1))) /\ ((~ (x0 = (@EMPTY (a1 -> Prop)))) -> (@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1))))).
Definition term15 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (x0 = (@EMPTY (a1 -> Prop))) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@CROSS a1 a0 x1 (@UNIV a1)).
Definition term9 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : type686 a1) := @CROSS a1 a0 x0 (@INTERS a1 x1).
Definition term10 (a0 : Type') (x0 : type686 a0) := imp (~ (x0 = (@EMPTY (a0 -> Prop)))).
Definition term1 (a0 : Type') (a1 : Type') (x0 : type1210 a0 a1) (x1 : Prop) (x2 : type324 a0 a1) (x3 : type1210 a0 a1) := (x1 -> x2 x0) /\ ((~ x1) -> x2 x3).
Definition term21 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := @eq Prop ((fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@COND ((prod a0 a1) -> Prop) (x0 = (@EMPTY (a1 -> Prop))) (@CROSS a1 a0 x1 (@UNIV a1)) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))))).
Definition term7 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := @INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1))).
Definition term4 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : type686 a1) := fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x0 (@INTERS a1 x1)) = y0.
Definition term13 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@CROSS a1 a0 x1 (@UNIV a1)).
Definition term20 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := @COND ((prod a0 a1) -> Prop) (x0 = (@EMPTY (a1 -> Prop))) (@CROSS a1 a0 x1 (@UNIV a1)) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))).
Definition term16 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (x0 = (@EMPTY (a1 -> Prop))) -> (@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@CROSS a1 a0 x1 (@UNIV a1)).
Definition term2 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : type686 a1) (x2 : Prop) (x3 : type1210 a0 a1) (x4 : type1210 a0 a1) := (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x0 (@INTERS a1 x1)) = y0) (@COND ((prod a0 a1) -> Prop) x2 x3 x4).
Definition term3 (a0 : Type') (a1 : Type') (x0 : type1210 a0 a1) (x1 : Prop) (x2 : a0 -> Prop) (x3 : type686 a1) (x4 : type1210 a0 a1) := (x1 -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x2 (@INTERS a1 x3)) = y0) x0) /\ ((~ x1) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x2 (@INTERS a1 x3)) = y0) x4).
Definition term0 (a0 : Type') (a1 : Type') (x0 : type324 a0 a1) (x1 : Prop) (x2 : type1210 a0 a1) (x3 : type1210 a0 a1) := x0 (@COND ((prod a0 a1) -> Prop) x1 x2 x3).
Definition term18 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := and ((x0 = (@EMPTY (a1 -> Prop))) -> (@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@CROSS a1 a0 x1 (@UNIV a1))).
Definition term8 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))).
Definition term5 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@COND ((prod a0 a1) -> Prop) (x0 = (@EMPTY (a1 -> Prop))) (@CROSS a1 a0 x1 (@UNIV a1)) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1))))).
Definition term6 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := ((x0 = (@EMPTY (a1 -> Prop))) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@CROSS a1 a0 x1 (@UNIV a1))) /\ ((~ (x0 = (@EMPTY (a1 -> Prop)))) -> (fun y0 : type1210 a0 a1 => (@CROSS a1 a0 x1 (@INTERS a1 x0)) = y0) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1))))).
Definition term12 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := (~ (x0 = (@EMPTY (a1 -> Prop)))) -> (@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))).
Definition term14 (a0 : Type') (x0 : type686 a0) := imp (x0 = (@EMPTY (a0 -> Prop))).
Definition term22 (a0 : Type') (a1 : Type') (x0 : type686 a1) (x1 : a0 -> Prop) := @eq Prop ((@CROSS a1 a0 x1 (@INTERS a1 x0)) = (@COND ((prod a0 a1) -> Prop) (x0 = (@EMPTY (a1 -> Prop))) (@CROSS a1 a0 x1 (@UNIV a1)) (@INTERS (prod a0 a1) (@GSPEC ((prod a0 a1) -> Prop) (fun y0 : type1210 a0 a1 => exists y1 : a1 -> Prop, @SETSPEC ((prod a0 a1) -> Prop) y0 (@IN (a1 -> Prop) y1 x0) (@CROSS a1 a0 x1 y1)))))).
