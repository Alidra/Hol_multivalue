require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem2801817 : Prf (= int_gcd ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int))) (λ d : El (fun (prod num (prod num (prod num (prod num (prod num (prod num num)))))) (fun (prod int int) int)), (∀ (λ _30833 : El (prod num (prod num (prod num (prod num (prod num (prod num num)))))), (∀ (λ a : El int, (∀ (λ b : El int, (∧ (int_le (int_of_num (NUMERAL _0)) (d _30833 ((@̦‚ int int) a b))) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) a) (∧ (int_divides (d _30833 ((@̦‚ int int) a b)) b) (∃ (λ x : El int, (∃ (λ y : El int, (= (d _30833 ((@̦‚ int int) a b)) (int_add (int_mul a x) (int_mul b y))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0))))))))))))))));
