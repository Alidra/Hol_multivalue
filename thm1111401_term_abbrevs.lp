require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 a0 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (fun (fun num a0) (fun num (list a0))))) (λ y0 : El (type1237 a0), (∀ (λ y1 : El type1667, (∧ (∀ (λ y2 : El (fun num a0), (= (y0 y1 y2 (NUMERAL _0)) (@NIL a0)))) (∀ (λ y2 : El (fun num a0), (∀ (λ y3 : El num, (= (y0 y1 y2 (SUC y3)) ((@APPEND a0) (y0 y1 y2 y3) ((@CONS a0) (y2 y3) (@NIL a0)))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num (prod num num)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 (BIT1 (BIT1 _0)))))))))))))))))));
