require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term10 a0 (x0: El bool) ≔ (∀ (λ y0 : El a0, x0));
symbol term3 (x0: El num) (x1: El num) ≔ ((@= num) (EXP (NUMERAL x0) (NUMERAL x1)));
symbol term1 (x0: El num) ≔ (EXP (NUMERAL x0));
symbol term8 (x0: El num) ≔ (∀ (λ y0 : El num, (= (EXP (NUMERAL x0) (NUMERAL y0)) (NUMERAL (EXP x0 y0)))));
symbol term0 (x0: El num) ≔ ((λ y0 : El num, (= (NUMERAL y0) y0)) x0);
symbol term17 ≔ (∧ T (∧ (= (EXP _0 _0) (BIT1 _0)) (∧ (∀ (λ y0 : El num, (= (EXP (BIT0 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP (BIT1 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT0 y0)) (* (EXP _0 y0) (EXP _0 y0))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT0 y1)) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1))))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT0 y1)) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1))))))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT1 y0)) _0))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT1 y1)) (* (BIT0 y0) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1)))))))) (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT1 y1)) (* (BIT1 y0) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1)))))))))))))))));
symbol term13 ≔ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (NUMERAL y0) (NUMERAL y1)) (NUMERAL (EXP y0 y1)))))));
symbol term16 ≔ (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (NUMERAL y0) (NUMERAL y1)) (NUMERAL (EXP y0 y1))))))) (∧ (= (EXP _0 _0) (BIT1 _0)) (∧ (∀ (λ y0 : El num, (= (EXP (BIT0 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP (BIT1 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT0 y0)) (* (EXP _0 y0) (EXP _0 y0))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT0 y1)) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1))))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT0 y1)) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1))))))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT1 y0)) _0))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT1 y1)) (* (BIT0 y0) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1)))))))) (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT1 y1)) (* (BIT1 y0) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1)))))))))))))))));
symbol term9 ≔ (∀ (λ y0 : El num, T));
symbol term15 ≔ (∧ (= (EXP _0 _0) (BIT1 _0)) (∧ (∀ (λ y0 : El num, (= (EXP (BIT0 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP (BIT1 y0) _0) (BIT1 _0)))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT0 y0)) (* (EXP _0 y0) (EXP _0 y0))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT0 y1)) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1))))))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT0 y1)) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1))))))) (∧ (∀ (λ y0 : El num, (= (EXP _0 (BIT1 y0)) _0))) (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT0 y0) (BIT1 y1)) (* (BIT0 y0) (* (EXP (BIT0 y0) y1) (EXP (BIT0 y0) y1)))))))) (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (BIT1 y0) (BIT1 y1)) (* (BIT1 y0) (* (EXP (BIT1 y0) y1) (EXP (BIT1 y0) y1))))))))))))))));
symbol term7 ≔ (λ y0 : El num, T);
symbol term4 (x0: El num) (x1: El num) ≔ ((@= num) (EXP x0 x1));
symbol term14 ≔ (∧ (∀ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (NUMERAL y0) (NUMERAL y1)) (NUMERAL (EXP y0 y1))))))));
symbol term6 (x0: El num) ≔ (λ y0 : El num, (= (EXP (NUMERAL x0) (NUMERAL y0)) (NUMERAL (EXP x0 y0))));
symbol term5 (x0: El num) (x1: El num) ≔ (NUMERAL (EXP x0 x1));
symbol term11 (x0: El bool) ≔ (∀ (λ y0 : El num, x0));
symbol term2 (x0: El num) (x1: El num) ≔ (EXP (NUMERAL x0) (NUMERAL x1));
symbol term12 ≔ (λ y0 : El num, (∀ (λ y1 : El num, (= (EXP (NUMERAL y0) (NUMERAL y1)) (NUMERAL (EXP y0 y1))))));
