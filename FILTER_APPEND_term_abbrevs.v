Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term68 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) := @List.app a0 (@FILTER a0 x0 (@cons a0 x1 x2)).
Definition term44 (a0 : Type') := forall y0 : a0, forall y1 : list a0, forall y2 : list a0, (@List.app a0 (@cons a0 y0 y1) y2) = (@cons a0 y0 (@List.app a0 y1 y2)).
Definition term92 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := ((x2 x0) -> (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) /\ ((~ (x2 x0)) -> (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))).
Definition term108 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq Prop ((@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))).
Definition term24 (a0 : Type') (x0 : a0 -> Prop) := (forall y0 : list a0, (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0))) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) -> forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 (@cons a0 y0 y1) y2)) = (@List.app a0 (@FILTER a0 x0 (@cons a0 y0 y1)) (@FILTER a0 x0 y2))).
Definition term100 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq Prop ((@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))).
Definition term113 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @List.app a0 (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3).
Definition term38 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @List.app a0 (@nil a0) (@FILTER a0 x0 x1).
Definition term50 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := @List.app a0 (@cons a0 x0 x1) x2.
Definition term79 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3)).
Definition term82 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)).
Definition term104 (a0 : Type') (x0 : list a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : a0) := (fun y0 : Prop => (@List.app a0 (@FILTER a0 x2 x0) (@FILTER a0 x2 x1)) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x3 (@FILTER a0 x2 x0)) (@FILTER a0 x2 x0)) (@FILTER a0 x2 x1))) (x2 x3).
Definition term52 (a0 : Type') (x0 : list a0) (x1 : a0 -> Prop) (x2 : list a0) := (fun y0 : list a0 => (@FILTER a0 x1 (@List.app a0 x0 y0)) = (@List.app a0 (@FILTER a0 x1 x0) (@FILTER a0 x1 y0))) x2.
Definition term48 (a0 : Type') (x0 : a0) (x1 : list a0) := forall y0 : list a0, (@List.app a0 (@cons a0 x0 x1) y0) = (@cons a0 x0 (@List.app a0 x1 y0)).
Definition term25 (a0 : Type') (x0 : a0 -> Prop) := imp (((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) y1) -> (fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) (@cons a0 y0 y1))).
Definition term42 (a0 : Type') (x0 : Prop) := forall y0 : a0, x0.
Definition term39 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : list a0 => (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0)).
Definition term101 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := ~ (x0 x1).
Definition term91 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := and ((x2 x0) -> (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))).
Definition term37 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 x1).
Definition term119 (a0 : Type') := forall y0 : a0 -> Prop, forall y1 : list a0, forall y2 : list a0, (@FILTER a0 y0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 y0 y1) (@FILTER a0 y0 y2)).
Definition term90 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := and ((x2 x0) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)))).
Definition term3 (a0 : Type') (x0 : a0 -> Prop) := (fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@nil a0).
Definition term5 (a0 : Type') (x0 : a0 -> Prop) := and ((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@nil a0)).
Definition term60 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) (x3 : list a0) := @cons a0 x0 (@FILTER a0 x1 (@List.app a0 x2 x3)).
Definition term1 (a0 : Type') (x0 : a0 -> Prop) := (((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) y1) -> (fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) (@cons a0 y0 y1))) -> forall y0 : list a0, (fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) y0.
Definition term35 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @eq (list a0) (@FILTER a0 x0 x1).
Definition term18 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := forall y0 : list a0, (forall y1 : list a0, (@FILTER a0 x1 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x1 y0) (@FILTER a0 x1 y1))) -> forall y1 : list a0, (@FILTER a0 x1 (@List.app a0 (@cons a0 x0 y0) y1)) = (@List.app a0 (@FILTER a0 x1 (@cons a0 x0 y0)) (@FILTER a0 x1 y1)).
Definition term0 (a0 : Type') (x0 : type1143 a0) := ((x0 (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, (x0 y1) -> x0 (@cons a0 y0 y1))) -> forall y0 : list a0, x0 y0.
Definition term118 (a0 : Type') (x0 : list a0) (x1 : a0 -> Prop) (x2 : list a0) := @eq (list a0) (@List.app a0 (@FILTER a0 x1 x0) (@FILTER a0 x1 x2)).
Definition term46 (a0 : Type') (x0 : a0) := forall y0 : list a0, forall y1 : list a0, (@List.app a0 (@cons a0 x0 y0) y1) = (@cons a0 x0 (@List.app a0 y0 y1)).
Definition term29 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : list a0, forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1)).
Definition term67 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq (list a0) (@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term64 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term77 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) (x4 : Prop) (x5 : list a0) (x6 : list a0) := (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@COND (list a0) x4 x5 x6).
Definition term19 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : a0 => forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) y1) -> (fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) (@cons a0 y0 y1).
Definition term106 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @List.app a0 (@COND (list a0) False (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3).
Definition term98 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @List.app a0 (@COND (list a0) True (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3).
Definition term45 (a0 : Type') (x0 : a0) := (fun y0 : a0 => forall y1 : list a0, forall y2 : list a0, (@List.app a0 (@cons a0 y0 y1) y2) = (@cons a0 y0 (@List.app a0 y1 y2))) x0.
Definition term54 (a0 : Type') (x0 : list a0) (x1 : a0 -> Prop) (x2 : list a0) := @List.app a0 (@FILTER a0 x1 x0) (@FILTER a0 x1 x2).
Definition term70 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @List.app a0 (@FILTER a0 x2 (@cons a0 x0 x1)) (@FILTER a0 x2 x3).
Definition term41 (a0 : Type') := forall y0 : list a0, True.
Definition term76 (a0 : Type') (x0 : list a0) (x1 : Prop) (x2 : type1143 a0) (x3 : list a0) := (x1 -> x2 x0) /\ ((~ x1) -> x2 x3).
Definition term36 (a0 : Type') (x0 : a0 -> Prop) := @List.app a0 (@FILTER a0 x0 (@nil a0)).
Definition term16 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := fun y0 : list a0 => (forall y1 : list a0, (@FILTER a0 x1 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x1 y0) (@FILTER a0 x1 y1))) -> forall y1 : list a0, (@FILTER a0 x1 (@List.app a0 (@cons a0 x0 y0) y1)) = (@List.app a0 (@FILTER a0 x1 (@cons a0 x0 y0)) (@FILTER a0 x1 y1)).
Definition term28 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : list a0, (fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) y0.
Definition term59 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) (x3 : list a0) := @COND (list a0) (x1 x0) (@cons a0 x0 (@FILTER a0 x1 (@List.app a0 x2 x3))) (@FILTER a0 x1 (@List.app a0 x2 x3)).
Definition term89 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (x2 x0) -> (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3)).
Definition term78 (a0 : Type') (x0 : list a0) (x1 : Prop) (x2 : a0) (x3 : list a0) (x4 : a0 -> Prop) (x5 : list a0) (x6 : list a0) := (x1 -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x4 x2) (@cons a0 x2 (@FILTER a0 x4 x3)) (@FILTER a0 x4 x3)) (@FILTER a0 x4 x5))) x0) /\ ((~ x1) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x4 x2) (@cons a0 x2 (@FILTER a0 x4 x3)) (@FILTER a0 x4 x3)) (@FILTER a0 x4 x5))) x6).
Definition term32 (a0 : Type') (x0 : list a0) := (fun y0 : list a0 => (@List.app a0 (@nil a0) y0) = y0) x0.
Definition term81 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := ((x2 x0) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)))) /\ ((~ (x2 x0)) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term30 (a0 : Type') (x0 : a0 -> Prop) := ((forall y0 : list a0, (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0))) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) -> forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 (@cons a0 y0 y1) y2)) = (@List.app a0 (@FILTER a0 x0 (@cons a0 y0 y1)) (@FILTER a0 x0 y2)))) -> forall y0 : list a0, forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1)).
Definition term9 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := imp ((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) x1).
Definition term26 (a0 : Type') (x0 : a0 -> Prop) := imp ((forall y0 : list a0, (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0))) /\ (forall y0 : a0, forall y1 : list a0, (forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) -> forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 (@cons a0 y0 y1) y2)) = (@List.app a0 (@FILTER a0 x0 (@cons a0 y0 y1)) (@FILTER a0 x0 y2)))).
Definition term111 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @List.app a0 (@COND (list a0) True (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2)).
Definition term33 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @FILTER a0 x0 (@List.app a0 (@nil a0) x1).
Definition term17 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := forall y0 : list a0, ((fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) y0) -> (fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) (@cons a0 x1 y0).
Definition term27 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : list a0 => (fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) y0.
Definition term62 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := @COND (list a0) (x0 x1).
Definition term31 (a0 : Type') := forall y0 : list a0, (@List.app a0 (@nil a0) y0) = y0.
Definition term11 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) := (fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@cons a0 x1 x2).
Definition term34 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @eq (list a0) (@FILTER a0 x0 (@List.app a0 (@nil a0) x1)).
Definition term103 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := fun y0 : Prop => (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3)).
Definition term97 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (fun y0 : Prop => (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) True.
Definition term2 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1)).
Definition term10 (a0 : Type') (x0 : list a0) (x1 : a0 -> Prop) := imp (forall y0 : list a0, (@FILTER a0 x1 (@List.app a0 x0 y0)) = (@List.app a0 (@FILTER a0 x1 x0) (@FILTER a0 x1 y0))).
Definition term102 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := (~ (x0 x1)) -> (x0 x1) = False.
Definition term94 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq Prop ((@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))).
Definition term93 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq Prop ((fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)))).
Definition term85 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (~ (x2 x0)) -> (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3)).
Definition term20 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : a0 => forall y1 : list a0, (forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) -> forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 (@cons a0 y0 y1) y2)) = (@List.app a0 (@FILTER a0 x0 (@cons a0 y0 y1)) (@FILTER a0 x0 y2)).
Definition term96 (a0 : Type') (x0 : list a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : a0) := (fun y0 : Prop => (@cons a0 x3 (@List.app a0 (@FILTER a0 x2 x0) (@FILTER a0 x2 x1))) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x3 (@FILTER a0 x2 x0)) (@FILTER a0 x2 x0)) (@FILTER a0 x2 x1))) (x2 x3).
Definition term51 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := @cons a0 x0 (@List.app a0 x1 x2).
Definition term86 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term95 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := fun y0 : Prop => (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3)).
Definition term57 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) := @FILTER a0 x0 (@cons a0 x1 x2).
Definition term84 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (~ (x2 x0)) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)).
Definition term75 (a0 : Type') (x0 : type1143 a0) (x1 : Prop) (x2 : list a0) (x3 : list a0) := x0 (@COND (list a0) x1 x2 x3).
Definition term47 (a0 : Type') (x0 : a0) (x1 : list a0) := (fun y0 : list a0 => forall y1 : list a0, (@List.app a0 (@cons a0 x0 y0) y1) = (@cons a0 x0 (@List.app a0 y0 y1))) x1.
Definition term7 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := (fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) x1.
Definition term23 (a0 : Type') (x0 : a0 -> Prop) := ((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@nil a0)) /\ (forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) y1) -> (fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) (@cons a0 y0 y1)).
Definition term116 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @List.app a0 (@COND (list a0) False (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2)).
Definition term63 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) (x3 : list a0) := @COND (list a0) (x1 x0) (@cons a0 x0 (@FILTER a0 x1 (@List.app a0 x2 x3))).
Definition term114 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @eq (list a0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term58 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @COND (list a0) (x1 x0) (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2).
Definition term87 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := imp (x0 x1).
Definition term73 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) := fun y0 : list a0 => (@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 y0))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 y0))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 y0)).
Definition term71 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3).
Definition term74 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) := forall y0 : list a0, (@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 y0))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 y0))) = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 y0)).
Definition term12 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) := forall y0 : list a0, (@FILTER a0 x2 (@List.app a0 (@cons a0 x0 x1) y0)) = (@List.app a0 (@FILTER a0 x2 (@cons a0 x0 x1)) (@FILTER a0 x2 y0)).
Definition term8 (a0 : Type') (x0 : list a0) (x1 : a0 -> Prop) := forall y0 : list a0, (@FILTER a0 x1 (@List.app a0 x0 y0)) = (@List.app a0 (@FILTER a0 x1 x0) (@FILTER a0 x1 y0)).
Definition term4 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : list a0, (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0)).
Definition term13 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) := ((fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) x2) -> (fun y0 : list a0 => forall y1 : list a0, (@FILTER a0 x0 (@List.app a0 y0 y1)) = (@List.app a0 (@FILTER a0 x0 y0) (@FILTER a0 x0 y1))) (@cons a0 x1 x2).
Definition term110 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @cons a0 x0 (@FILTER a0 x1 x2).
Definition term83 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := imp (~ (x0 x1)).
Definition term88 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (x2 x0) -> (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term107 (a0 : Type') (x0 : list a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : a0) := @eq Prop ((fun y0 : Prop => (@List.app a0 (@FILTER a0 x2 x0) (@FILTER a0 x2 x1)) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x3 (@FILTER a0 x2 x0)) (@FILTER a0 x2 x0)) (@FILTER a0 x2 x1))) (x2 x3)).
Definition term99 (a0 : Type') (x0 : list a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : a0) := @eq Prop ((fun y0 : Prop => (@cons a0 x3 (@List.app a0 (@FILTER a0 x2 x0) (@FILTER a0 x2 x1))) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x3 (@FILTER a0 x2 x0)) (@FILTER a0 x2 x0)) (@FILTER a0 x2 x1))) (x2 x3)).
Definition term109 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @COND (list a0) True (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2).
Definition term56 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) (x3 : list a0) := @FILTER a0 x0 (@cons a0 x1 (@List.app a0 x2 x3)).
Definition term53 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) (x2 : list a0) := @FILTER a0 x0 (@List.app a0 x1 x2).
Definition term105 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (fun y0 : Prop => (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)) = (@List.app a0 (@COND (list a0) y0 (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) False.
Definition term80 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := (fun y0 : list a0 => y0 = (@List.app a0 (@COND (list a0) (x2 x0) (@cons a0 x0 (@FILTER a0 x2 x1)) (@FILTER a0 x2 x1)) (@FILTER a0 x2 x3))) (@COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))).
Definition term66 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) (x3 : list a0) := @eq (list a0) (@FILTER a0 x0 (@List.app a0 (@cons a0 x1 x2) x3)).
Definition term72 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) := fun y0 : list a0 => (@FILTER a0 x2 (@List.app a0 (@cons a0 x0 x1) y0)) = (@List.app a0 (@FILTER a0 x2 (@cons a0 x0 x1)) (@FILTER a0 x2 y0)).
Definition term40 (a0 : Type') := fun y0 : list a0 => True.
Definition term65 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @COND (list a0) (x2 x0) (@cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3))) (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)).
Definition term117 (a0 : Type') (x0 : a0 -> Prop) (x1 : list a0) := @List.app a0 (@FILTER a0 x0 x1).
Definition term43 (a0 : Type') (x0 : Prop) := forall y0 : list a0, x0.
Definition term49 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : list a0) := (fun y0 : list a0 => (@List.app a0 (@cons a0 x0 x1) y0) = (@cons a0 x0 (@List.app a0 x1 y0))) x2.
Definition term115 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @COND (list a0) False (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2).
Definition term22 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0, forall y1 : list a0, (forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) -> forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 (@cons a0 y0 y1) y2)) = (@List.app a0 (@FILTER a0 x0 (@cons a0 y0 y1)) (@FILTER a0 x0 y2)).
Definition term21 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0, forall y1 : list a0, ((fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) y1) -> (fun y2 : list a0 => forall y3 : list a0, (@FILTER a0 x0 (@List.app a0 y2 y3)) = (@List.app a0 (@FILTER a0 x0 y2) (@FILTER a0 x0 y3))) (@cons a0 y0 y1).
Definition term55 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) (x2 : list a0) (x3 : list a0) := @FILTER a0 x0 (@List.app a0 (@cons a0 x1 x2) x3).
Definition term112 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @List.app a0 (@cons a0 x0 (@FILTER a0 x1 x2)).
Definition term6 (a0 : Type') (x0 : a0 -> Prop) := and (forall y0 : list a0, (@FILTER a0 x0 (@List.app a0 (@nil a0) y0)) = (@List.app a0 (@FILTER a0 x0 (@nil a0)) (@FILTER a0 x0 y0))).
Definition term69 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : list a0) := @List.app a0 (@COND (list a0) (x1 x0) (@cons a0 x0 (@FILTER a0 x1 x2)) (@FILTER a0 x1 x2)).
Definition term14 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) := (forall y0 : list a0, (@FILTER a0 x2 (@List.app a0 x1 y0)) = (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 y0))) -> forall y0 : list a0, (@FILTER a0 x2 (@List.app a0 (@cons a0 x0 x1) y0)) = (@List.app a0 (@FILTER a0 x2 (@cons a0 x0 x1)) (@FILTER a0 x2 y0)).
Definition term61 (a0 : Type') (x0 : a0) (x1 : list a0) (x2 : a0 -> Prop) (x3 : list a0) := @cons a0 x0 (@List.app a0 (@FILTER a0 x2 x1) (@FILTER a0 x2 x3)).
Definition term15 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0) := fun y0 : list a0 => ((fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) y0) -> (fun y1 : list a0 => forall y2 : list a0, (@FILTER a0 x0 (@List.app a0 y1 y2)) = (@List.app a0 (@FILTER a0 x0 y1) (@FILTER a0 x0 y2))) (@cons a0 x1 y0).
