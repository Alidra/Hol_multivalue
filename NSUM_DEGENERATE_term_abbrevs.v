Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term44 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) (x3 : nat) (x4 : nat) := (fun y0 : nat => ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = x2) -> (x2 -> (@ITSET nat a0 (fun y1 : a0 => fun y2 : nat => Nat.add (x0 y1) y2) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = x3) -> ((~ x2) -> (@neutral nat Nat.add) = y0) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y1 : a0 => fun y2 : nat => Nat.add (x0 y1) y2) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat x2 x3 y0)) x4.
Definition term72 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : nat) := (False -> (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@support a0 nat Nat.add x1 x0) (@neutral nat Nat.add)) = (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0))) -> ((~ False) -> (@neutral nat Nat.add) = x2) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x1 x0)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@support a0 nat Nat.add x1 x0) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat False (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0)) x2).
Definition term29 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)).
Definition term80 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> True.
Definition term28 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1))) = False.
Definition term74 := (~ False) -> (@neutral nat Nat.add) = (NUMERAL 0).
Definition term77 := @eq nat (NUMERAL 0).
Definition term43 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) (x3 : nat) := forall y0 : nat, ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = x2) -> (x2 -> (@ITSET nat a0 (fun y1 : a0 => fun y2 : nat => Nat.add (x0 y1) y2) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = x3) -> ((~ x2) -> (@neutral nat Nat.add) = y0) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y1 : a0 => fun y2 : nat => Nat.add (x0 y1) y2) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat x2 x3 y0).
Definition term66 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : nat) (x3 : nat) := (False -> (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = x2) -> ((~ False) -> (@neutral nat Nat.add) = x3) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat False x2 x3).
Definition term2 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a0 -> a1) := (fun y0 : a0 -> a1 => forall y1 : type1400 a1, (@support a0 a1 y1 y0 x0) = (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((y0 y3) = (@neutral a1 y1)))) y3))) x1.
Definition term31 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) := @COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add).
Definition term40 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) := (fun y0 : Prop => forall y1 : nat, forall y2 : nat, ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = y0) -> (y0 -> (@ITSET nat a0 (fun y3 : a0 => fun y4 : nat => Nat.add (x0 y3) y4) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = y1) -> ((~ y0) -> (@neutral nat Nat.add) = y2) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y3 : a0 => fun y4 : nat => Nat.add (x0 y3) y4) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat y0 y1 y2)) x2.
Definition term59 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) := fun y0 : a0 => @SETSPEC a0 x0 ((@IN a0 y0 x1) /\ (~ ((x2 y0) = (NUMERAL 0)))) y0.
Definition term58 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) := fun y0 : a0 => @SETSPEC a0 x0 ((@IN a0 y0 x1) /\ (~ ((x2 y0) = (@neutral nat Nat.add)))) y0.
Definition term0 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := (fun y0 : a0 -> Prop => forall y1 : a0 -> a1, forall y2 : type1400 a1, (@support a0 a1 y2 y1 y0) = (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 y0) /\ (~ ((y1 y4) = (@neutral a1 y2)))) y4))) x0.
Definition term11 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) (x1 : a1 -> Prop) (x2 : type1400 a0) := @COND a0 (@FINITE a1 (@support a1 a0 x2 x0 x1)) (@ITSET a0 a1 (fun y0 : a1 => fun y1 : a0 => x2 (x0 y0) y1) (@support a1 a0 x2 x0 x1) (@neutral a0 x2)) (@neutral a0 x2).
Definition term33 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) (x4 : a0) := forall y0 : a0, (x0 = x3) -> (x3 -> x1 = x4) -> ((~ x3) -> x2 = y0) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 x4 y0).
Definition term57 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0) := @SETSPEC a0 x0 ((@IN a0 x3 x1) /\ (~ ((x2 x3) = (NUMERAL 0)))) x3.
Definition term56 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0) := @SETSPEC a0 x0 ((@IN a0 x3 x1) /\ (~ ((x2 x3) = (@neutral nat Nat.add)))) x3.
Definition term48 (a0 : Type') (x0 : a0 -> nat) (x1 : a0) := @eq nat (x0 x1).
Definition term78 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = True.
Definition term38 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) := @FINITE a0 (@support a0 nat Nat.add x0 x1).
Definition term4 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a0 -> a1) (x2 : type1400 a1) := (fun y0 : type1400 a1 => (@support a0 a1 y0 x1 x0) = (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (@neutral a1 y0)))) y2))) x2.
Definition term17 (x0 : Prop) (x1 : Prop) (x2 : Prop) (x3 : Prop) := (x0 = x2) -> (x2 -> x1 = x3) -> (x0 -> x1) = (x2 -> x3).
Definition term52 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : a0) := (@IN a0 x2 x0) /\ (~ ((x1 x2) = (@neutral nat Nat.add))).
Definition term51 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) := and (@IN a0 x0 x1).
Definition term49 (a0 : Type') (x0 : a0 -> nat) (x1 : a0) := ~ ((x0 x1) = (@neutral nat Nat.add)).
Definition term71 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := False -> (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@support a0 nat Nat.add x1 x0) (@neutral nat Nat.add)) = (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0)).
Definition term75 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := ((~ False) -> (@neutral nat Nat.add) = (NUMERAL 0)) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x1 x0)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@support a0 nat Nat.add x1 x0) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat False (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0)) (NUMERAL 0)).
Definition term42 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) (x3 : nat) := (fun y0 : nat => forall y1 : nat, ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = x2) -> (x2 -> (@ITSET nat a0 (fun y2 : a0 => fun y3 : nat => Nat.add (x0 y2) y3) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = y0) -> ((~ x2) -> (@neutral nat Nat.add) = y1) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y2 : a0 => fun y3 : nat => Nat.add (x0 y2) y3) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat x2 y0 y1)) x3.
Definition term64 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1).
Definition term47 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (@neutral nat Nat.add)))) y1).
Definition term46 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : type1606) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (@neutral nat x2)))) y1).
Definition term5 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a0 -> a1) (x2 : type1400 a1) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (@neutral a1 x2)))) y1).
Definition term9 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) (x1 : a1 -> Prop) := forall y0 : type1400 a0, (@iterate a0 a1 y0 x1 x0) = (@COND a0 (@FINITE a1 (@support a1 a0 y0 x0 x1)) (@ITSET a0 a1 (fun y1 : a1 => fun y2 : a0 => y0 (x0 y1) y2) (@support a1 a0 y0 x0 x1) (@neutral a0 y0)) (@neutral a0 y0)).
Definition term41 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) := forall y0 : nat, forall y1 : nat, ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = x2) -> (x2 -> (@ITSET nat a0 (fun y2 : a0 => fun y3 : nat => Nat.add (x0 y2) y3) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = y0) -> ((~ x2) -> (@neutral nat Nat.add) = y1) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y2 : a0 => fun y3 : nat => Nat.add (x0 y2) y3) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat x2 y0 y1).
Definition term55 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0) := @SETSPEC a0 x0 ((@IN a0 x3 x1) /\ (~ ((x2 x3) = (NUMERAL 0)))).
Definition term54 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0) := @SETSPEC a0 x0 ((@IN a0 x3 x1) /\ (~ ((x2 x3) = (@neutral nat Nat.add)))).
Definition term76 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @COND nat False (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0)) (NUMERAL 0).
Definition term24 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) (x3 : Prop) := (fun y0 : Prop => ((~ (@FINITE a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (NUMERAL 0)))) y2)))) = x2) -> (x2 -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = y0) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (NUMERAL 0)))) y2)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = (x2 -> y0)) x3.
Definition term61 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) := exists y0 : a0, @SETSPEC a0 x0 ((@IN a0 y0 x1) /\ (~ ((x2 y0) = (NUMERAL 0)))) y0.
Definition term60 (a0 : Type') (x0 : a0) (x1 : a0 -> Prop) (x2 : a0 -> nat) := exists y0 : a0, @SETSPEC a0 x0 ((@IN a0 y0 x1) /\ (~ ((x2 y0) = (@neutral nat Nat.add)))) y0.
Definition term15 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@nsum a0 x0 x1) = (NUMERAL 0).
Definition term45 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : Prop) (x3 : nat) (x4 : nat) := ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = x2) -> (x2 -> (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = x3) -> ((~ x2) -> (@neutral nat Nat.add) = x4) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat x2 x3 x4).
Definition term68 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) := @ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1).
Definition term10 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) (x1 : a1 -> Prop) (x2 : type1400 a0) := (fun y0 : type1400 a0 => (@iterate a0 a1 y0 x1 x0) = (@COND a0 (@FINITE a1 (@support a1 a0 y0 x0 x1)) (@ITSET a0 a1 (fun y1 : a1 => fun y2 : a0 => y0 (x0 y1) y2) (@support a1 a0 y0 x0 x1) (@neutral a0 y0)) (@neutral a0 y0))) x2.
Definition term67 (a0 : Type') (x0 : a0 -> nat) := @ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1).
Definition term23 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) := forall y0 : Prop, ((~ (@FINITE a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (NUMERAL 0)))) y2)))) = x2) -> (x2 -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = y0) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (NUMERAL 0)))) y2)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = (x2 -> y0).
Definition term18 (x0 : Prop) (x1 : Prop) (x2 : Prop) := forall y0 : Prop, (x0 = x2) -> (x2 -> x1 = y0) -> (x0 -> x1) = (x2 -> y0).
Definition term25 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) (x3 : Prop) := ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) = x2) -> (x2 -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = x3) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = (x2 -> x3).
Definition term63 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1.
Definition term62 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (@neutral nat Nat.add)))) y1.
Definition term37 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) := forall y0 : Prop, forall y1 : nat, forall y2 : nat, ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = y0) -> (y0 -> (@ITSET nat a0 (fun y3 : a0 => fun y4 : nat => Nat.add (x0 y3) y4) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = y1) -> ((~ y0) -> (@neutral nat Nat.add) = y2) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y3 : a0 => fun y4 : nat => Nat.add (x0 y3) y4) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat y0 y1 y2).
Definition term36 (x0 : Prop) (x1 : nat) (x2 : nat) := forall y0 : Prop, forall y1 : nat, forall y2 : nat, (x0 = y0) -> (y0 -> x1 = y1) -> ((~ y0) -> x2 = y2) -> (@COND nat x0 x1 x2) = (@COND nat y0 y1 y2).
Definition term35 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) := forall y0 : Prop, forall y1 : a0, forall y2 : a0, (x0 = y0) -> (y0 -> x1 = y1) -> ((~ y0) -> x2 = y2) -> (@COND a0 x0 x1 x2) = (@COND a0 y0 y1 y2).
Definition term20 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := forall y0 : Prop, forall y1 : Prop, ((~ (@FINITE a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((x1 y3) = (NUMERAL 0)))) y3)))) = y0) -> (y0 -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = y1) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((x1 y3) = (NUMERAL 0)))) y3)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = (y0 -> y1).
Definition term19 (x0 : Prop) (x1 : Prop) := forall y0 : Prop, forall y1 : Prop, (x0 = y0) -> (y0 -> x1 = y1) -> (x0 -> x1) = (y0 -> y1).
Definition term82 (a0 : Type') := forall y0 : a0 -> nat, forall y1 : a0 -> Prop, (~ (@FINITE a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 y1) /\ (~ ((y0 y3) = (NUMERAL 0)))) y3)))) -> (@nsum a0 y1 y0) = (NUMERAL 0).
Definition term7 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) := forall y0 : a1 -> Prop, forall y1 : type1400 a0, (@iterate a0 a1 y1 y0 x0) = (@COND a0 (@FINITE a1 (@support a1 a0 y1 x0 y0)) (@ITSET a0 a1 (fun y2 : a1 => fun y3 : a0 => y1 (x0 y2) y3) (@support a1 a0 y1 x0 y0) (@neutral a0 y1)) (@neutral a0 y1)).
Definition term1 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) := forall y0 : a0 -> a1, forall y1 : type1400 a1, (@support a0 a1 y1 y0 x0) = (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((y0 y3) = (@neutral a1 y1)))) y3)).
Definition term3 (a0 : Type') (a1 : Type') (x0 : a0 -> Prop) (x1 : a0 -> a1) := forall y0 : type1400 a1, (@support a0 a1 y0 x1 x0) = (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x0) /\ (~ ((x1 y2) = (@neutral a1 y0)))) y2)).
Definition term53 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : a0) := (@IN a0 x2 x0) /\ (~ ((x1 x2) = (NUMERAL 0))).
Definition term39 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) := @ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add).
Definition term26 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) := ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) = (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1))))) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = x2) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> x2).
Definition term69 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)).
Definition term34 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) := forall y0 : a0, forall y1 : a0, (x0 = x3) -> (x3 -> x1 = y0) -> ((~ x3) -> x2 = y1) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 y0 y1).
Definition term6 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) := (fun y0 : a1 -> a0 => forall y1 : a1 -> Prop, forall y2 : type1400 a0, (@iterate a0 a1 y2 y1 y0) = (@COND a0 (@FINITE a1 (@support a1 a0 y2 y0 y1)) (@ITSET a0 a1 (fun y3 : a1 => fun y4 : a0 => y2 (y0 y3) y4) (@support a1 a0 y2 y0 y1) (@neutral a0 y2)) (@neutral a0 y2))) x0.
Definition term12 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @eq nat (@nsum a0 x0 x1).
Definition term79 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = True) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> True).
Definition term8 (a0 : Type') (a1 : Type') (x0 : a1 -> a0) (x1 : a1 -> Prop) := (fun y0 : a1 -> Prop => forall y1 : type1400 a0, (@iterate a0 a1 y1 y0 x0) = (@COND a0 (@FINITE a1 (@support a1 a0 y1 x0 y0)) (@ITSET a0 a1 (fun y2 : a1 => fun y3 : a0 => y1 (x0 y2) y3) (@support a1 a0 y1 x0 y0) (@neutral a0 y1)) (@neutral a0 y1))) x1.
Definition term13 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @eq nat (@iterate nat a0 Nat.add x0 x1).
Definition term14 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := imp (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))).
Definition term65 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : nat) (x3 : nat) := ((@FINITE a0 (@support a0 nat Nat.add x0 x1)) = False) -> (False -> (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) = x2) -> ((~ False) -> (@neutral nat Nat.add) = x3) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x0 x1)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x0 y0) y1) (@support a0 nat Nat.add x0 x1) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat False x2 x3).
Definition term81 (a0 : Type') (x0 : a0 -> nat) := forall y0 : a0 -> Prop, (~ (@FINITE a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 y0) /\ (~ ((x0 y2) = (NUMERAL 0)))) y2)))) -> (@nsum a0 y0 x0) = (NUMERAL 0).
Definition term21 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := ~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1))).
Definition term30 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : type1606) := @COND nat (@FINITE a0 (@support a0 nat x2 x0 x1)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => x2 (x0 y0) y1) (@support a0 nat x2 x0 x1) (@neutral nat x2)) (@neutral nat x2).
Definition term27 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) := ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = x2) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = ((~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> x2).
Definition term70 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := @ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0).
Definition term22 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : Prop) := (fun y0 : Prop => forall y1 : Prop, ((~ (@FINITE a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((x1 y3) = (NUMERAL 0)))) y3)))) = y0) -> (y0 -> ((@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = y1) -> ((~ (@FINITE a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ ((x1 y3) = (NUMERAL 0)))) y3)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0)) = (y0 -> y1)) x2.
Definition term73 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : nat) := ((~ False) -> (@neutral nat Nat.add) = x2) -> (@COND nat (@FINITE a0 (@support a0 nat Nat.add x1 x0)) (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@support a0 nat Nat.add x1 x0) (@neutral nat Nat.add)) (@neutral nat Nat.add)) = (@COND nat False (@ITSET nat a0 (fun y0 : a0 => fun y1 : nat => Nat.add (x1 y0) y1) (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)) (NUMERAL 0)) x2).
Definition term32 (a0 : Type') (x0 : Prop) (x1 : a0) (x2 : a0) (x3 : Prop) (x4 : a0) (x5 : a0) := (x0 = x3) -> (x3 -> x1 = x4) -> ((~ x3) -> x2 = x5) -> (@COND a0 x0 x1 x2) = (@COND a0 x3 x4 x5).
Definition term16 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) := (~ (@FINITE a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ ((x1 y1) = (NUMERAL 0)))) y1)))) -> (@iterate nat a0 Nat.add x0 x1) = (NUMERAL 0).
Definition term50 (a0 : Type') (x0 : a0 -> nat) (x1 : a0) := ~ ((x0 x1) = (NUMERAL 0)).
