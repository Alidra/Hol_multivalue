require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 a0 a1 a2 a3 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (list (prod (fun a1 a2) (fun a3 (fun a1 a0)))) (fun a3 (fun a2 a0))))) (λ y0 : El (type1248 a0 a1 a2 a3), (∀ (λ y1 : El type1669, (∧ (∀ (λ y2 : El a3, (∀ (λ y3 : El a2, (= (y0 y1 (@NIL (prod (fun a1 a2) (fun a3 (fun a1 a0)))) y2 y3) ((@ε a0) (λ y4 : El a0, T))))))) (∀ (λ y2 : El (type1644 a0 a1 a2 a3), (∀ (λ y3 : El (type1633 a0 a1 a2 a3), (∀ (λ y4 : El a3, (∀ (λ y5 : El a2, (= (y0 y1 ((@CONS (prod (fun a1 a2) (fun a3 (fun a1 a0)))) y2 y3) y4 y5) ((@COND a0) (∃ (λ y6 : El a1, (= ((@FST (fun a1 a2) (fun a3 (fun a1 a0))) y2 y6) y5))) ((@SND (fun a1 a2) (fun a3 (fun a1 a0))) y2 y4 ((@ε a1) (λ y6 : El a1, (= ((@FST (fun a1 a2) (fun a3 (fun a1 a0))) y2 y6) y5)))) (y0 y1 y3 y4 y5))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT1 (BIT1 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))))));
