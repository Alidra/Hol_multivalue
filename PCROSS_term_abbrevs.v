Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term1 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) := (fun y0 : type24 a0 a1 => fun y1 : type24 a0 a2 => @GSPEC (cart a0 (finite_sum a1 a2)) (fun y2 : type2 a0 a1 a2 => exists y3 : cart a0 a1, exists y4 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y2 ((@IN (cart a0 a1) y3 y0) /\ (@IN (cart a0 a2) y4 y1)) (@pastecart a0 a1 a2 y3 y4))) x0.
Definition term3 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) (x1 : type24 a0 a2) := (fun y0 : type24 a0 a2 => @GSPEC (cart a0 (finite_sum a1 a2)) (fun y1 : type2 a0 a1 a2 => exists y2 : cart a0 a1, exists y3 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y1 ((@IN (cart a0 a1) y2 x0) /\ (@IN (cart a0 a2) y3 y0)) (@pastecart a0 a1 a2 y2 y3))) x1.
Definition term2 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) := fun y0 : type24 a0 a2 => @GSPEC (cart a0 (finite_sum a1 a2)) (fun y1 : type2 a0 a1 a2 => exists y2 : cart a0 a1, exists y3 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y1 ((@IN (cart a0 a1) y2 x0) /\ (@IN (cart a0 a2) y3 y0)) (@pastecart a0 a1 a2 y2 y3)).
Definition term7 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) := (fun y0 : type24 a0 a1 => forall y1 : type24 a0 a2, (@PCROSS a0 a1 a2 y0 y1) = (@GSPEC (cart a0 (finite_sum a1 a2)) (fun y2 : type2 a0 a1 a2 => exists y3 : cart a0 a1, exists y4 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y2 ((@IN (cart a0 a1) y3 y0) /\ (@IN (cart a0 a2) y4 y1)) (@pastecart a0 a1 a2 y3 y4)))) x0.
Definition term6 (a0 : Type') (a1 : Type') (a2 : Type') := forall y0 : type24 a0 a1, forall y1 : type24 a0 a2, (@PCROSS a0 a1 a2 y0 y1) = (@GSPEC (cart a0 (finite_sum a1 a2)) (fun y2 : type2 a0 a1 a2 => exists y3 : cart a0 a1, exists y4 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y2 ((@IN (cart a0 a1) y3 y0) /\ (@IN (cart a0 a2) y4 y1)) (@pastecart a0 a1 a2 y3 y4))).
Definition term8 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) (x1 : type24 a0 a2) := (fun y0 : type24 a0 a2 => (@PCROSS a0 a1 a2 x0 y0) = (@GSPEC (cart a0 (finite_sum a1 a2)) (fun y1 : type2 a0 a1 a2 => exists y2 : cart a0 a1, exists y3 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y1 ((@IN (cart a0 a1) y2 x0) /\ (@IN (cart a0 a2) y3 y0)) (@pastecart a0 a1 a2 y2 y3)))) x1.
Definition term4 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) (x1 : type24 a0 a2) := @GSPEC (cart a0 (finite_sum a1 a2)) (fun y0 : type2 a0 a1 a2 => exists y1 : cart a0 a1, exists y2 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y0 ((@IN (cart a0 a1) y1 x0) /\ (@IN (cart a0 a2) y2 x1)) (@pastecart a0 a1 a2 y1 y2)).
Definition term0 (a0 : Type') (a1 : Type') (a2 : Type') := fun y0 : type24 a0 a1 => fun y1 : type24 a0 a2 => @GSPEC (cart a0 (finite_sum a1 a2)) (fun y2 : type2 a0 a1 a2 => exists y3 : cart a0 a1, exists y4 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y2 ((@IN (cart a0 a1) y3 y0) /\ (@IN (cart a0 a2) y4 y1)) (@pastecart a0 a1 a2 y3 y4)).
Definition term5 (a0 : Type') (a1 : Type') (a2 : Type') (x0 : type24 a0 a1) := forall y0 : type24 a0 a2, (@PCROSS a0 a1 a2 x0 y0) = (@GSPEC (cart a0 (finite_sum a1 a2)) (fun y1 : type2 a0 a1 a2 => exists y2 : cart a0 a1, exists y3 : cart a0 a2, @SETSPEC (cart a0 (finite_sum a1 a2)) y1 ((@IN (cart a0 a1) y2 x0) /\ (@IN (cart a0 a2) y3 y0)) (@pastecart a0 a1 a2 y2 y3))).
