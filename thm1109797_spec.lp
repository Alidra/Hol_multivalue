require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_terms;
symbol lem1109797 [_25786 _25787] : Prf (= (@ALLPAIRS _25786 _25787) ((@ε (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool))))) (λ ALLPAIRS' : El (fun (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (fun (fun _25787 (fun _25786 bool)) (fun (list _25787) (fun (list _25786) bool)))), (∀ (λ _18050 : El (prod num (prod num (prod num (prod num (prod num (prod num (prod num num))))))), (∧ (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f (@NIL _25787) l) T))))) (∀ (λ h : El _25787, (∀ (λ f : El (fun _25787 (fun _25786 bool)), (∀ (λ t : El (list _25787), (∀ (λ l : El (list _25786), (= (ALLPAIRS' _18050 f ((@CONS _25787) h t) l) (∧ ((@ALL _25786) (f h) l) (ALLPAIRS' _18050 f t l))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num (prod num num))))))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num (prod num num)))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))))))))))));
