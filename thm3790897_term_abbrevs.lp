require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term0 a0 a1 ≔ ((@ε (fun (prod num (prod num (prod num (prod num (prod num num))))) (fun (fun a0 (fun a1 a1)) (fun a1 (fun (fun a0 bool) (fun a1 (fun num bool))))))) (λ y0 : El (type1266 a0 a1), (∀ (λ y1 : El type1671, (∧ (∀ (λ y2 : El (type1411 a0 a1), (∀ (λ y3 : El (fun a0 bool), (∀ (λ y4 : El a1, (∀ (λ y5 : El a1, (= (y0 y1 y2 y5 y3 y4 (NUMERAL _0)) (∧ (= y3 (@EMPTY a0)) (= y4 y5))))))))))) (∀ (λ y2 : El a1, (∀ (λ y3 : El (fun a0 bool), (∀ (λ y4 : El num, (∀ (λ y5 : El a1, (∀ (λ y6 : El (type1411 a0 a1), (= (y0 y1 y6 y2 y3 y5 (SUC y4)) (∃ (λ y7 : El a0, (∃ (λ y8 : El a1, (∧ ((@IN a0) y7 y3) (∧ (y0 y1 y6 y2 ((@DELETE a0) y3 y7) y8 y4) (= y5 (y6 y7 y8))))))))))))))))))))))) ((@̦‚ num (prod num (prod num (prod num (prod num num))))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num (prod num num)))) (NUMERAL (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num (prod num num))) (NUMERAL (BIT0 (BIT1 (BIT1 (BIT1 (BIT0 (BIT0 (BIT1 _0)))))))) ((@̦‚ num (prod num num)) (NUMERAL (BIT0 (BIT1 (BIT0 (BIT0 (BIT1 (BIT0 (BIT1 _0)))))))) ((@̦‚ num num) (NUMERAL (BIT1 (BIT0 (BIT1 (BIT0 (BIT0 (BIT0 (BIT1 _0)))))))) (NUMERAL (BIT1 (BIT1 (BIT0 (BIT0 (BIT0 (BIT0 (BIT1 _0))))))))))))));
