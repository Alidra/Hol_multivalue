Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term27 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) (x3 : a0 -> nat) := (@FINITE a0 x1) -> (@iterate nat a0 Nat.add x1 (fun y0 : a0 => @COND nat (x2 y0) (x0 y0) (x3 y0))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (x2 y1)) y1)) x0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (~ (x2 y1))) y1)) x3)).
Definition term7 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0 -> nat) := @nsum a0 x0 (fun y0 : a0 => @COND nat (x1 y0) (x2 y0) (x3 y0)).
Definition term44 (a0 : Type') (x0 : type1606) := (@monoidal nat x0) -> forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@iterate nat a0 x0 y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (x0 (@iterate nat a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate nat a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term2 (a0 : Type') (a1 : Type') (x0 : type1400 a1) := (@monoidal a1 x0) -> forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> a1, forall y3 : a0 -> a1, (@FINITE a0 y0) -> (@iterate a1 a0 x0 y0 (fun y4 : a0 => @COND a1 (y1 y4) (y2 y4) (y3 y4))) = (x0 (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term25 (a0 : Type') (x0 : a0 -> Prop) := imp (@FINITE a0 x0).
Definition term20 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ (x1 y1))) y1)).
Definition term13 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)).
Definition term43 (a0 : Type') := forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@iterate nat a0 Nat.add y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term42 (a0 : Type') := forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@nsum a0 y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@nsum a0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term39 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0 -> Prop, forall y1 : a0 -> nat, forall y2 : a0 -> nat, (@FINITE a0 x0) -> (@iterate nat a0 Nat.add x0 (fun y3 : a0 => @COND nat (y0 y3) (y1 y3) (y2 y3))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (y0 y4)) y4)) y1) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (~ (y0 y4))) y4)) y2)).
Definition term38 (a0 : Type') (x0 : a0 -> Prop) := forall y0 : a0 -> Prop, forall y1 : a0 -> nat, forall y2 : a0 -> nat, (@FINITE a0 x0) -> (@nsum a0 x0 (fun y3 : a0 => @COND nat (y0 y3) (y1 y3) (y2 y3))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (y0 y4)) y4)) y1) (@nsum a0 (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (~ (y0 y4))) y4)) y2)).
Definition term3 (a0 : Type') (a1 : Type') (x0 : type1400 a1) := forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> a1, forall y3 : a0 -> a1, (@FINITE a0 y0) -> (@iterate a1 a0 x0 y0 (fun y4 : a0 => @COND a1 (y1 y4) (y2 y4) (y3 y4))) = (x0 (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term29 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) := fun y0 : a0 -> nat => (@FINITE a0 x1) -> (@iterate nat a0 Nat.add x1 (fun y1 : a0 => @COND nat (x2 y1) (x0 y1) (y0 y1))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (x2 y2)) y2)) x0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (~ (x2 y2))) y2)) y0)).
Definition term28 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) := fun y0 : a0 -> nat => (@FINITE a0 x1) -> (@nsum a0 x1 (fun y1 : a0 => @COND nat (x2 y1) (x0 y1) (y0 y1))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (x2 y2)) y2)) x0) (@nsum a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (~ (x2 y2))) y2)) y0)).
Definition term0 (a0 : Type') (a1 : Type') := forall y0 : type1400 a1, (@monoidal a1 y0) -> forall y1 : a0 -> Prop, forall y2 : a0 -> Prop, forall y3 : a0 -> a1, forall y4 : a0 -> a1, (@FINITE a0 y1) -> (@iterate a1 a0 y0 y1 (fun y5 : a0 => @COND a1 (y2 y5) (y3 y5) (y4 y5))) = (y0 (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (y2 y6)) y6)) y3) (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (~ (y2 y6))) y6)) y4)).
Definition term23 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) (x3 : a0 -> nat) := Nat.add (@nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (x2 y1)) y1)) x0) (@nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (~ (x2 y1))) y1)) x3).
Definition term17 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)) x2).
Definition term4 (a0 : Type') (a1 : Type') (x0 : type1400 a1) := (forall y0 : type1400 a1, (@monoidal a1 y0) -> forall y1 : a0 -> Prop, forall y2 : a0 -> Prop, forall y3 : a0 -> a1, forall y4 : a0 -> a1, (@FINITE a0 y1) -> (@iterate a1 a0 y0 y1 (fun y5 : a0 => @COND a1 (y2 y5) (y3 y5) (y4 y5))) = (y0 (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (y2 y6)) y6)) y3) (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (~ (y2 y6))) y6)) y4))) -> forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> a1, forall y3 : a0 -> a1, (@FINITE a0 y0) -> (@iterate a1 a0 x0 y0 (fun y4 : a0 => @COND a1 (y1 y4) (y2 y4) (y3 y4))) = (x0 (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate a1 a0 x0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term22 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := @iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ (x1 y1))) y1)) x2.
Definition term15 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := @iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)) x2.
Definition term21 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := @nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ (x1 y1))) y1)) x2.
Definition term14 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := @nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)) x2.
Definition term18 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ (x1 y1))) y1).
Definition term11 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1).
Definition term31 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) := forall y0 : a0 -> nat, (@FINITE a0 x1) -> (@iterate nat a0 Nat.add x1 (fun y1 : a0 => @COND nat (x2 y1) (x0 y1) (y0 y1))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (x2 y2)) y2)) x0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (~ (x2 y2))) y2)) y0)).
Definition term30 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) := forall y0 : a0 -> nat, (@FINITE a0 x1) -> (@nsum a0 x1 (fun y1 : a0 => @COND nat (x2 y1) (x0 y1) (y0 y1))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (x2 y2)) y2)) x0) (@nsum a0 (@GSPEC a0 (fun y1 : a0 => exists y2 : a0, @SETSPEC a0 y1 ((@IN a0 y2 x1) /\ (~ (x2 y2))) y2)) y0)).
Definition term9 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0 -> nat) := @eq nat (@nsum a0 x0 (fun y0 : a0 => @COND nat (x1 y0) (x2 y0) (x3 y0))).
Definition term33 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := fun y0 : a0 -> nat => forall y1 : a0 -> nat, (@FINITE a0 x0) -> (@iterate nat a0 Nat.add x0 (fun y2 : a0 => @COND nat (x1 y2) (y0 y2) (y1 y2))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (x1 y3)) y3)) y0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ (x1 y3))) y3)) y1)).
Definition term32 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := fun y0 : a0 -> nat => forall y1 : a0 -> nat, (@FINITE a0 x0) -> (@nsum a0 x0 (fun y2 : a0 => @COND nat (x1 y2) (y0 y2) (y1 y2))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (x1 y3)) y3)) y0) (@nsum a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ (x1 y3))) y3)) y1)).
Definition term35 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := forall y0 : a0 -> nat, forall y1 : a0 -> nat, (@FINITE a0 x0) -> (@iterate nat a0 Nat.add x0 (fun y2 : a0 => @COND nat (x1 y2) (y0 y2) (y1 y2))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (x1 y3)) y3)) y0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ (x1 y3))) y3)) y1)).
Definition term34 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := forall y0 : a0 -> nat, forall y1 : a0 -> nat, (@FINITE a0 x0) -> (@nsum a0 x0 (fun y2 : a0 => @COND nat (x1 y2) (y0 y2) (y1 y2))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (x1 y3)) y3)) y0) (@nsum a0 (@GSPEC a0 (fun y2 : a0 => exists y3 : a0, @SETSPEC a0 y2 ((@IN a0 y3 x0) /\ (~ (x1 y3))) y3)) y1)).
Definition term24 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) (x3 : a0 -> nat) := Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (x2 y1)) y1)) x0) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (~ (x2 y1))) y1)) x3).
Definition term19 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (~ (x1 y1))) y1)).
Definition term12 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) := @nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)).
Definition term8 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0 -> nat) := @iterate nat a0 Nat.add x0 (fun y0 : a0 => @COND nat (x1 y0) (x2 y0) (x3 y0)).
Definition term45 (a0 : Type') := (@monoidal nat Nat.add) -> forall y0 : a0 -> Prop, forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@iterate nat a0 Nat.add y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term1 (a0 : Type') (a1 : Type') (x0 : type1400 a1) := (fun y0 : type1400 a1 => (@monoidal a1 y0) -> forall y1 : a0 -> Prop, forall y2 : a0 -> Prop, forall y3 : a0 -> a1, forall y4 : a0 -> a1, (@FINITE a0 y1) -> (@iterate a1 a0 y0 y1 (fun y5 : a0 => @COND a1 (y2 y5) (y3 y5) (y4 y5))) = (y0 (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (y2 y6)) y6)) y3) (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (~ (y2 y6))) y6)) y4))) x0.
Definition term41 (a0 : Type') := fun y0 : a0 -> Prop => forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@iterate nat a0 Nat.add y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term40 (a0 : Type') := fun y0 : a0 -> Prop => forall y1 : a0 -> Prop, forall y2 : a0 -> nat, forall y3 : a0 -> nat, (@FINITE a0 y0) -> (@nsum a0 y0 (fun y4 : a0 => @COND nat (y1 y4) (y2 y4) (y3 y4))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (y1 y5)) y5)) y2) (@nsum a0 (@GSPEC a0 (fun y4 : a0 => exists y5 : a0, @SETSPEC a0 y4 ((@IN a0 y5 y0) /\ (~ (y1 y5))) y5)) y3)).
Definition term37 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : a0 -> Prop => forall y1 : a0 -> nat, forall y2 : a0 -> nat, (@FINITE a0 x0) -> (@iterate nat a0 Nat.add x0 (fun y3 : a0 => @COND nat (y0 y3) (y1 y3) (y2 y3))) = (Nat.add (@iterate nat a0 Nat.add (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (y0 y4)) y4)) y1) (@iterate nat a0 Nat.add (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (~ (y0 y4))) y4)) y2)).
Definition term36 (a0 : Type') (x0 : a0 -> Prop) := fun y0 : a0 -> Prop => forall y1 : a0 -> nat, forall y2 : a0 -> nat, (@FINITE a0 x0) -> (@nsum a0 x0 (fun y3 : a0 => @COND nat (y0 y3) (y1 y3) (y2 y3))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (y0 y4)) y4)) y1) (@nsum a0 (@GSPEC a0 (fun y3 : a0 => exists y4 : a0, @SETSPEC a0 y3 ((@IN a0 y4 x0) /\ (~ (y0 y4))) y4)) y2)).
Definition term5 (a0 : Type') (a1 : Type') := (forall y0 : type1400 a1, (@monoidal a1 y0) -> forall y1 : a0 -> Prop, forall y2 : a0 -> Prop, forall y3 : a0 -> a1, forall y4 : a0 -> a1, (@FINITE a0 y1) -> (@iterate a1 a0 y0 y1 (fun y5 : a0 => @COND a1 (y2 y5) (y3 y5) (y4 y5))) = (y0 (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (y2 y6)) y6)) y3) (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (~ (y2 y6))) y6)) y4))) -> forall y0 : type1400 a1, (@monoidal a1 y0) -> forall y1 : a0 -> Prop, forall y2 : a0 -> Prop, forall y3 : a0 -> a1, forall y4 : a0 -> a1, (@FINITE a0 y1) -> (@iterate a1 a0 y0 y1 (fun y5 : a0 => @COND a1 (y2 y5) (y3 y5) (y4 y5))) = (y0 (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (y2 y6)) y6)) y3) (@iterate a1 a0 y0 (@GSPEC a0 (fun y5 : a0 => exists y6 : a0, @SETSPEC a0 y5 ((@IN a0 y6 y1) /\ (~ (y2 y6))) y6)) y4)).
Definition term16 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) := Nat.add (@nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x0) /\ (x1 y1)) y1)) x2).
Definition term26 (a0 : Type') (x0 : a0 -> nat) (x1 : a0 -> Prop) (x2 : a0 -> Prop) (x3 : a0 -> nat) := (@FINITE a0 x1) -> (@nsum a0 x1 (fun y0 : a0 => @COND nat (x2 y0) (x0 y0) (x3 y0))) = (Nat.add (@nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (x2 y1)) y1)) x0) (@nsum a0 (@GSPEC a0 (fun y0 : a0 => exists y1 : a0, @SETSPEC a0 y0 ((@IN a0 y1 x1) /\ (~ (x2 y1))) y1)) x3)).
Definition term6 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> nat) (x2 : a0 -> nat) := fun y0 : a0 => @COND nat (x0 y0) (x1 y0) (x2 y0).
Definition term10 (a0 : Type') (x0 : a0 -> Prop) (x1 : a0 -> Prop) (x2 : a0 -> nat) (x3 : a0 -> nat) := @eq nat (@iterate nat a0 Nat.add x0 (fun y0 : a0 => @COND nat (x1 y0) (x2 y0) (x3 y0))).
