Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_type_abbrevs.
Require Import hol_terms.
Definition term32 (x0 : nat) (x1 : nat -> nat) := Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)) x1).
Definition term36 (x0 : nat -> nat) := fun y0 : nat => (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)).
Definition term8 (x0 : nat -> nat) := and ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)).
Definition term28 (x0 : nat) := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term21 (x0 : nat) := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)).
Definition term15 := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)).
Definition term29 (x0 : nat) (x1 : nat -> nat) := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)) x1.
Definition term22 (x0 : nat) (x1 : nat -> nat) := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)) x1.
Definition term12 (x0 : nat -> nat) := imp (((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))).
Definition term11 (x0 : nat -> nat) := imp (((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (@neutral nat Nat.add)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))).
Definition term6 (x0 : nat -> nat) := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0.
Definition term18 (x0 : nat -> nat) := and ((@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)).
Definition term42 (x0 : nat -> nat) := @eq Prop ((fun y0 : Prop => y0 = True) ((((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) -> ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))))).
Definition term43 (x0 : nat -> nat) := @eq Prop (((((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) -> ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) = True).
Definition term27 (x0 : nat) := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)).
Definition term20 (x0 : nat) := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)).
Definition term14 := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)).
Definition term25 (x0 : nat) (x1 : nat -> nat) := @eq nat (@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)) x1).
Definition term40 (x0 : nat -> nat) := (((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) -> ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term39 (x0 : nat -> nat) := (((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (@neutral nat Nat.add)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) -> ((@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term34 (x0 : nat -> nat) (x1 : nat) := Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x1) y1)) x0) (x0 x1).
Definition term7 (x0 : nat -> nat) := and ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (@neutral nat Nat.add)).
Definition term2 (x0 : type1606) (x1 : nat -> nat) := (@monoidal nat x0) -> ((@iterate nat nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x1) = (@neutral nat x0)) /\ (forall y0 : nat, (@iterate nat nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x1) = (x0 (@iterate nat nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x1) (x1 y0))).
Definition term1 (a0 : Type') (x0 : type1400 a0) (x1 : nat -> a0) := (@monoidal a0 x0) -> ((@iterate a0 nat x0 (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x1) = (@neutral a0 x0)) /\ (forall y0 : nat, (@iterate a0 nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x1) = (x0 (@iterate a0 nat x0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x1) (x1 y0))).
Definition term24 (x0 : nat) (x1 : nat -> nat) := @eq nat (@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)) x1).
Definition term4 (x0 : nat -> nat) := ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (@neutral nat Nat.add)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term0 (a0 : Type') (x0 : nat -> a0) (x1 : type1400 a0) := (fun y0 : type1400 a0 => (@monoidal a0 y0) -> ((@iterate a0 nat y0 (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (NUMERAL 0)) y2)) x0) = (@neutral a0 y0)) /\ (forall y1 : nat, (@iterate a0 nat y0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 (S y1)) y3)) x0) = (y0 (@iterate a0 nat y0 (@GSPEC nat (fun y2 : nat => exists y3 : nat, @SETSPEC nat y2 (Peano.lt y3 y1) y3)) x0) (x0 y1)))) x1.
Definition term16 (x0 : nat -> nat) := @nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0.
Definition term17 (x0 : nat -> nat) := @eq nat (@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0).
Definition term3 (x0 : nat -> nat) := (@monoidal nat Nat.add) -> ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (@neutral nat Nat.add)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term5 (x0 : nat -> nat) := @eq nat (@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0).
Definition term31 (x0 : nat) (x1 : nat -> nat) := Nat.add (@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)) x1).
Definition term41 (x0 : nat -> nat) := (fun y0 : Prop => y0 = True) ((((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))) -> ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)))).
Definition term35 (x0 : nat -> nat) := fun y0 : nat => (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)).
Definition term30 (x0 : nat) (x1 : nat -> nat) := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1)) x1.
Definition term23 (x0 : nat) (x1 : nat -> nat) := @iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1)) x1.
Definition term37 (x0 : nat -> nat) := forall y0 : nat, (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)).
Definition term9 (x0 : nat -> nat) := forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0)).
Definition term38 (x0 : nat -> nat) := ((@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@nsum nat (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term10 (x0 : nat -> nat) := ((@iterate nat nat Nat.add (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1)) x0) = (NUMERAL 0)) /\ (forall y0 : nat, (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 (S y0)) y2)) x0) = (Nat.add (@iterate nat nat Nat.add (@GSPEC nat (fun y1 : nat => exists y2 : nat, @SETSPEC nat y1 (Peano.lt y2 y0) y2)) x0) (x0 y0))).
Definition term33 (x0 : nat -> nat) (x1 : nat) := Nat.add (@nsum nat (@GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x1) y1)) x0) (x0 x1).
Definition term26 (x0 : nat) := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 x0) y1).
Definition term19 (x0 : nat) := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (S x0)) y1).
Definition term13 := @GSPEC nat (fun y0 : nat => exists y1 : nat, @SETSPEC nat y0 (Peano.lt y1 (NUMERAL 0)) y1).
