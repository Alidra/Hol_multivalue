require open hol-light.theory_hol;
require open hol-light.hol_types;
require open hol-light.hol_type_abbrevs;
require open hol-light.hol_terms;
symbol term14 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x1) (<= x1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1) ((@﹩ a0 a1) x0 x1)));
symbol term12 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1);
symbol term8 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x1) (<= x1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1) ((λ y0 : El num, ((@﹩ a0 a1) x0 y0)) x1)));
symbol term20 a0 (x0: El bool) ≔ (∀ (λ y0 : El a0, x0));
symbol term4 a0 a1 (x0: El (cart a0 a1)) (x1: El (cart a0 a1)) ≔ ((λ y0 : El (cart a0 a1), (= (= x0 y0) (∀ (λ y1 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y1) (<= y1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) x0 y1) ((@﹩ a0 a1) y0 y1))))))) x1);
symbol term23 a0 a1 ≔ (λ y0 : El (cart a0 a1), T);
symbol term3 a0 a1 (x0: El (cart a0 a1)) ≔ (∀ (λ y0 : El (cart a0 a1), (= (= x0 y0) (∀ (λ y1 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y1) (<= y1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) x0 y1) ((@﹩ a0 a1) y0 y1))))))));
symbol term24 a0 a1 ≔ (∀ (λ y0 : El (cart a0 a1), (= ((@lambda a0 a1) (λ y1 : El num, ((@﹩ a0 a1) y0 y1))) y0)));
symbol term22 a0 a1 ≔ (λ y0 : El (cart a0 a1), (= ((@lambda a0 a1) (λ y1 : El num, ((@﹩ a0 a1) y0 y1))) y0));
symbol term15 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ ((@= bool) (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x1) (<= x1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1) ((λ y0 : El num, ((@﹩ a0 a1) x0 y0)) x1))));
symbol term13 a0 (x0: El num) ≔ (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x0) (<= x0 ((@dimindex a0) (@UNIV a0)))));
symbol term16 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ ((@= bool) (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x1) (<= x1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1) ((@﹩ a0 a1) x0 x1))));
symbol term0 a0 a1 (x0: El (fun num a0)) (x1: El num) ≔ ((λ y0 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y0) (<= y0 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) x0) y0) (x0 y0)))) x1);
symbol term11 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ ((@= a0) ((@﹩ a0 a1) ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0))) x1));
symbol term26 a0 a1 (x0: El bool) ≔ (∀ (λ y0 : El (cart a0 a1), x0));
symbol term10 a0 a1 (x0: El (cart a0 a1)) (x1: El num) ≔ ((λ y0 : El num, ((@﹩ a0 a1) x0 y0)) x1);
symbol term19 ≔ (∀ (λ y0 : El num, T));
symbol term25 a0 a1 ≔ (∀ (λ y0 : El (cart a0 a1), T));
symbol term18 ≔ (λ y0 : El num, T);
symbol term1 a0 a1 (x0: El (fun num a0)) (x1: El num) ≔ (⇒ (∧ (<= (NUMERAL (BIT1 _0)) x1) (<= x1 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) x0) x1) (x0 x1)));
symbol term2 a0 a1 (x0: El (cart a0 a1)) ≔ ((λ y0 : El (cart a0 a1), (∀ (λ y1 : El (cart a0 a1), (= (= y0 y1) (∀ (λ y2 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y2) (<= y2 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) y0 y2) ((@﹩ a0 a1) y1 y2))))))))) x0);
symbol term17 a0 a1 (x0: El (cart a0 a1)) ≔ (λ y0 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y0) (<= y0 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y1 : El num, ((@﹩ a0 a1) x0 y1))) y0) ((@﹩ a0 a1) x0 y0))));
symbol term7 a0 a1 (x0: El (cart a0 a1)) ≔ (∀ (λ y0 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y0) (<= y0 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) ((@lambda a0 a1) (λ y1 : El num, ((@﹩ a0 a1) x0 y1))) y0) ((@﹩ a0 a1) x0 y0)))));
symbol term5 a0 a1 (x0: El (cart a0 a1)) (x1: El (cart a0 a1)) ≔ (∀ (λ y0 : El num, (⇒ (∧ (<= (NUMERAL (BIT1 _0)) y0) (<= y0 ((@dimindex a1) (@UNIV a1)))) (= ((@﹩ a0 a1) x0 y0) ((@﹩ a0 a1) x1 y0)))));
symbol term9 a0 a1 (x0: El (cart a0 a1)) ≔ (λ y0 : El num, ((@﹩ a0 a1) x0 y0));
symbol term6 a0 a1 (x0: El (cart a0 a1)) ≔ ((@lambda a0 a1) (λ y0 : El num, ((@﹩ a0 a1) x0 y0)));
symbol term21 (x0: El bool) ≔ (∀ (λ y0 : El num, x0));
