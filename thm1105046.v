Require Import coq.
Require Import theory_hol.
Require Import hol_types.
Require Import hol_terms.
Require Import hol_axioms.
Require Import hol_type_abbrevs.
Require Import thm1105046_term_abbrevs.
Require Import thm1104601_spec.
Require Import thm1104977_spec.
Lemma lem1104978 {_25498 _25501 _25508 : Type'} : (term0 _25498 _25501 _25508) = (term1 _25498 _25501 _25508).
Proof. exact (eq_refl (term0 _25498 _25501 _25508)). Qed.
Lemma lem1104979 {_25498 _25501 _25508 : Type'} : term1 _25498 _25501 _25508.
Proof. exact (EQ_MP (@lem1104978 _25498 _25501 _25508) (@lem1104601 _25498 _25501 _25508)). Qed.
Lemma lem1104980 {_25498 _25501 _25508 : Type'} : term2 _25498 _25501 _25508.
Proof. exact (@lem1104979 _25498 _25501 _25508 term3). Qed.
Lemma lem1104981 {_25498 _25501 _25508 : Type'} : (term2 _25498 _25501 _25508) = (term4 _25498 _25501 _25508).
Proof. exact (eq_refl (term2 _25498 _25501 _25508)). Qed.
Lemma lem1104982 {_25498 _25501 _25508 : Type'} : term4 _25498 _25501 _25508.
Proof. exact (EQ_MP (@lem1104981 _25498 _25501 _25508) (@lem1104980 _25498 _25501 _25508)). Qed.
Lemma lem1104983 {_25498 _25501 _25508 : Type'} (h1 : (@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508)) : (@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508).
Proof. exact (h1). Qed.
Lemma lem1104984 {_25498 _25501 _25508 : Type'} (h1 : (@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508)) : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (SYM (@lem1104983 _25498 _25501 _25508 h1)). Qed.
Lemma lem1104985 {_25498 _25501 _25508 : Type'} (h1 : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508)) : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (h1). Qed.
Lemma lem1104986 {_25498 _25501 _25508 : Type'} (h1 : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508)) : (@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508).
Proof. exact (SYM (@lem1104985 _25498 _25501 _25508 h1)). Qed.
Lemma lem1104987 {_25498 _25501 _25508 : Type'} : ((@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508)) = ((term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508)).
Proof. exact (prop_ext (fun h1 : (@MAP2 _25498 _25501 _25508) = (term5 _25498 _25501 _25508) => @lem1104984 _25498 _25501 _25508 h1) (fun h1 : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508) => @lem1104986 _25498 _25501 _25508 h1)). Qed.
Lemma lem1104990 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (EQ_MP (@lem1104987 _25498 _25501 _25508) (@lem1104977 _25498 _25501 _25508)). Qed.
Lemma lem1104991 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (@lem1104990 _25498 _25501 _25508). Qed.
Lemma lem1104992 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem1104993 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term6 _25498 _25501 _25508 f) = (@MAP2 _25498 _25501 _25508 f).
Proof. exact (MK_COMB (@lem1104991 _25498 _25501 _25508) (@lem1104992 _25498 _25501 _25508 f)). Qed.
Lemma lem1104994 {_25501 : Type'} : (@nil _25501) = (@nil _25501).
Proof. exact (eq_refl (@nil _25501)). Qed.
Lemma lem1104995 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term7 _25498 _25501 _25508 f) = (@MAP2 _25498 _25501 _25508 f (@nil _25501)).
Proof. exact (MK_COMB (@lem1104993 _25498 _25501 _25508 f) (@lem1104994 _25501)). Qed.
Lemma lem1104996 {_25508 : Type'} (l : list _25508) : l = l.
Proof. exact (eq_refl l). Qed.
Lemma lem1104997 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (l : list _25508) : (term8 _25498 _25501 _25508 f l) = (@MAP2 _25498 _25501 _25508 f (@nil _25501) l).
Proof. exact (MK_COMB (@lem1104995 _25498 _25501 _25508 f) (@lem1104996 _25508 l)). Qed.
Lemma lem1104998 {_25498 : Type'} : (@eq (list _25498)) = (@eq (list _25498)).
Proof. exact (eq_refl (@eq (list _25498))). Qed.
Lemma lem1104999 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (l : list _25508) : (term9 _25498 _25501 _25508 f l) = (term10 _25498 _25501 _25508 f l).
Proof. exact (MK_COMB (@lem1104998 _25498) (@lem1104997 _25498 _25501 _25508 f l)). Qed.
Lemma lem1105000 {_25498 : Type'} : (@nil _25498) = (@nil _25498).
Proof. exact (eq_refl (@nil _25498)). Qed.
Lemma lem1105001 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (l : list _25508) : ((term8 _25498 _25501 _25508 f l) = (@nil _25498)) = ((@MAP2 _25498 _25501 _25508 f (@nil _25501) l) = (@nil _25498)).
Proof. exact (MK_COMB (@lem1104999 _25498 _25501 _25508 f l) (@lem1105000 _25498)). Qed.
Lemma lem1105002 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term11 _25498 _25501 _25508 f) = (term12 _25498 _25501 _25508 f).
Proof. exact (fun_ext (fun l : list _25508 => @lem1105001 _25498 _25501 _25508 f l)). Qed.
Lemma lem1105003 {_25508 : Type'} : (@all (list _25508)) = (@all (list _25508)).
Proof. exact (eq_refl (@all (list _25508))). Qed.
Lemma lem1105004 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term13 _25498 _25501 _25508 f) = (term14 _25498 _25501 _25508 f).
Proof. exact (MK_COMB (@lem1105003 _25508) (@lem1105002 _25498 _25501 _25508 f)). Qed.
Lemma lem1105005 {_25498 _25501 _25508 : Type'} : (term15 _25498 _25501 _25508) = (term16 _25498 _25501 _25508).
Proof. exact (fun_ext (fun f : type1475 _25498 _25501 _25508 => @lem1105004 _25498 _25501 _25508 f)). Qed.
Lemma lem1105006 {_25498 _25501 _25508 : Type'} : (@all (_25501 -> _25508 -> _25498)) = (@all (_25501 -> _25508 -> _25498)).
Proof. exact (eq_refl (@all (_25501 -> _25508 -> _25498))). Qed.
Lemma lem1105007 {_25498 _25501 _25508 : Type'} : (term17 _25498 _25501 _25508) = (term18 _25498 _25501 _25508).
Proof. exact (MK_COMB (@lem1105006 _25498 _25501 _25508) (@lem1105005 _25498 _25501 _25508)). Qed.
Lemma lem1105008 : and = and.
Proof. exact (eq_refl and). Qed.
Lemma lem1105009 {_25498 _25501 _25508 : Type'} : (term19 _25498 _25501 _25508) = (term20 _25498 _25501 _25508).
Proof. exact (MK_COMB (@lem1105008) (@lem1105007 _25498 _25501 _25508)). Qed.
Lemma lem1105011 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (EQ_MP (@lem1104987 _25498 _25501 _25508) (@lem1104977 _25498 _25501 _25508)). Qed.
Lemma lem1105012 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (@lem1105011 _25498 _25501 _25508). Qed.
Lemma lem1105013 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem1105014 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term6 _25498 _25501 _25508 f) = (@MAP2 _25498 _25501 _25508 f).
Proof. exact (MK_COMB (@lem1105012 _25498 _25501 _25508) (@lem1105013 _25498 _25501 _25508 f)). Qed.
Lemma lem1105015 {_25501 : Type'} (h1' : _25501) (t1 : list _25501) : (@cons _25501 h1' t1) = (@cons _25501 h1' t1).
Proof. exact (eq_refl (@cons _25501 h1' t1)). Qed.
Lemma lem1105016 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (h1' : _25501) (t1 : list _25501) : (term21 _25498 _25501 _25508 f h1' t1) = (term22 _25498 _25501 _25508 f h1' t1).
Proof. exact (MK_COMB (@lem1105014 _25498 _25501 _25508 f) (@lem1105015 _25501 h1' t1)). Qed.
Lemma lem1105017 {_25508 : Type'} (l : list _25508) : l = l.
Proof. exact (eq_refl l). Qed.
Lemma lem1105018 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (h1' : _25501) (t1 : list _25501) (l : list _25508) : (term23 _25498 _25501 _25508 f h1' t1 l) = (term24 _25498 _25501 _25508 f h1' t1 l).
Proof. exact (MK_COMB (@lem1105016 _25498 _25501 _25508 f h1' t1) (@lem1105017 _25508 l)). Qed.
Lemma lem1105019 {_25498 : Type'} : (@eq (list _25498)) = (@eq (list _25498)).
Proof. exact (eq_refl (@eq (list _25498))). Qed.
Lemma lem1105020 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (h1' : _25501) (t1 : list _25501) (l : list _25508) : (term25 _25498 _25501 _25508 f h1' t1 l) = (term26 _25498 _25501 _25508 f h1' t1 l).
Proof. exact (MK_COMB (@lem1105019 _25498) (@lem1105018 _25498 _25501 _25508 f h1' t1 l)). Qed.
Lemma lem1105022 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (EQ_MP (@lem1104987 _25498 _25501 _25508) (@lem1104977 _25498 _25501 _25508)). Qed.
Lemma lem1105023 {_25498 _25501 _25508 : Type'} : (term5 _25498 _25501 _25508) = (@MAP2 _25498 _25501 _25508).
Proof. exact (@lem1105022 _25498 _25501 _25508). Qed.
Lemma lem1105024 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : f = f.
Proof. exact (eq_refl f). Qed.
Lemma lem1105025 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) : (term6 _25498 _25501 _25508 f) = (@MAP2 _25498 _25501 _25508 f).
Proof. exact (MK_COMB (@lem1105023 _25498 _25501 _25508) (@lem1105024 _25498 _25501 _25508 f)). Qed.
Lemma lem1105026 {_25501 : Type'} (t1 : list _25501) : t1 = t1.
Proof. exact (eq_refl t1). Qed.
Lemma lem1105027 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (t1 : list _25501) : (term27 _25498 _25501 _25508 f t1) = (@MAP2 _25498 _25501 _25508 f t1).
Proof. exact (MK_COMB (@lem1105025 _25498 _25501 _25508 f) (@lem1105026 _25501 t1)). Qed.
Lemma lem1105028 {_25508 : Type'} (l : list _25508) : (@tl _25508 l) = (@tl _25508 l).
Proof. exact (eq_refl (@tl _25508 l)). Qed.
Lemma lem1105029 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (t1 : list _25501) (l : list _25508) : (term28 _25498 _25501 _25508 f t1 l) = (term29 _25498 _25501 _25508 f t1 l).
Proof. exact (MK_COMB (@lem1105027 _25498 _25501 _25508 f t1) (@lem1105028 _25508 l)). Qed.
Lemma lem1105030 {_25498 _25501 _25508 : Type'} (f : type1475 _25498 _25501 _25508) (h1' : _25501) (l : list _25508) : (term30 _25498 _25501 _25508 f h1' l) = (term30 _25498 _25501 _25508 f h1' l).
Proof. exact (eq_refl (term30 _25498 _25501 _25508 f h1' l)). Qed.
Lemma lem1105031 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) (t1 : list _25501) (l : list _25508) : (term31 _25498 _25501 _25508 h1' f t1 l) = (term32 _25498 _25501 _25508 h1' f t1 l).
Proof. exact (MK_COMB (@lem1105030 _25498 _25501 _25508 f h1' l) (@lem1105029 _25498 _25501 _25508 f t1 l)). Qed.
Lemma lem1105032 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) (t1 : list _25501) (l : list _25508) : ((term23 _25498 _25501 _25508 f h1' t1 l) = (term31 _25498 _25501 _25508 h1' f t1 l)) = ((term24 _25498 _25501 _25508 f h1' t1 l) = (term32 _25498 _25501 _25508 h1' f t1 l)).
Proof. exact (MK_COMB (@lem1105020 _25498 _25501 _25508 f h1' t1 l) (@lem1105031 _25498 _25501 _25508 h1' f t1 l)). Qed.
Lemma lem1105033 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) (t1 : list _25501) : (term33 _25498 _25501 _25508 h1' f t1) = (term34 _25498 _25501 _25508 h1' f t1).
Proof. exact (fun_ext (fun l : list _25508 => @lem1105032 _25498 _25501 _25508 h1' f t1 l)). Qed.
Lemma lem1105034 {_25508 : Type'} : (@all (list _25508)) = (@all (list _25508)).
Proof. exact (eq_refl (@all (list _25508))). Qed.
Lemma lem1105035 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) (t1 : list _25501) : (term35 _25498 _25501 _25508 h1' f t1) = (term36 _25498 _25501 _25508 h1' f t1).
Proof. exact (MK_COMB (@lem1105034 _25508) (@lem1105033 _25498 _25501 _25508 h1' f t1)). Qed.
Lemma lem1105036 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) : (term37 _25498 _25501 _25508 h1' f) = (term38 _25498 _25501 _25508 h1' f).
Proof. exact (fun_ext (fun t1 : list _25501 => @lem1105035 _25498 _25501 _25508 h1' f t1)). Qed.
Lemma lem1105037 {_25501 : Type'} : (@all (list _25501)) = (@all (list _25501)).
Proof. exact (eq_refl (@all (list _25501))). Qed.
Lemma lem1105038 {_25498 _25501 _25508 : Type'} (h1' : _25501) (f : type1475 _25498 _25501 _25508) : (term39 _25498 _25501 _25508 h1' f) = (term40 _25498 _25501 _25508 h1' f).
Proof. exact (MK_COMB (@lem1105037 _25501) (@lem1105036 _25498 _25501 _25508 h1' f)). Qed.
Lemma lem1105039 {_25498 _25501 _25508 : Type'} (h1' : _25501) : (term41 _25498 _25501 _25508 h1') = (term42 _25498 _25501 _25508 h1').
Proof. exact (fun_ext (fun f : type1475 _25498 _25501 _25508 => @lem1105038 _25498 _25501 _25508 h1' f)). Qed.
Lemma lem1105040 {_25498 _25501 _25508 : Type'} : (@all (_25501 -> _25508 -> _25498)) = (@all (_25501 -> _25508 -> _25498)).
Proof. exact (eq_refl (@all (_25501 -> _25508 -> _25498))). Qed.
Lemma lem1105041 {_25498 _25501 _25508 : Type'} (h1' : _25501) : (term43 _25498 _25501 _25508 h1') = (term44 _25498 _25501 _25508 h1').
Proof. exact (MK_COMB (@lem1105040 _25498 _25501 _25508) (@lem1105039 _25498 _25501 _25508 h1')). Qed.
Lemma lem1105042 {_25498 _25501 _25508 : Type'} : (term45 _25498 _25501 _25508) = (term46 _25498 _25501 _25508).
Proof. exact (fun_ext (fun h1' : _25501 => @lem1105041 _25498 _25501 _25508 h1')). Qed.
Lemma lem1105043 {_25501 : Type'} : (@all _25501) = (@all _25501).
Proof. exact (eq_refl (@all _25501)). Qed.
Lemma lem1105044 {_25498 _25501 _25508 : Type'} : (term47 _25498 _25501 _25508) = (term48 _25498 _25501 _25508).
Proof. exact (MK_COMB (@lem1105043 _25501) (@lem1105042 _25498 _25501 _25508)). Qed.
Lemma lem1105045 {_25498 _25501 _25508 : Type'} : (term4 _25498 _25501 _25508) = (term49 _25498 _25501 _25508).
Proof. exact (MK_COMB (@lem1105009 _25498 _25501 _25508) (@lem1105044 _25498 _25501 _25508)). Qed.
Lemma lem1105046 {_25498 _25501 _25508 : Type'} : term49 _25498 _25501 _25508.
Proof. exact (EQ_MP (@lem1105045 _25498 _25501 _25508) (@lem1104982 _25498 _25501 _25508)). Qed.
